
do_an_Phat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005368  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  08005478  08005478  00015478  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005680  08005680  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08005680  08005680  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005680  08005680  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005680  08005680  00015680  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005684  08005684  00015684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08005688  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000028c  20000028  080056ac  00020028  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200002b4  080056ac  000202b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007dbd  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001daf  00000000  00000000  00027e4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000870  00000000  00000000  00029c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000659  00000000  00000000  0002a470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016f7a  00000000  00000000  0002aac9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009bb5  00000000  00000000  00041a43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00086f2c  00000000  00000000  0004b5f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000024f0  00000000  00000000  000d2524  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000d4a14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000028 	.word	0x20000028
 800012c:	00000000 	.word	0x00000000
 8000130:	08005460 	.word	0x08005460

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000002c 	.word	0x2000002c
 800014c:	08005460 	.word	0x08005460

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_frsub>:
 8000a8c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a90:	e002      	b.n	8000a98 <__addsf3>
 8000a92:	bf00      	nop

08000a94 <__aeabi_fsub>:
 8000a94:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a98 <__addsf3>:
 8000a98:	0042      	lsls	r2, r0, #1
 8000a9a:	bf1f      	itttt	ne
 8000a9c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000aa0:	ea92 0f03 	teqne	r2, r3
 8000aa4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aac:	d06a      	beq.n	8000b84 <__addsf3+0xec>
 8000aae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ab2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab6:	bfc1      	itttt	gt
 8000ab8:	18d2      	addgt	r2, r2, r3
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	4048      	eorgt	r0, r1
 8000abe:	4041      	eorgt	r1, r0
 8000ac0:	bfb8      	it	lt
 8000ac2:	425b      	neglt	r3, r3
 8000ac4:	2b19      	cmp	r3, #25
 8000ac6:	bf88      	it	hi
 8000ac8:	4770      	bxhi	lr
 8000aca:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ace:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad6:	bf18      	it	ne
 8000ad8:	4240      	negne	r0, r0
 8000ada:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ade:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ae2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae6:	bf18      	it	ne
 8000ae8:	4249      	negne	r1, r1
 8000aea:	ea92 0f03 	teq	r2, r3
 8000aee:	d03f      	beq.n	8000b70 <__addsf3+0xd8>
 8000af0:	f1a2 0201 	sub.w	r2, r2, #1
 8000af4:	fa41 fc03 	asr.w	ip, r1, r3
 8000af8:	eb10 000c 	adds.w	r0, r0, ip
 8000afc:	f1c3 0320 	rsb	r3, r3, #32
 8000b00:	fa01 f103 	lsl.w	r1, r1, r3
 8000b04:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b08:	d502      	bpl.n	8000b10 <__addsf3+0x78>
 8000b0a:	4249      	negs	r1, r1
 8000b0c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b10:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b14:	d313      	bcc.n	8000b3e <__addsf3+0xa6>
 8000b16:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b1a:	d306      	bcc.n	8000b2a <__addsf3+0x92>
 8000b1c:	0840      	lsrs	r0, r0, #1
 8000b1e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b22:	f102 0201 	add.w	r2, r2, #1
 8000b26:	2afe      	cmp	r2, #254	; 0xfe
 8000b28:	d251      	bcs.n	8000bce <__addsf3+0x136>
 8000b2a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b32:	bf08      	it	eq
 8000b34:	f020 0001 	biceq.w	r0, r0, #1
 8000b38:	ea40 0003 	orr.w	r0, r0, r3
 8000b3c:	4770      	bx	lr
 8000b3e:	0049      	lsls	r1, r1, #1
 8000b40:	eb40 0000 	adc.w	r0, r0, r0
 8000b44:	3a01      	subs	r2, #1
 8000b46:	bf28      	it	cs
 8000b48:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b4c:	d2ed      	bcs.n	8000b2a <__addsf3+0x92>
 8000b4e:	fab0 fc80 	clz	ip, r0
 8000b52:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b56:	ebb2 020c 	subs.w	r2, r2, ip
 8000b5a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5e:	bfaa      	itet	ge
 8000b60:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b64:	4252      	neglt	r2, r2
 8000b66:	4318      	orrge	r0, r3
 8000b68:	bfbc      	itt	lt
 8000b6a:	40d0      	lsrlt	r0, r2
 8000b6c:	4318      	orrlt	r0, r3
 8000b6e:	4770      	bx	lr
 8000b70:	f092 0f00 	teq	r2, #0
 8000b74:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b78:	bf06      	itte	eq
 8000b7a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7e:	3201      	addeq	r2, #1
 8000b80:	3b01      	subne	r3, #1
 8000b82:	e7b5      	b.n	8000af0 <__addsf3+0x58>
 8000b84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b8c:	bf18      	it	ne
 8000b8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b92:	d021      	beq.n	8000bd8 <__addsf3+0x140>
 8000b94:	ea92 0f03 	teq	r2, r3
 8000b98:	d004      	beq.n	8000ba4 <__addsf3+0x10c>
 8000b9a:	f092 0f00 	teq	r2, #0
 8000b9e:	bf08      	it	eq
 8000ba0:	4608      	moveq	r0, r1
 8000ba2:	4770      	bx	lr
 8000ba4:	ea90 0f01 	teq	r0, r1
 8000ba8:	bf1c      	itt	ne
 8000baa:	2000      	movne	r0, #0
 8000bac:	4770      	bxne	lr
 8000bae:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bb2:	d104      	bne.n	8000bbe <__addsf3+0x126>
 8000bb4:	0040      	lsls	r0, r0, #1
 8000bb6:	bf28      	it	cs
 8000bb8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bbc:	4770      	bx	lr
 8000bbe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bc2:	bf3c      	itt	cc
 8000bc4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc8:	4770      	bxcc	lr
 8000bca:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bce:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bd2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd6:	4770      	bx	lr
 8000bd8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bdc:	bf16      	itet	ne
 8000bde:	4608      	movne	r0, r1
 8000be0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be4:	4601      	movne	r1, r0
 8000be6:	0242      	lsls	r2, r0, #9
 8000be8:	bf06      	itte	eq
 8000bea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bee:	ea90 0f01 	teqeq	r0, r1
 8000bf2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_ui2f>:
 8000bf8:	f04f 0300 	mov.w	r3, #0
 8000bfc:	e004      	b.n	8000c08 <__aeabi_i2f+0x8>
 8000bfe:	bf00      	nop

08000c00 <__aeabi_i2f>:
 8000c00:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c04:	bf48      	it	mi
 8000c06:	4240      	negmi	r0, r0
 8000c08:	ea5f 0c00 	movs.w	ip, r0
 8000c0c:	bf08      	it	eq
 8000c0e:	4770      	bxeq	lr
 8000c10:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c14:	4601      	mov	r1, r0
 8000c16:	f04f 0000 	mov.w	r0, #0
 8000c1a:	e01c      	b.n	8000c56 <__aeabi_l2f+0x2a>

08000c1c <__aeabi_ul2f>:
 8000c1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c20:	bf08      	it	eq
 8000c22:	4770      	bxeq	lr
 8000c24:	f04f 0300 	mov.w	r3, #0
 8000c28:	e00a      	b.n	8000c40 <__aeabi_l2f+0x14>
 8000c2a:	bf00      	nop

08000c2c <__aeabi_l2f>:
 8000c2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c30:	bf08      	it	eq
 8000c32:	4770      	bxeq	lr
 8000c34:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c38:	d502      	bpl.n	8000c40 <__aeabi_l2f+0x14>
 8000c3a:	4240      	negs	r0, r0
 8000c3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c40:	ea5f 0c01 	movs.w	ip, r1
 8000c44:	bf02      	ittt	eq
 8000c46:	4684      	moveq	ip, r0
 8000c48:	4601      	moveq	r1, r0
 8000c4a:	2000      	moveq	r0, #0
 8000c4c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c50:	bf08      	it	eq
 8000c52:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c56:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c5a:	fabc f28c 	clz	r2, ip
 8000c5e:	3a08      	subs	r2, #8
 8000c60:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c64:	db10      	blt.n	8000c88 <__aeabi_l2f+0x5c>
 8000c66:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c70:	f1c2 0220 	rsb	r2, r2, #32
 8000c74:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c78:	fa20 f202 	lsr.w	r2, r0, r2
 8000c7c:	eb43 0002 	adc.w	r0, r3, r2
 8000c80:	bf08      	it	eq
 8000c82:	f020 0001 	biceq.w	r0, r0, #1
 8000c86:	4770      	bx	lr
 8000c88:	f102 0220 	add.w	r2, r2, #32
 8000c8c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c90:	f1c2 0220 	rsb	r2, r2, #32
 8000c94:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c98:	fa21 f202 	lsr.w	r2, r1, r2
 8000c9c:	eb43 0002 	adc.w	r0, r3, r2
 8000ca0:	bf08      	it	eq
 8000ca2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_fmul>:
 8000ca8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cb0:	bf1e      	ittt	ne
 8000cb2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb6:	ea92 0f0c 	teqne	r2, ip
 8000cba:	ea93 0f0c 	teqne	r3, ip
 8000cbe:	d06f      	beq.n	8000da0 <__aeabi_fmul+0xf8>
 8000cc0:	441a      	add	r2, r3
 8000cc2:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc6:	0240      	lsls	r0, r0, #9
 8000cc8:	bf18      	it	ne
 8000cca:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cce:	d01e      	beq.n	8000d0e <__aeabi_fmul+0x66>
 8000cd0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cdc:	fba0 3101 	umull	r3, r1, r0, r1
 8000ce0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce8:	bf3e      	ittt	cc
 8000cea:	0049      	lslcc	r1, r1, #1
 8000cec:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cf0:	005b      	lslcc	r3, r3, #1
 8000cf2:	ea40 0001 	orr.w	r0, r0, r1
 8000cf6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cfa:	2afd      	cmp	r2, #253	; 0xfd
 8000cfc:	d81d      	bhi.n	8000d3a <__aeabi_fmul+0x92>
 8000cfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d06:	bf08      	it	eq
 8000d08:	f020 0001 	biceq.w	r0, r0, #1
 8000d0c:	4770      	bx	lr
 8000d0e:	f090 0f00 	teq	r0, #0
 8000d12:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d16:	bf08      	it	eq
 8000d18:	0249      	lsleq	r1, r1, #9
 8000d1a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d22:	3a7f      	subs	r2, #127	; 0x7f
 8000d24:	bfc2      	ittt	gt
 8000d26:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d2a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2e:	4770      	bxgt	lr
 8000d30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d34:	f04f 0300 	mov.w	r3, #0
 8000d38:	3a01      	subs	r2, #1
 8000d3a:	dc5d      	bgt.n	8000df8 <__aeabi_fmul+0x150>
 8000d3c:	f112 0f19 	cmn.w	r2, #25
 8000d40:	bfdc      	itt	le
 8000d42:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d46:	4770      	bxle	lr
 8000d48:	f1c2 0200 	rsb	r2, r2, #0
 8000d4c:	0041      	lsls	r1, r0, #1
 8000d4e:	fa21 f102 	lsr.w	r1, r1, r2
 8000d52:	f1c2 0220 	rsb	r2, r2, #32
 8000d56:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d5a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5e:	f140 0000 	adc.w	r0, r0, #0
 8000d62:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d66:	bf08      	it	eq
 8000d68:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d6c:	4770      	bx	lr
 8000d6e:	f092 0f00 	teq	r2, #0
 8000d72:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d76:	bf02      	ittt	eq
 8000d78:	0040      	lsleq	r0, r0, #1
 8000d7a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7e:	3a01      	subeq	r2, #1
 8000d80:	d0f9      	beq.n	8000d76 <__aeabi_fmul+0xce>
 8000d82:	ea40 000c 	orr.w	r0, r0, ip
 8000d86:	f093 0f00 	teq	r3, #0
 8000d8a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8e:	bf02      	ittt	eq
 8000d90:	0049      	lsleq	r1, r1, #1
 8000d92:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d96:	3b01      	subeq	r3, #1
 8000d98:	d0f9      	beq.n	8000d8e <__aeabi_fmul+0xe6>
 8000d9a:	ea41 010c 	orr.w	r1, r1, ip
 8000d9e:	e78f      	b.n	8000cc0 <__aeabi_fmul+0x18>
 8000da0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da4:	ea92 0f0c 	teq	r2, ip
 8000da8:	bf18      	it	ne
 8000daa:	ea93 0f0c 	teqne	r3, ip
 8000dae:	d00a      	beq.n	8000dc6 <__aeabi_fmul+0x11e>
 8000db0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db4:	bf18      	it	ne
 8000db6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000dba:	d1d8      	bne.n	8000d6e <__aeabi_fmul+0xc6>
 8000dbc:	ea80 0001 	eor.w	r0, r0, r1
 8000dc0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc4:	4770      	bx	lr
 8000dc6:	f090 0f00 	teq	r0, #0
 8000dca:	bf17      	itett	ne
 8000dcc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dd0:	4608      	moveq	r0, r1
 8000dd2:	f091 0f00 	teqne	r1, #0
 8000dd6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dda:	d014      	beq.n	8000e06 <__aeabi_fmul+0x15e>
 8000ddc:	ea92 0f0c 	teq	r2, ip
 8000de0:	d101      	bne.n	8000de6 <__aeabi_fmul+0x13e>
 8000de2:	0242      	lsls	r2, r0, #9
 8000de4:	d10f      	bne.n	8000e06 <__aeabi_fmul+0x15e>
 8000de6:	ea93 0f0c 	teq	r3, ip
 8000dea:	d103      	bne.n	8000df4 <__aeabi_fmul+0x14c>
 8000dec:	024b      	lsls	r3, r1, #9
 8000dee:	bf18      	it	ne
 8000df0:	4608      	movne	r0, r1
 8000df2:	d108      	bne.n	8000e06 <__aeabi_fmul+0x15e>
 8000df4:	ea80 0001 	eor.w	r0, r0, r1
 8000df8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dfc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e04:	4770      	bx	lr
 8000e06:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e0a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0e:	4770      	bx	lr

08000e10 <__aeabi_fdiv>:
 8000e10:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e14:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e18:	bf1e      	ittt	ne
 8000e1a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1e:	ea92 0f0c 	teqne	r2, ip
 8000e22:	ea93 0f0c 	teqne	r3, ip
 8000e26:	d069      	beq.n	8000efc <__aeabi_fdiv+0xec>
 8000e28:	eba2 0203 	sub.w	r2, r2, r3
 8000e2c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e30:	0249      	lsls	r1, r1, #9
 8000e32:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e36:	d037      	beq.n	8000ea8 <__aeabi_fdiv+0x98>
 8000e38:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e3c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e40:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e44:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e48:	428b      	cmp	r3, r1
 8000e4a:	bf38      	it	cc
 8000e4c:	005b      	lslcc	r3, r3, #1
 8000e4e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e52:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e56:	428b      	cmp	r3, r1
 8000e58:	bf24      	itt	cs
 8000e5a:	1a5b      	subcs	r3, r3, r1
 8000e5c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e60:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e64:	bf24      	itt	cs
 8000e66:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e6a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e72:	bf24      	itt	cs
 8000e74:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e78:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e7c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e80:	bf24      	itt	cs
 8000e82:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e86:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e8a:	011b      	lsls	r3, r3, #4
 8000e8c:	bf18      	it	ne
 8000e8e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e92:	d1e0      	bne.n	8000e56 <__aeabi_fdiv+0x46>
 8000e94:	2afd      	cmp	r2, #253	; 0xfd
 8000e96:	f63f af50 	bhi.w	8000d3a <__aeabi_fmul+0x92>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ea0:	bf08      	it	eq
 8000ea2:	f020 0001 	biceq.w	r0, r0, #1
 8000ea6:	4770      	bx	lr
 8000ea8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000eac:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eb0:	327f      	adds	r2, #127	; 0x7f
 8000eb2:	bfc2      	ittt	gt
 8000eb4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ebc:	4770      	bxgt	lr
 8000ebe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ec2:	f04f 0300 	mov.w	r3, #0
 8000ec6:	3a01      	subs	r2, #1
 8000ec8:	e737      	b.n	8000d3a <__aeabi_fmul+0x92>
 8000eca:	f092 0f00 	teq	r2, #0
 8000ece:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ed2:	bf02      	ittt	eq
 8000ed4:	0040      	lsleq	r0, r0, #1
 8000ed6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000eda:	3a01      	subeq	r2, #1
 8000edc:	d0f9      	beq.n	8000ed2 <__aeabi_fdiv+0xc2>
 8000ede:	ea40 000c 	orr.w	r0, r0, ip
 8000ee2:	f093 0f00 	teq	r3, #0
 8000ee6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000eea:	bf02      	ittt	eq
 8000eec:	0049      	lsleq	r1, r1, #1
 8000eee:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ef2:	3b01      	subeq	r3, #1
 8000ef4:	d0f9      	beq.n	8000eea <__aeabi_fdiv+0xda>
 8000ef6:	ea41 010c 	orr.w	r1, r1, ip
 8000efa:	e795      	b.n	8000e28 <__aeabi_fdiv+0x18>
 8000efc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f00:	ea92 0f0c 	teq	r2, ip
 8000f04:	d108      	bne.n	8000f18 <__aeabi_fdiv+0x108>
 8000f06:	0242      	lsls	r2, r0, #9
 8000f08:	f47f af7d 	bne.w	8000e06 <__aeabi_fmul+0x15e>
 8000f0c:	ea93 0f0c 	teq	r3, ip
 8000f10:	f47f af70 	bne.w	8000df4 <__aeabi_fmul+0x14c>
 8000f14:	4608      	mov	r0, r1
 8000f16:	e776      	b.n	8000e06 <__aeabi_fmul+0x15e>
 8000f18:	ea93 0f0c 	teq	r3, ip
 8000f1c:	d104      	bne.n	8000f28 <__aeabi_fdiv+0x118>
 8000f1e:	024b      	lsls	r3, r1, #9
 8000f20:	f43f af4c 	beq.w	8000dbc <__aeabi_fmul+0x114>
 8000f24:	4608      	mov	r0, r1
 8000f26:	e76e      	b.n	8000e06 <__aeabi_fmul+0x15e>
 8000f28:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f2c:	bf18      	it	ne
 8000f2e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f32:	d1ca      	bne.n	8000eca <__aeabi_fdiv+0xba>
 8000f34:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f38:	f47f af5c 	bne.w	8000df4 <__aeabi_fmul+0x14c>
 8000f3c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f40:	f47f af3c 	bne.w	8000dbc <__aeabi_fmul+0x114>
 8000f44:	e75f      	b.n	8000e06 <__aeabi_fmul+0x15e>
 8000f46:	bf00      	nop

08000f48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f4e:	4b0e      	ldr	r3, [pc, #56]	; (8000f88 <HAL_MspInit+0x40>)
 8000f50:	699b      	ldr	r3, [r3, #24]
 8000f52:	4a0d      	ldr	r2, [pc, #52]	; (8000f88 <HAL_MspInit+0x40>)
 8000f54:	f043 0301 	orr.w	r3, r3, #1
 8000f58:	6193      	str	r3, [r2, #24]
 8000f5a:	4b0b      	ldr	r3, [pc, #44]	; (8000f88 <HAL_MspInit+0x40>)
 8000f5c:	699b      	ldr	r3, [r3, #24]
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	607b      	str	r3, [r7, #4]
 8000f64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f66:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <HAL_MspInit+0x40>)
 8000f68:	69db      	ldr	r3, [r3, #28]
 8000f6a:	4a07      	ldr	r2, [pc, #28]	; (8000f88 <HAL_MspInit+0x40>)
 8000f6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f70:	61d3      	str	r3, [r2, #28]
 8000f72:	4b05      	ldr	r3, [pc, #20]	; (8000f88 <HAL_MspInit+0x40>)
 8000f74:	69db      	ldr	r3, [r3, #28]
 8000f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f7a:	603b      	str	r3, [r7, #0]
 8000f7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	370c      	adds	r7, #12
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bc80      	pop	{r7}
 8000f86:	4770      	bx	lr
 8000f88:	40021000 	.word	0x40021000

08000f8c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b088      	sub	sp, #32
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f94:	f107 0310 	add.w	r3, r7, #16
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a2c      	ldr	r2, [pc, #176]	; (8001058 <HAL_ADC_MspInit+0xcc>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d151      	bne.n	8001050 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fac:	4b2b      	ldr	r3, [pc, #172]	; (800105c <HAL_ADC_MspInit+0xd0>)
 8000fae:	699b      	ldr	r3, [r3, #24]
 8000fb0:	4a2a      	ldr	r2, [pc, #168]	; (800105c <HAL_ADC_MspInit+0xd0>)
 8000fb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fb6:	6193      	str	r3, [r2, #24]
 8000fb8:	4b28      	ldr	r3, [pc, #160]	; (800105c <HAL_ADC_MspInit+0xd0>)
 8000fba:	699b      	ldr	r3, [r3, #24]
 8000fbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fc0:	60fb      	str	r3, [r7, #12]
 8000fc2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc4:	4b25      	ldr	r3, [pc, #148]	; (800105c <HAL_ADC_MspInit+0xd0>)
 8000fc6:	699b      	ldr	r3, [r3, #24]
 8000fc8:	4a24      	ldr	r2, [pc, #144]	; (800105c <HAL_ADC_MspInit+0xd0>)
 8000fca:	f043 0304 	orr.w	r3, r3, #4
 8000fce:	6193      	str	r3, [r2, #24]
 8000fd0:	4b22      	ldr	r3, [pc, #136]	; (800105c <HAL_ADC_MspInit+0xd0>)
 8000fd2:	699b      	ldr	r3, [r3, #24]
 8000fd4:	f003 0304 	and.w	r3, r3, #4
 8000fd8:	60bb      	str	r3, [r7, #8]
 8000fda:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000fdc:	2307      	movs	r3, #7
 8000fde:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe4:	f107 0310 	add.w	r3, r7, #16
 8000fe8:	4619      	mov	r1, r3
 8000fea:	481d      	ldr	r0, [pc, #116]	; (8001060 <HAL_ADC_MspInit+0xd4>)
 8000fec:	f001 f912 	bl	8002214 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000ff0:	4b1c      	ldr	r3, [pc, #112]	; (8001064 <HAL_ADC_MspInit+0xd8>)
 8000ff2:	4a1d      	ldr	r2, [pc, #116]	; (8001068 <HAL_ADC_MspInit+0xdc>)
 8000ff4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ff6:	4b1b      	ldr	r3, [pc, #108]	; (8001064 <HAL_ADC_MspInit+0xd8>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ffc:	4b19      	ldr	r3, [pc, #100]	; (8001064 <HAL_ADC_MspInit+0xd8>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001002:	4b18      	ldr	r3, [pc, #96]	; (8001064 <HAL_ADC_MspInit+0xd8>)
 8001004:	2280      	movs	r2, #128	; 0x80
 8001006:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001008:	4b16      	ldr	r3, [pc, #88]	; (8001064 <HAL_ADC_MspInit+0xd8>)
 800100a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800100e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001010:	4b14      	ldr	r3, [pc, #80]	; (8001064 <HAL_ADC_MspInit+0xd8>)
 8001012:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001016:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001018:	4b12      	ldr	r3, [pc, #72]	; (8001064 <HAL_ADC_MspInit+0xd8>)
 800101a:	2220      	movs	r2, #32
 800101c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800101e:	4b11      	ldr	r3, [pc, #68]	; (8001064 <HAL_ADC_MspInit+0xd8>)
 8001020:	2200      	movs	r2, #0
 8001022:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001024:	480f      	ldr	r0, [pc, #60]	; (8001064 <HAL_ADC_MspInit+0xd8>)
 8001026:	f000 fe8f 	bl	8001d48 <HAL_DMA_Init>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001030:	f002 ffd0 	bl	8003fd4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	4a0b      	ldr	r2, [pc, #44]	; (8001064 <HAL_ADC_MspInit+0xd8>)
 8001038:	621a      	str	r2, [r3, #32]
 800103a:	4a0a      	ldr	r2, [pc, #40]	; (8001064 <HAL_ADC_MspInit+0xd8>)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 8001040:	2200      	movs	r2, #0
 8001042:	2102      	movs	r1, #2
 8001044:	2012      	movs	r0, #18
 8001046:	f000 fe48 	bl	8001cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800104a:	2012      	movs	r0, #18
 800104c:	f000 fe61 	bl	8001d12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001050:	bf00      	nop
 8001052:	3720      	adds	r7, #32
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	40012400 	.word	0x40012400
 800105c:	40021000 	.word	0x40021000
 8001060:	40010800 	.word	0x40010800
 8001064:	20000148 	.word	0x20000148
 8001068:	40020008 	.word	0x40020008

0800106c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001070:	e7fe      	b.n	8001070 <NMI_Handler+0x4>

08001072 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001072:	b480      	push	{r7}
 8001074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001076:	e7fe      	b.n	8001076 <HardFault_Handler+0x4>

08001078 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800107c:	e7fe      	b.n	800107c <MemManage_Handler+0x4>

0800107e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800107e:	b480      	push	{r7}
 8001080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001082:	e7fe      	b.n	8001082 <BusFault_Handler+0x4>

08001084 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001088:	e7fe      	b.n	8001088 <UsageFault_Handler+0x4>

0800108a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800108a:	b480      	push	{r7}
 800108c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	46bd      	mov	sp, r7
 8001092:	bc80      	pop	{r7}
 8001094:	4770      	bx	lr

08001096 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001096:	b480      	push	{r7}
 8001098:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800109a:	bf00      	nop
 800109c:	46bd      	mov	sp, r7
 800109e:	bc80      	pop	{r7}
 80010a0:	4770      	bx	lr

080010a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010a2:	b480      	push	{r7}
 80010a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010a6:	bf00      	nop
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bc80      	pop	{r7}
 80010ac:	4770      	bx	lr
	...

080010b0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80010b4:	4802      	ldr	r0, [pc, #8]	; (80010c0 <DMA1_Channel1_IRQHandler+0x10>)
 80010b6:	f000 ff79 	bl	8001fac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20000148 	.word	0x20000148

080010c4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80010c8:	4802      	ldr	r0, [pc, #8]	; (80010d4 <ADC1_2_IRQHandler+0x10>)
 80010ca:	f000 fa49 	bl	8001560 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20000118 	.word	0x20000118

080010d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010dc:	bf00      	nop
 80010de:	46bd      	mov	sp, r7
 80010e0:	bc80      	pop	{r7}
 80010e2:	4770      	bx	lr

080010e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010e4:	f7ff fff8 	bl	80010d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010e8:	480b      	ldr	r0, [pc, #44]	; (8001118 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80010ea:	490c      	ldr	r1, [pc, #48]	; (800111c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80010ec:	4a0c      	ldr	r2, [pc, #48]	; (8001120 <LoopFillZerobss+0x16>)
  movs r3, #0
 80010ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010f0:	e002      	b.n	80010f8 <LoopCopyDataInit>

080010f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010f6:	3304      	adds	r3, #4

080010f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010fc:	d3f9      	bcc.n	80010f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010fe:	4a09      	ldr	r2, [pc, #36]	; (8001124 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001100:	4c09      	ldr	r4, [pc, #36]	; (8001128 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001102:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001104:	e001      	b.n	800110a <LoopFillZerobss>

08001106 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001106:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001108:	3204      	adds	r2, #4

0800110a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800110a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800110c:	d3fb      	bcc.n	8001106 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800110e:	f003 f991 	bl	8004434 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001112:	f002 ff64 	bl	8003fde <main>
  bx lr
 8001116:	4770      	bx	lr
  ldr r0, =_sdata
 8001118:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800111c:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8001120:	08005688 	.word	0x08005688
  ldr r2, =_sbss
 8001124:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8001128:	200002b4 	.word	0x200002b4

0800112c <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800112c:	e7fe      	b.n	800112c <CAN1_RX1_IRQHandler>
	...

08001130 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001134:	4b08      	ldr	r3, [pc, #32]	; (8001158 <HAL_Init+0x28>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a07      	ldr	r2, [pc, #28]	; (8001158 <HAL_Init+0x28>)
 800113a:	f043 0310 	orr.w	r3, r3, #16
 800113e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001140:	2003      	movs	r0, #3
 8001142:	f000 fdbf 	bl	8001cc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001146:	200f      	movs	r0, #15
 8001148:	f000 f808 	bl	800115c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800114c:	f7ff fefc 	bl	8000f48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40022000 	.word	0x40022000

0800115c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001164:	4b12      	ldr	r3, [pc, #72]	; (80011b0 <HAL_InitTick+0x54>)
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	4b12      	ldr	r3, [pc, #72]	; (80011b4 <HAL_InitTick+0x58>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	4619      	mov	r1, r3
 800116e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001172:	fbb3 f3f1 	udiv	r3, r3, r1
 8001176:	fbb2 f3f3 	udiv	r3, r2, r3
 800117a:	4618      	mov	r0, r3
 800117c:	f000 fdd7 	bl	8001d2e <HAL_SYSTICK_Config>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e00e      	b.n	80011a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2b0f      	cmp	r3, #15
 800118e:	d80a      	bhi.n	80011a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001190:	2200      	movs	r2, #0
 8001192:	6879      	ldr	r1, [r7, #4]
 8001194:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001198:	f000 fd9f 	bl	8001cda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800119c:	4a06      	ldr	r2, [pc, #24]	; (80011b8 <HAL_InitTick+0x5c>)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011a2:	2300      	movs	r3, #0
 80011a4:	e000      	b.n	80011a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	20000000 	.word	0x20000000
 80011b4:	20000008 	.word	0x20000008
 80011b8:	20000004 	.word	0x20000004

080011bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011c0:	4b05      	ldr	r3, [pc, #20]	; (80011d8 <HAL_IncTick+0x1c>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	461a      	mov	r2, r3
 80011c6:	4b05      	ldr	r3, [pc, #20]	; (80011dc <HAL_IncTick+0x20>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4413      	add	r3, r2
 80011cc:	4a03      	ldr	r2, [pc, #12]	; (80011dc <HAL_IncTick+0x20>)
 80011ce:	6013      	str	r3, [r2, #0]
}
 80011d0:	bf00      	nop
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bc80      	pop	{r7}
 80011d6:	4770      	bx	lr
 80011d8:	20000008 	.word	0x20000008
 80011dc:	20000044 	.word	0x20000044

080011e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  return uwTick;
 80011e4:	4b02      	ldr	r3, [pc, #8]	; (80011f0 <HAL_GetTick+0x10>)
 80011e6:	681b      	ldr	r3, [r3, #0]
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bc80      	pop	{r7}
 80011ee:	4770      	bx	lr
 80011f0:	20000044 	.word	0x20000044

080011f4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011fc:	2300      	movs	r3, #0
 80011fe:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001200:	2300      	movs	r3, #0
 8001202:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001204:	2300      	movs	r3, #0
 8001206:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001208:	2300      	movs	r3, #0
 800120a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d101      	bne.n	8001216 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e0be      	b.n	8001394 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001220:	2b00      	cmp	r3, #0
 8001222:	d109      	bne.n	8001238 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2200      	movs	r2, #0
 8001228:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2200      	movs	r2, #0
 800122e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f7ff feaa 	bl	8000f8c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f000 fbc7 	bl	80019cc <ADC_ConversionStop_Disable>
 800123e:	4603      	mov	r3, r0
 8001240:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001246:	f003 0310 	and.w	r3, r3, #16
 800124a:	2b00      	cmp	r3, #0
 800124c:	f040 8099 	bne.w	8001382 <HAL_ADC_Init+0x18e>
 8001250:	7dfb      	ldrb	r3, [r7, #23]
 8001252:	2b00      	cmp	r3, #0
 8001254:	f040 8095 	bne.w	8001382 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800125c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001260:	f023 0302 	bic.w	r3, r3, #2
 8001264:	f043 0202 	orr.w	r2, r3, #2
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001274:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	7b1b      	ldrb	r3, [r3, #12]
 800127a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800127c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800127e:	68ba      	ldr	r2, [r7, #8]
 8001280:	4313      	orrs	r3, r2
 8001282:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800128c:	d003      	beq.n	8001296 <HAL_ADC_Init+0xa2>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	2b01      	cmp	r3, #1
 8001294:	d102      	bne.n	800129c <HAL_ADC_Init+0xa8>
 8001296:	f44f 7380 	mov.w	r3, #256	; 0x100
 800129a:	e000      	b.n	800129e <HAL_ADC_Init+0xaa>
 800129c:	2300      	movs	r3, #0
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	7d1b      	ldrb	r3, [r3, #20]
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d119      	bne.n	80012e0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	7b1b      	ldrb	r3, [r3, #12]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d109      	bne.n	80012c8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	3b01      	subs	r3, #1
 80012ba:	035a      	lsls	r2, r3, #13
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	4313      	orrs	r3, r2
 80012c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80012c4:	613b      	str	r3, [r7, #16]
 80012c6:	e00b      	b.n	80012e0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012cc:	f043 0220 	orr.w	r2, r3, #32
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012d8:	f043 0201 	orr.w	r2, r3, #1
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	430a      	orrs	r2, r1
 80012f2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	689a      	ldr	r2, [r3, #8]
 80012fa:	4b28      	ldr	r3, [pc, #160]	; (800139c <HAL_ADC_Init+0x1a8>)
 80012fc:	4013      	ands	r3, r2
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	6812      	ldr	r2, [r2, #0]
 8001302:	68b9      	ldr	r1, [r7, #8]
 8001304:	430b      	orrs	r3, r1
 8001306:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001310:	d003      	beq.n	800131a <HAL_ADC_Init+0x126>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	2b01      	cmp	r3, #1
 8001318:	d104      	bne.n	8001324 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	691b      	ldr	r3, [r3, #16]
 800131e:	3b01      	subs	r3, #1
 8001320:	051b      	lsls	r3, r3, #20
 8001322:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800132a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	68fa      	ldr	r2, [r7, #12]
 8001334:	430a      	orrs	r2, r1
 8001336:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	689a      	ldr	r2, [r3, #8]
 800133e:	4b18      	ldr	r3, [pc, #96]	; (80013a0 <HAL_ADC_Init+0x1ac>)
 8001340:	4013      	ands	r3, r2
 8001342:	68ba      	ldr	r2, [r7, #8]
 8001344:	429a      	cmp	r2, r3
 8001346:	d10b      	bne.n	8001360 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2200      	movs	r2, #0
 800134c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001352:	f023 0303 	bic.w	r3, r3, #3
 8001356:	f043 0201 	orr.w	r2, r3, #1
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800135e:	e018      	b.n	8001392 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001364:	f023 0312 	bic.w	r3, r3, #18
 8001368:	f043 0210 	orr.w	r2, r3, #16
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001374:	f043 0201 	orr.w	r2, r3, #1
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800137c:	2301      	movs	r3, #1
 800137e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001380:	e007      	b.n	8001392 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001386:	f043 0210 	orr.w	r2, r3, #16
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001392:	7dfb      	ldrb	r3, [r7, #23]
}
 8001394:	4618      	mov	r0, r3
 8001396:	3718      	adds	r7, #24
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	ffe1f7fd 	.word	0xffe1f7fd
 80013a0:	ff1f0efe 	.word	0xff1f0efe

080013a4 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	60b9      	str	r1, [r7, #8]
 80013ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013b0:	2300      	movs	r3, #0
 80013b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a64      	ldr	r2, [pc, #400]	; (800154c <HAL_ADC_Start_DMA+0x1a8>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d004      	beq.n	80013c8 <HAL_ADC_Start_DMA+0x24>
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a63      	ldr	r2, [pc, #396]	; (8001550 <HAL_ADC_Start_DMA+0x1ac>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d106      	bne.n	80013d6 <HAL_ADC_Start_DMA+0x32>
 80013c8:	4b60      	ldr	r3, [pc, #384]	; (800154c <HAL_ADC_Start_DMA+0x1a8>)
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	f040 80b3 	bne.w	800153c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d101      	bne.n	80013e4 <HAL_ADC_Start_DMA+0x40>
 80013e0:	2302      	movs	r3, #2
 80013e2:	e0ae      	b.n	8001542 <HAL_ADC_Start_DMA+0x19e>
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	2201      	movs	r2, #1
 80013e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80013ec:	68f8      	ldr	r0, [r7, #12]
 80013ee:	f000 fa93 	bl	8001918 <ADC_Enable>
 80013f2:	4603      	mov	r3, r0
 80013f4:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80013f6:	7dfb      	ldrb	r3, [r7, #23]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	f040 809a 	bne.w	8001532 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001402:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001406:	f023 0301 	bic.w	r3, r3, #1
 800140a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a4e      	ldr	r2, [pc, #312]	; (8001550 <HAL_ADC_Start_DMA+0x1ac>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d105      	bne.n	8001428 <HAL_ADC_Start_DMA+0x84>
 800141c:	4b4b      	ldr	r3, [pc, #300]	; (800154c <HAL_ADC_Start_DMA+0x1a8>)
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001424:	2b00      	cmp	r3, #0
 8001426:	d115      	bne.n	8001454 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800142c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800143e:	2b00      	cmp	r3, #0
 8001440:	d026      	beq.n	8001490 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001446:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800144a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001452:	e01d      	b.n	8001490 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001458:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a39      	ldr	r2, [pc, #228]	; (800154c <HAL_ADC_Start_DMA+0x1a8>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d004      	beq.n	8001474 <HAL_ADC_Start_DMA+0xd0>
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a38      	ldr	r2, [pc, #224]	; (8001550 <HAL_ADC_Start_DMA+0x1ac>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d10d      	bne.n	8001490 <HAL_ADC_Start_DMA+0xec>
 8001474:	4b35      	ldr	r3, [pc, #212]	; (800154c <HAL_ADC_Start_DMA+0x1a8>)
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800147c:	2b00      	cmp	r3, #0
 800147e:	d007      	beq.n	8001490 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001484:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001488:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001494:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001498:	2b00      	cmp	r3, #0
 800149a:	d006      	beq.n	80014aa <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a0:	f023 0206 	bic.w	r2, r3, #6
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	62da      	str	r2, [r3, #44]	; 0x2c
 80014a8:	e002      	b.n	80014b0 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	2200      	movs	r2, #0
 80014ae:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	2200      	movs	r2, #0
 80014b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	6a1b      	ldr	r3, [r3, #32]
 80014bc:	4a25      	ldr	r2, [pc, #148]	; (8001554 <HAL_ADC_Start_DMA+0x1b0>)
 80014be:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	6a1b      	ldr	r3, [r3, #32]
 80014c4:	4a24      	ldr	r2, [pc, #144]	; (8001558 <HAL_ADC_Start_DMA+0x1b4>)
 80014c6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	6a1b      	ldr	r3, [r3, #32]
 80014cc:	4a23      	ldr	r2, [pc, #140]	; (800155c <HAL_ADC_Start_DMA+0x1b8>)
 80014ce:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f06f 0202 	mvn.w	r2, #2
 80014d8:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	689a      	ldr	r2, [r3, #8]
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80014e8:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	6a18      	ldr	r0, [r3, #32]
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	334c      	adds	r3, #76	; 0x4c
 80014f4:	4619      	mov	r1, r3
 80014f6:	68ba      	ldr	r2, [r7, #8]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f000 fc7f 	bl	8001dfc <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001508:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800150c:	d108      	bne.n	8001520 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	689a      	ldr	r2, [r3, #8]
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800151c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800151e:	e00f      	b.n	8001540 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	689a      	ldr	r2, [r3, #8]
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800152e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001530:	e006      	b.n	8001540 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	2200      	movs	r2, #0
 8001536:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800153a:	e001      	b.n	8001540 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001540:	7dfb      	ldrb	r3, [r7, #23]
}
 8001542:	4618      	mov	r0, r3
 8001544:	3718      	adds	r7, #24
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	40012400 	.word	0x40012400
 8001550:	40012800 	.word	0x40012800
 8001554:	08001a4f 	.word	0x08001a4f
 8001558:	08001acb 	.word	0x08001acb
 800155c:	08001ae7 	.word	0x08001ae7

08001560 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	f003 0320 	and.w	r3, r3, #32
 800157e:	2b00      	cmp	r3, #0
 8001580:	d03e      	beq.n	8001600 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	f003 0302 	and.w	r3, r3, #2
 8001588:	2b00      	cmp	r3, #0
 800158a:	d039      	beq.n	8001600 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001590:	f003 0310 	and.w	r3, r3, #16
 8001594:	2b00      	cmp	r3, #0
 8001596:	d105      	bne.n	80015a4 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800159c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80015ae:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80015b2:	d11d      	bne.n	80015f0 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d119      	bne.n	80015f0 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	685a      	ldr	r2, [r3, #4]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f022 0220 	bic.w	r2, r2, #32
 80015ca:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d105      	bne.n	80015f0 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e8:	f043 0201 	orr.w	r2, r3, #1
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f000 f874 	bl	80016de <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f06f 0212 	mvn.w	r2, #18
 80015fe:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001606:	2b00      	cmp	r3, #0
 8001608:	d04d      	beq.n	80016a6 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	f003 0304 	and.w	r3, r3, #4
 8001610:	2b00      	cmp	r3, #0
 8001612:	d048      	beq.n	80016a6 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001618:	f003 0310 	and.w	r3, r3, #16
 800161c:	2b00      	cmp	r3, #0
 800161e:	d105      	bne.n	800162c <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001624:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8001636:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 800163a:	d012      	beq.n	8001662 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001646:	2b00      	cmp	r3, #0
 8001648:	d125      	bne.n	8001696 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001654:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001658:	d11d      	bne.n	8001696 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800165e:	2b00      	cmp	r3, #0
 8001660:	d119      	bne.n	8001696 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	685a      	ldr	r2, [r3, #4]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001670:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001676:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001686:	2b00      	cmp	r3, #0
 8001688:	d105      	bne.n	8001696 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800168e:	f043 0201 	orr.w	r2, r3, #1
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f000 fa3f 	bl	8001b1a <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f06f 020c 	mvn.w	r2, #12
 80016a4:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d012      	beq.n	80016d6 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d00d      	beq.n	80016d6 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016be:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f000 f81b 	bl	8001702 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f06f 0201 	mvn.w	r2, #1
 80016d4:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80016d6:	bf00      	nop
 80016d8:	3710      	adds	r7, #16
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80016de:	b480      	push	{r7}
 80016e0:	b083      	sub	sp, #12
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80016e6:	bf00      	nop
 80016e8:	370c      	adds	r7, #12
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bc80      	pop	{r7}
 80016ee:	4770      	bx	lr

080016f0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80016f8:	bf00      	nop
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bc80      	pop	{r7}
 8001700:	4770      	bx	lr

08001702 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001702:	b480      	push	{r7}
 8001704:	b083      	sub	sp, #12
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800170a:	bf00      	nop
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	bc80      	pop	{r7}
 8001712:	4770      	bx	lr

08001714 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800171c:	bf00      	nop
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	bc80      	pop	{r7}
 8001724:	4770      	bx	lr
	...

08001728 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001728:	b480      	push	{r7}
 800172a:	b085      	sub	sp, #20
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001732:	2300      	movs	r3, #0
 8001734:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001736:	2300      	movs	r3, #0
 8001738:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001740:	2b01      	cmp	r3, #1
 8001742:	d101      	bne.n	8001748 <HAL_ADC_ConfigChannel+0x20>
 8001744:	2302      	movs	r3, #2
 8001746:	e0dc      	b.n	8001902 <HAL_ADC_ConfigChannel+0x1da>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2201      	movs	r2, #1
 800174c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	2b06      	cmp	r3, #6
 8001756:	d81c      	bhi.n	8001792 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685a      	ldr	r2, [r3, #4]
 8001762:	4613      	mov	r3, r2
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	4413      	add	r3, r2
 8001768:	3b05      	subs	r3, #5
 800176a:	221f      	movs	r2, #31
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	43db      	mvns	r3, r3
 8001772:	4019      	ands	r1, r3
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	6818      	ldr	r0, [r3, #0]
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685a      	ldr	r2, [r3, #4]
 800177c:	4613      	mov	r3, r2
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	4413      	add	r3, r2
 8001782:	3b05      	subs	r3, #5
 8001784:	fa00 f203 	lsl.w	r2, r0, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	430a      	orrs	r2, r1
 800178e:	635a      	str	r2, [r3, #52]	; 0x34
 8001790:	e03c      	b.n	800180c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	2b0c      	cmp	r3, #12
 8001798:	d81c      	bhi.n	80017d4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685a      	ldr	r2, [r3, #4]
 80017a4:	4613      	mov	r3, r2
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	4413      	add	r3, r2
 80017aa:	3b23      	subs	r3, #35	; 0x23
 80017ac:	221f      	movs	r2, #31
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	43db      	mvns	r3, r3
 80017b4:	4019      	ands	r1, r3
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	6818      	ldr	r0, [r3, #0]
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685a      	ldr	r2, [r3, #4]
 80017be:	4613      	mov	r3, r2
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	4413      	add	r3, r2
 80017c4:	3b23      	subs	r3, #35	; 0x23
 80017c6:	fa00 f203 	lsl.w	r2, r0, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	430a      	orrs	r2, r1
 80017d0:	631a      	str	r2, [r3, #48]	; 0x30
 80017d2:	e01b      	b.n	800180c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685a      	ldr	r2, [r3, #4]
 80017de:	4613      	mov	r3, r2
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	4413      	add	r3, r2
 80017e4:	3b41      	subs	r3, #65	; 0x41
 80017e6:	221f      	movs	r2, #31
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	43db      	mvns	r3, r3
 80017ee:	4019      	ands	r1, r3
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	6818      	ldr	r0, [r3, #0]
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685a      	ldr	r2, [r3, #4]
 80017f8:	4613      	mov	r3, r2
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	4413      	add	r3, r2
 80017fe:	3b41      	subs	r3, #65	; 0x41
 8001800:	fa00 f203 	lsl.w	r2, r0, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	430a      	orrs	r2, r1
 800180a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2b09      	cmp	r3, #9
 8001812:	d91c      	bls.n	800184e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	68d9      	ldr	r1, [r3, #12]
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	4613      	mov	r3, r2
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	4413      	add	r3, r2
 8001824:	3b1e      	subs	r3, #30
 8001826:	2207      	movs	r2, #7
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	43db      	mvns	r3, r3
 800182e:	4019      	ands	r1, r3
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	6898      	ldr	r0, [r3, #8]
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	4613      	mov	r3, r2
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	4413      	add	r3, r2
 800183e:	3b1e      	subs	r3, #30
 8001840:	fa00 f203 	lsl.w	r2, r0, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	430a      	orrs	r2, r1
 800184a:	60da      	str	r2, [r3, #12]
 800184c:	e019      	b.n	8001882 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	6919      	ldr	r1, [r3, #16]
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	4613      	mov	r3, r2
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	4413      	add	r3, r2
 800185e:	2207      	movs	r2, #7
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	43db      	mvns	r3, r3
 8001866:	4019      	ands	r1, r3
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	6898      	ldr	r0, [r3, #8]
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	4613      	mov	r3, r2
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	4413      	add	r3, r2
 8001876:	fa00 f203 	lsl.w	r2, r0, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	430a      	orrs	r2, r1
 8001880:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2b10      	cmp	r3, #16
 8001888:	d003      	beq.n	8001892 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800188e:	2b11      	cmp	r3, #17
 8001890:	d132      	bne.n	80018f8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a1d      	ldr	r2, [pc, #116]	; (800190c <HAL_ADC_ConfigChannel+0x1e4>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d125      	bne.n	80018e8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d126      	bne.n	80018f8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	689a      	ldr	r2, [r3, #8]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80018b8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2b10      	cmp	r3, #16
 80018c0:	d11a      	bne.n	80018f8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80018c2:	4b13      	ldr	r3, [pc, #76]	; (8001910 <HAL_ADC_ConfigChannel+0x1e8>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a13      	ldr	r2, [pc, #76]	; (8001914 <HAL_ADC_ConfigChannel+0x1ec>)
 80018c8:	fba2 2303 	umull	r2, r3, r2, r3
 80018cc:	0c9a      	lsrs	r2, r3, #18
 80018ce:	4613      	mov	r3, r2
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	4413      	add	r3, r2
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018d8:	e002      	b.n	80018e0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	3b01      	subs	r3, #1
 80018de:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d1f9      	bne.n	80018da <HAL_ADC_ConfigChannel+0x1b2>
 80018e6:	e007      	b.n	80018f8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ec:	f043 0220 	orr.w	r2, r3, #32
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2200      	movs	r2, #0
 80018fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001900:	7bfb      	ldrb	r3, [r7, #15]
}
 8001902:	4618      	mov	r0, r3
 8001904:	3714      	adds	r7, #20
 8001906:	46bd      	mov	sp, r7
 8001908:	bc80      	pop	{r7}
 800190a:	4770      	bx	lr
 800190c:	40012400 	.word	0x40012400
 8001910:	20000000 	.word	0x20000000
 8001914:	431bde83 	.word	0x431bde83

08001918 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001920:	2300      	movs	r3, #0
 8001922:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001924:	2300      	movs	r3, #0
 8001926:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	2b01      	cmp	r3, #1
 8001934:	d040      	beq.n	80019b8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	689a      	ldr	r2, [r3, #8]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f042 0201 	orr.w	r2, r2, #1
 8001944:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001946:	4b1f      	ldr	r3, [pc, #124]	; (80019c4 <ADC_Enable+0xac>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a1f      	ldr	r2, [pc, #124]	; (80019c8 <ADC_Enable+0xb0>)
 800194c:	fba2 2303 	umull	r2, r3, r2, r3
 8001950:	0c9b      	lsrs	r3, r3, #18
 8001952:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001954:	e002      	b.n	800195c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	3b01      	subs	r3, #1
 800195a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d1f9      	bne.n	8001956 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001962:	f7ff fc3d 	bl	80011e0 <HAL_GetTick>
 8001966:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001968:	e01f      	b.n	80019aa <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800196a:	f7ff fc39 	bl	80011e0 <HAL_GetTick>
 800196e:	4602      	mov	r2, r0
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	2b02      	cmp	r3, #2
 8001976:	d918      	bls.n	80019aa <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	2b01      	cmp	r3, #1
 8001984:	d011      	beq.n	80019aa <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800198a:	f043 0210 	orr.w	r2, r3, #16
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001996:	f043 0201 	orr.w	r2, r3, #1
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2200      	movs	r2, #0
 80019a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e007      	b.n	80019ba <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f003 0301 	and.w	r3, r3, #1
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d1d8      	bne.n	800196a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80019b8:	2300      	movs	r3, #0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3710      	adds	r7, #16
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	20000000 	.word	0x20000000
 80019c8:	431bde83 	.word	0x431bde83

080019cc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019d4:	2300      	movs	r3, #0
 80019d6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d12e      	bne.n	8001a44 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	689a      	ldr	r2, [r3, #8]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f022 0201 	bic.w	r2, r2, #1
 80019f4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80019f6:	f7ff fbf3 	bl	80011e0 <HAL_GetTick>
 80019fa:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80019fc:	e01b      	b.n	8001a36 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80019fe:	f7ff fbef 	bl	80011e0 <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d914      	bls.n	8001a36 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d10d      	bne.n	8001a36 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a1e:	f043 0210 	orr.w	r2, r3, #16
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a2a:	f043 0201 	orr.w	r2, r3, #1
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e007      	b.n	8001a46 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f003 0301 	and.w	r3, r3, #1
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d0dc      	beq.n	80019fe <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3710      	adds	r7, #16
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	b084      	sub	sp, #16
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a5a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a60:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d127      	bne.n	8001ab8 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a6c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001a7e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001a82:	d115      	bne.n	8001ab0 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d111      	bne.n	8001ab0 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a90:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d105      	bne.n	8001ab0 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa8:	f043 0201 	orr.w	r2, r3, #1
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001ab0:	68f8      	ldr	r0, [r7, #12]
 8001ab2:	f7ff fe14 	bl	80016de <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001ab6:	e004      	b.n	8001ac2 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	6a1b      	ldr	r3, [r3, #32]
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	4798      	blx	r3
}
 8001ac2:	bf00      	nop
 8001ac4:	3710      	adds	r7, #16
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b084      	sub	sp, #16
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001ad8:	68f8      	ldr	r0, [r7, #12]
 8001ada:	f7ff fe09 	bl	80016f0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ade:	bf00      	nop
 8001ae0:	3710      	adds	r7, #16
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b084      	sub	sp, #16
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b04:	f043 0204 	orr.w	r2, r3, #4
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001b0c:	68f8      	ldr	r0, [r7, #12]
 8001b0e:	f7ff fe01 	bl	8001714 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001b12:	bf00      	nop
 8001b14:	3710      	adds	r7, #16
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	b083      	sub	sp, #12
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001b22:	bf00      	nop
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bc80      	pop	{r7}
 8001b2a:	4770      	bx	lr

08001b2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f003 0307 	and.w	r3, r3, #7
 8001b3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b3c:	4b0c      	ldr	r3, [pc, #48]	; (8001b70 <__NVIC_SetPriorityGrouping+0x44>)
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b42:	68ba      	ldr	r2, [r7, #8]
 8001b44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b48:	4013      	ands	r3, r2
 8001b4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b5e:	4a04      	ldr	r2, [pc, #16]	; (8001b70 <__NVIC_SetPriorityGrouping+0x44>)
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	60d3      	str	r3, [r2, #12]
}
 8001b64:	bf00      	nop
 8001b66:	3714      	adds	r7, #20
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bc80      	pop	{r7}
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	e000ed00 	.word	0xe000ed00

08001b74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b78:	4b04      	ldr	r3, [pc, #16]	; (8001b8c <__NVIC_GetPriorityGrouping+0x18>)
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	0a1b      	lsrs	r3, r3, #8
 8001b7e:	f003 0307 	and.w	r3, r3, #7
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bc80      	pop	{r7}
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	e000ed00 	.word	0xe000ed00

08001b90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	4603      	mov	r3, r0
 8001b98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	db0b      	blt.n	8001bba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ba2:	79fb      	ldrb	r3, [r7, #7]
 8001ba4:	f003 021f 	and.w	r2, r3, #31
 8001ba8:	4906      	ldr	r1, [pc, #24]	; (8001bc4 <__NVIC_EnableIRQ+0x34>)
 8001baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bae:	095b      	lsrs	r3, r3, #5
 8001bb0:	2001      	movs	r0, #1
 8001bb2:	fa00 f202 	lsl.w	r2, r0, r2
 8001bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bba:	bf00      	nop
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bc80      	pop	{r7}
 8001bc2:	4770      	bx	lr
 8001bc4:	e000e100 	.word	0xe000e100

08001bc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	4603      	mov	r3, r0
 8001bd0:	6039      	str	r1, [r7, #0]
 8001bd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	db0a      	blt.n	8001bf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	b2da      	uxtb	r2, r3
 8001be0:	490c      	ldr	r1, [pc, #48]	; (8001c14 <__NVIC_SetPriority+0x4c>)
 8001be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be6:	0112      	lsls	r2, r2, #4
 8001be8:	b2d2      	uxtb	r2, r2
 8001bea:	440b      	add	r3, r1
 8001bec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bf0:	e00a      	b.n	8001c08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	b2da      	uxtb	r2, r3
 8001bf6:	4908      	ldr	r1, [pc, #32]	; (8001c18 <__NVIC_SetPriority+0x50>)
 8001bf8:	79fb      	ldrb	r3, [r7, #7]
 8001bfa:	f003 030f 	and.w	r3, r3, #15
 8001bfe:	3b04      	subs	r3, #4
 8001c00:	0112      	lsls	r2, r2, #4
 8001c02:	b2d2      	uxtb	r2, r2
 8001c04:	440b      	add	r3, r1
 8001c06:	761a      	strb	r2, [r3, #24]
}
 8001c08:	bf00      	nop
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bc80      	pop	{r7}
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	e000e100 	.word	0xe000e100
 8001c18:	e000ed00 	.word	0xe000ed00

08001c1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b089      	sub	sp, #36	; 0x24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	f1c3 0307 	rsb	r3, r3, #7
 8001c36:	2b04      	cmp	r3, #4
 8001c38:	bf28      	it	cs
 8001c3a:	2304      	movcs	r3, #4
 8001c3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	3304      	adds	r3, #4
 8001c42:	2b06      	cmp	r3, #6
 8001c44:	d902      	bls.n	8001c4c <NVIC_EncodePriority+0x30>
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	3b03      	subs	r3, #3
 8001c4a:	e000      	b.n	8001c4e <NVIC_EncodePriority+0x32>
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	43da      	mvns	r2, r3
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	401a      	ands	r2, r3
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6e:	43d9      	mvns	r1, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c74:	4313      	orrs	r3, r2
         );
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3724      	adds	r7, #36	; 0x24
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bc80      	pop	{r7}
 8001c7e:	4770      	bx	lr

08001c80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c90:	d301      	bcc.n	8001c96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c92:	2301      	movs	r3, #1
 8001c94:	e00f      	b.n	8001cb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c96:	4a0a      	ldr	r2, [pc, #40]	; (8001cc0 <SysTick_Config+0x40>)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c9e:	210f      	movs	r1, #15
 8001ca0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ca4:	f7ff ff90 	bl	8001bc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ca8:	4b05      	ldr	r3, [pc, #20]	; (8001cc0 <SysTick_Config+0x40>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cae:	4b04      	ldr	r3, [pc, #16]	; (8001cc0 <SysTick_Config+0x40>)
 8001cb0:	2207      	movs	r2, #7
 8001cb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	e000e010 	.word	0xe000e010

08001cc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f7ff ff2d 	bl	8001b2c <__NVIC_SetPriorityGrouping>
}
 8001cd2:	bf00      	nop
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b086      	sub	sp, #24
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	60b9      	str	r1, [r7, #8]
 8001ce4:	607a      	str	r2, [r7, #4]
 8001ce6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cec:	f7ff ff42 	bl	8001b74 <__NVIC_GetPriorityGrouping>
 8001cf0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	68b9      	ldr	r1, [r7, #8]
 8001cf6:	6978      	ldr	r0, [r7, #20]
 8001cf8:	f7ff ff90 	bl	8001c1c <NVIC_EncodePriority>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d02:	4611      	mov	r1, r2
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7ff ff5f 	bl	8001bc8 <__NVIC_SetPriority>
}
 8001d0a:	bf00      	nop
 8001d0c:	3718      	adds	r7, #24
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b082      	sub	sp, #8
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	4603      	mov	r3, r0
 8001d1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff ff35 	bl	8001b90 <__NVIC_EnableIRQ>
}
 8001d26:	bf00      	nop
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b082      	sub	sp, #8
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f7ff ffa2 	bl	8001c80 <SysTick_Config>
 8001d3c:	4603      	mov	r3, r0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
	...

08001d48 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b085      	sub	sp, #20
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d50:	2300      	movs	r3, #0
 8001d52:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d101      	bne.n	8001d5e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e043      	b.n	8001de6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	461a      	mov	r2, r3
 8001d64:	4b22      	ldr	r3, [pc, #136]	; (8001df0 <HAL_DMA_Init+0xa8>)
 8001d66:	4413      	add	r3, r2
 8001d68:	4a22      	ldr	r2, [pc, #136]	; (8001df4 <HAL_DMA_Init+0xac>)
 8001d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d6e:	091b      	lsrs	r3, r3, #4
 8001d70:	009a      	lsls	r2, r3, #2
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a1f      	ldr	r2, [pc, #124]	; (8001df8 <HAL_DMA_Init+0xb0>)
 8001d7a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2202      	movs	r2, #2
 8001d80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001d92:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001d96:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001da0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	695b      	ldr	r3, [r3, #20]
 8001db2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001db8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	69db      	ldr	r3, [r3, #28]
 8001dbe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001dc0:	68fa      	ldr	r2, [r7, #12]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	68fa      	ldr	r2, [r7, #12]
 8001dcc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3714      	adds	r7, #20
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bc80      	pop	{r7}
 8001dee:	4770      	bx	lr
 8001df0:	bffdfff8 	.word	0xbffdfff8
 8001df4:	cccccccd 	.word	0xcccccccd
 8001df8:	40020000 	.word	0x40020000

08001dfc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b086      	sub	sp, #24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	607a      	str	r2, [r7, #4]
 8001e08:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d101      	bne.n	8001e1c <HAL_DMA_Start_IT+0x20>
 8001e18:	2302      	movs	r3, #2
 8001e1a:	e04b      	b.n	8001eb4 <HAL_DMA_Start_IT+0xb8>
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d13a      	bne.n	8001ea6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2202      	movs	r2, #2
 8001e34:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f022 0201 	bic.w	r2, r2, #1
 8001e4c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	68b9      	ldr	r1, [r7, #8]
 8001e54:	68f8      	ldr	r0, [r7, #12]
 8001e56:	f000 f9af 	bl	80021b8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d008      	beq.n	8001e74 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f042 020e 	orr.w	r2, r2, #14
 8001e70:	601a      	str	r2, [r3, #0]
 8001e72:	e00f      	b.n	8001e94 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f022 0204 	bic.w	r2, r2, #4
 8001e82:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f042 020a 	orr.w	r2, r2, #10
 8001e92:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f042 0201 	orr.w	r2, r2, #1
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	e005      	b.n	8001eb2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001eae:	2302      	movs	r3, #2
 8001eb0:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001eb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3718      	adds	r7, #24
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d005      	beq.n	8001ee0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2204      	movs	r2, #4
 8001ed8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	73fb      	strb	r3, [r7, #15]
 8001ede:	e051      	b.n	8001f84 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f022 020e 	bic.w	r2, r2, #14
 8001eee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f022 0201 	bic.w	r2, r2, #1
 8001efe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a22      	ldr	r2, [pc, #136]	; (8001f90 <HAL_DMA_Abort_IT+0xd4>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d029      	beq.n	8001f5e <HAL_DMA_Abort_IT+0xa2>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a21      	ldr	r2, [pc, #132]	; (8001f94 <HAL_DMA_Abort_IT+0xd8>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d022      	beq.n	8001f5a <HAL_DMA_Abort_IT+0x9e>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a1f      	ldr	r2, [pc, #124]	; (8001f98 <HAL_DMA_Abort_IT+0xdc>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d01a      	beq.n	8001f54 <HAL_DMA_Abort_IT+0x98>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a1e      	ldr	r2, [pc, #120]	; (8001f9c <HAL_DMA_Abort_IT+0xe0>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d012      	beq.n	8001f4e <HAL_DMA_Abort_IT+0x92>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a1c      	ldr	r2, [pc, #112]	; (8001fa0 <HAL_DMA_Abort_IT+0xe4>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d00a      	beq.n	8001f48 <HAL_DMA_Abort_IT+0x8c>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a1b      	ldr	r2, [pc, #108]	; (8001fa4 <HAL_DMA_Abort_IT+0xe8>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d102      	bne.n	8001f42 <HAL_DMA_Abort_IT+0x86>
 8001f3c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001f40:	e00e      	b.n	8001f60 <HAL_DMA_Abort_IT+0xa4>
 8001f42:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f46:	e00b      	b.n	8001f60 <HAL_DMA_Abort_IT+0xa4>
 8001f48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f4c:	e008      	b.n	8001f60 <HAL_DMA_Abort_IT+0xa4>
 8001f4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f52:	e005      	b.n	8001f60 <HAL_DMA_Abort_IT+0xa4>
 8001f54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f58:	e002      	b.n	8001f60 <HAL_DMA_Abort_IT+0xa4>
 8001f5a:	2310      	movs	r3, #16
 8001f5c:	e000      	b.n	8001f60 <HAL_DMA_Abort_IT+0xa4>
 8001f5e:	2301      	movs	r3, #1
 8001f60:	4a11      	ldr	r2, [pc, #68]	; (8001fa8 <HAL_DMA_Abort_IT+0xec>)
 8001f62:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2201      	movs	r2, #1
 8001f68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d003      	beq.n	8001f84 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	4798      	blx	r3
    } 
  }
  return status;
 8001f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3710      	adds	r7, #16
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	40020008 	.word	0x40020008
 8001f94:	4002001c 	.word	0x4002001c
 8001f98:	40020030 	.word	0x40020030
 8001f9c:	40020044 	.word	0x40020044
 8001fa0:	40020058 	.word	0x40020058
 8001fa4:	4002006c 	.word	0x4002006c
 8001fa8:	40020000 	.word	0x40020000

08001fac <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc8:	2204      	movs	r2, #4
 8001fca:	409a      	lsls	r2, r3
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d04f      	beq.n	8002074 <HAL_DMA_IRQHandler+0xc8>
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	f003 0304 	and.w	r3, r3, #4
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d04a      	beq.n	8002074 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0320 	and.w	r3, r3, #32
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d107      	bne.n	8001ffc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f022 0204 	bic.w	r2, r2, #4
 8001ffa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a66      	ldr	r2, [pc, #408]	; (800219c <HAL_DMA_IRQHandler+0x1f0>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d029      	beq.n	800205a <HAL_DMA_IRQHandler+0xae>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a65      	ldr	r2, [pc, #404]	; (80021a0 <HAL_DMA_IRQHandler+0x1f4>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d022      	beq.n	8002056 <HAL_DMA_IRQHandler+0xaa>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a63      	ldr	r2, [pc, #396]	; (80021a4 <HAL_DMA_IRQHandler+0x1f8>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d01a      	beq.n	8002050 <HAL_DMA_IRQHandler+0xa4>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a62      	ldr	r2, [pc, #392]	; (80021a8 <HAL_DMA_IRQHandler+0x1fc>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d012      	beq.n	800204a <HAL_DMA_IRQHandler+0x9e>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a60      	ldr	r2, [pc, #384]	; (80021ac <HAL_DMA_IRQHandler+0x200>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d00a      	beq.n	8002044 <HAL_DMA_IRQHandler+0x98>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a5f      	ldr	r2, [pc, #380]	; (80021b0 <HAL_DMA_IRQHandler+0x204>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d102      	bne.n	800203e <HAL_DMA_IRQHandler+0x92>
 8002038:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800203c:	e00e      	b.n	800205c <HAL_DMA_IRQHandler+0xb0>
 800203e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002042:	e00b      	b.n	800205c <HAL_DMA_IRQHandler+0xb0>
 8002044:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002048:	e008      	b.n	800205c <HAL_DMA_IRQHandler+0xb0>
 800204a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800204e:	e005      	b.n	800205c <HAL_DMA_IRQHandler+0xb0>
 8002050:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002054:	e002      	b.n	800205c <HAL_DMA_IRQHandler+0xb0>
 8002056:	2340      	movs	r3, #64	; 0x40
 8002058:	e000      	b.n	800205c <HAL_DMA_IRQHandler+0xb0>
 800205a:	2304      	movs	r3, #4
 800205c:	4a55      	ldr	r2, [pc, #340]	; (80021b4 <HAL_DMA_IRQHandler+0x208>)
 800205e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002064:	2b00      	cmp	r3, #0
 8002066:	f000 8094 	beq.w	8002192 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002072:	e08e      	b.n	8002192 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002078:	2202      	movs	r2, #2
 800207a:	409a      	lsls	r2, r3
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	4013      	ands	r3, r2
 8002080:	2b00      	cmp	r3, #0
 8002082:	d056      	beq.n	8002132 <HAL_DMA_IRQHandler+0x186>
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	f003 0302 	and.w	r3, r3, #2
 800208a:	2b00      	cmp	r3, #0
 800208c:	d051      	beq.n	8002132 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0320 	and.w	r3, r3, #32
 8002098:	2b00      	cmp	r3, #0
 800209a:	d10b      	bne.n	80020b4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f022 020a 	bic.w	r2, r2, #10
 80020aa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2201      	movs	r2, #1
 80020b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a38      	ldr	r2, [pc, #224]	; (800219c <HAL_DMA_IRQHandler+0x1f0>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d029      	beq.n	8002112 <HAL_DMA_IRQHandler+0x166>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a37      	ldr	r2, [pc, #220]	; (80021a0 <HAL_DMA_IRQHandler+0x1f4>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d022      	beq.n	800210e <HAL_DMA_IRQHandler+0x162>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a35      	ldr	r2, [pc, #212]	; (80021a4 <HAL_DMA_IRQHandler+0x1f8>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d01a      	beq.n	8002108 <HAL_DMA_IRQHandler+0x15c>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a34      	ldr	r2, [pc, #208]	; (80021a8 <HAL_DMA_IRQHandler+0x1fc>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d012      	beq.n	8002102 <HAL_DMA_IRQHandler+0x156>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a32      	ldr	r2, [pc, #200]	; (80021ac <HAL_DMA_IRQHandler+0x200>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d00a      	beq.n	80020fc <HAL_DMA_IRQHandler+0x150>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a31      	ldr	r2, [pc, #196]	; (80021b0 <HAL_DMA_IRQHandler+0x204>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d102      	bne.n	80020f6 <HAL_DMA_IRQHandler+0x14a>
 80020f0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80020f4:	e00e      	b.n	8002114 <HAL_DMA_IRQHandler+0x168>
 80020f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020fa:	e00b      	b.n	8002114 <HAL_DMA_IRQHandler+0x168>
 80020fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002100:	e008      	b.n	8002114 <HAL_DMA_IRQHandler+0x168>
 8002102:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002106:	e005      	b.n	8002114 <HAL_DMA_IRQHandler+0x168>
 8002108:	f44f 7300 	mov.w	r3, #512	; 0x200
 800210c:	e002      	b.n	8002114 <HAL_DMA_IRQHandler+0x168>
 800210e:	2320      	movs	r3, #32
 8002110:	e000      	b.n	8002114 <HAL_DMA_IRQHandler+0x168>
 8002112:	2302      	movs	r3, #2
 8002114:	4a27      	ldr	r2, [pc, #156]	; (80021b4 <HAL_DMA_IRQHandler+0x208>)
 8002116:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002124:	2b00      	cmp	r3, #0
 8002126:	d034      	beq.n	8002192 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002130:	e02f      	b.n	8002192 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002136:	2208      	movs	r2, #8
 8002138:	409a      	lsls	r2, r3
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	4013      	ands	r3, r2
 800213e:	2b00      	cmp	r3, #0
 8002140:	d028      	beq.n	8002194 <HAL_DMA_IRQHandler+0x1e8>
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	f003 0308 	and.w	r3, r3, #8
 8002148:	2b00      	cmp	r3, #0
 800214a:	d023      	beq.n	8002194 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f022 020e 	bic.w	r2, r2, #14
 800215a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002164:	2101      	movs	r1, #1
 8002166:	fa01 f202 	lsl.w	r2, r1, r2
 800216a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2201      	movs	r2, #1
 8002170:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2201      	movs	r2, #1
 8002176:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	2b00      	cmp	r3, #0
 8002188:	d004      	beq.n	8002194 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	4798      	blx	r3
    }
  }
  return;
 8002192:	bf00      	nop
 8002194:	bf00      	nop
}
 8002196:	3710      	adds	r7, #16
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	40020008 	.word	0x40020008
 80021a0:	4002001c 	.word	0x4002001c
 80021a4:	40020030 	.word	0x40020030
 80021a8:	40020044 	.word	0x40020044
 80021ac:	40020058 	.word	0x40020058
 80021b0:	4002006c 	.word	0x4002006c
 80021b4:	40020000 	.word	0x40020000

080021b8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	607a      	str	r2, [r7, #4]
 80021c4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ce:	2101      	movs	r1, #1
 80021d0:	fa01 f202 	lsl.w	r2, r1, r2
 80021d4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	683a      	ldr	r2, [r7, #0]
 80021dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	2b10      	cmp	r3, #16
 80021e4:	d108      	bne.n	80021f8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	68ba      	ldr	r2, [r7, #8]
 80021f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80021f6:	e007      	b.n	8002208 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	68ba      	ldr	r2, [r7, #8]
 80021fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	60da      	str	r2, [r3, #12]
}
 8002208:	bf00      	nop
 800220a:	3714      	adds	r7, #20
 800220c:	46bd      	mov	sp, r7
 800220e:	bc80      	pop	{r7}
 8002210:	4770      	bx	lr
	...

08002214 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002214:	b480      	push	{r7}
 8002216:	b08b      	sub	sp, #44	; 0x2c
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800221e:	2300      	movs	r3, #0
 8002220:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002222:	2300      	movs	r3, #0
 8002224:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002226:	e169      	b.n	80024fc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002228:	2201      	movs	r2, #1
 800222a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	69fa      	ldr	r2, [r7, #28]
 8002238:	4013      	ands	r3, r2
 800223a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	429a      	cmp	r2, r3
 8002242:	f040 8158 	bne.w	80024f6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	4a9a      	ldr	r2, [pc, #616]	; (80024b4 <HAL_GPIO_Init+0x2a0>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d05e      	beq.n	800230e <HAL_GPIO_Init+0xfa>
 8002250:	4a98      	ldr	r2, [pc, #608]	; (80024b4 <HAL_GPIO_Init+0x2a0>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d875      	bhi.n	8002342 <HAL_GPIO_Init+0x12e>
 8002256:	4a98      	ldr	r2, [pc, #608]	; (80024b8 <HAL_GPIO_Init+0x2a4>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d058      	beq.n	800230e <HAL_GPIO_Init+0xfa>
 800225c:	4a96      	ldr	r2, [pc, #600]	; (80024b8 <HAL_GPIO_Init+0x2a4>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d86f      	bhi.n	8002342 <HAL_GPIO_Init+0x12e>
 8002262:	4a96      	ldr	r2, [pc, #600]	; (80024bc <HAL_GPIO_Init+0x2a8>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d052      	beq.n	800230e <HAL_GPIO_Init+0xfa>
 8002268:	4a94      	ldr	r2, [pc, #592]	; (80024bc <HAL_GPIO_Init+0x2a8>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d869      	bhi.n	8002342 <HAL_GPIO_Init+0x12e>
 800226e:	4a94      	ldr	r2, [pc, #592]	; (80024c0 <HAL_GPIO_Init+0x2ac>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d04c      	beq.n	800230e <HAL_GPIO_Init+0xfa>
 8002274:	4a92      	ldr	r2, [pc, #584]	; (80024c0 <HAL_GPIO_Init+0x2ac>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d863      	bhi.n	8002342 <HAL_GPIO_Init+0x12e>
 800227a:	4a92      	ldr	r2, [pc, #584]	; (80024c4 <HAL_GPIO_Init+0x2b0>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d046      	beq.n	800230e <HAL_GPIO_Init+0xfa>
 8002280:	4a90      	ldr	r2, [pc, #576]	; (80024c4 <HAL_GPIO_Init+0x2b0>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d85d      	bhi.n	8002342 <HAL_GPIO_Init+0x12e>
 8002286:	2b12      	cmp	r3, #18
 8002288:	d82a      	bhi.n	80022e0 <HAL_GPIO_Init+0xcc>
 800228a:	2b12      	cmp	r3, #18
 800228c:	d859      	bhi.n	8002342 <HAL_GPIO_Init+0x12e>
 800228e:	a201      	add	r2, pc, #4	; (adr r2, 8002294 <HAL_GPIO_Init+0x80>)
 8002290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002294:	0800230f 	.word	0x0800230f
 8002298:	080022e9 	.word	0x080022e9
 800229c:	080022fb 	.word	0x080022fb
 80022a0:	0800233d 	.word	0x0800233d
 80022a4:	08002343 	.word	0x08002343
 80022a8:	08002343 	.word	0x08002343
 80022ac:	08002343 	.word	0x08002343
 80022b0:	08002343 	.word	0x08002343
 80022b4:	08002343 	.word	0x08002343
 80022b8:	08002343 	.word	0x08002343
 80022bc:	08002343 	.word	0x08002343
 80022c0:	08002343 	.word	0x08002343
 80022c4:	08002343 	.word	0x08002343
 80022c8:	08002343 	.word	0x08002343
 80022cc:	08002343 	.word	0x08002343
 80022d0:	08002343 	.word	0x08002343
 80022d4:	08002343 	.word	0x08002343
 80022d8:	080022f1 	.word	0x080022f1
 80022dc:	08002305 	.word	0x08002305
 80022e0:	4a79      	ldr	r2, [pc, #484]	; (80024c8 <HAL_GPIO_Init+0x2b4>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d013      	beq.n	800230e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80022e6:	e02c      	b.n	8002342 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	623b      	str	r3, [r7, #32]
          break;
 80022ee:	e029      	b.n	8002344 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	3304      	adds	r3, #4
 80022f6:	623b      	str	r3, [r7, #32]
          break;
 80022f8:	e024      	b.n	8002344 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	3308      	adds	r3, #8
 8002300:	623b      	str	r3, [r7, #32]
          break;
 8002302:	e01f      	b.n	8002344 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	330c      	adds	r3, #12
 800230a:	623b      	str	r3, [r7, #32]
          break;
 800230c:	e01a      	b.n	8002344 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d102      	bne.n	800231c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002316:	2304      	movs	r3, #4
 8002318:	623b      	str	r3, [r7, #32]
          break;
 800231a:	e013      	b.n	8002344 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	2b01      	cmp	r3, #1
 8002322:	d105      	bne.n	8002330 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002324:	2308      	movs	r3, #8
 8002326:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	69fa      	ldr	r2, [r7, #28]
 800232c:	611a      	str	r2, [r3, #16]
          break;
 800232e:	e009      	b.n	8002344 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002330:	2308      	movs	r3, #8
 8002332:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	69fa      	ldr	r2, [r7, #28]
 8002338:	615a      	str	r2, [r3, #20]
          break;
 800233a:	e003      	b.n	8002344 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800233c:	2300      	movs	r3, #0
 800233e:	623b      	str	r3, [r7, #32]
          break;
 8002340:	e000      	b.n	8002344 <HAL_GPIO_Init+0x130>
          break;
 8002342:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	2bff      	cmp	r3, #255	; 0xff
 8002348:	d801      	bhi.n	800234e <HAL_GPIO_Init+0x13a>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	e001      	b.n	8002352 <HAL_GPIO_Init+0x13e>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	3304      	adds	r3, #4
 8002352:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	2bff      	cmp	r3, #255	; 0xff
 8002358:	d802      	bhi.n	8002360 <HAL_GPIO_Init+0x14c>
 800235a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	e002      	b.n	8002366 <HAL_GPIO_Init+0x152>
 8002360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002362:	3b08      	subs	r3, #8
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	210f      	movs	r1, #15
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	fa01 f303 	lsl.w	r3, r1, r3
 8002374:	43db      	mvns	r3, r3
 8002376:	401a      	ands	r2, r3
 8002378:	6a39      	ldr	r1, [r7, #32]
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	fa01 f303 	lsl.w	r3, r1, r3
 8002380:	431a      	orrs	r2, r3
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800238e:	2b00      	cmp	r3, #0
 8002390:	f000 80b1 	beq.w	80024f6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002394:	4b4d      	ldr	r3, [pc, #308]	; (80024cc <HAL_GPIO_Init+0x2b8>)
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	4a4c      	ldr	r2, [pc, #304]	; (80024cc <HAL_GPIO_Init+0x2b8>)
 800239a:	f043 0301 	orr.w	r3, r3, #1
 800239e:	6193      	str	r3, [r2, #24]
 80023a0:	4b4a      	ldr	r3, [pc, #296]	; (80024cc <HAL_GPIO_Init+0x2b8>)
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	f003 0301 	and.w	r3, r3, #1
 80023a8:	60bb      	str	r3, [r7, #8]
 80023aa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80023ac:	4a48      	ldr	r2, [pc, #288]	; (80024d0 <HAL_GPIO_Init+0x2bc>)
 80023ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b0:	089b      	lsrs	r3, r3, #2
 80023b2:	3302      	adds	r3, #2
 80023b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023b8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80023ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023bc:	f003 0303 	and.w	r3, r3, #3
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	220f      	movs	r2, #15
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	43db      	mvns	r3, r3
 80023ca:	68fa      	ldr	r2, [r7, #12]
 80023cc:	4013      	ands	r3, r2
 80023ce:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4a40      	ldr	r2, [pc, #256]	; (80024d4 <HAL_GPIO_Init+0x2c0>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d013      	beq.n	8002400 <HAL_GPIO_Init+0x1ec>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4a3f      	ldr	r2, [pc, #252]	; (80024d8 <HAL_GPIO_Init+0x2c4>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d00d      	beq.n	80023fc <HAL_GPIO_Init+0x1e8>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4a3e      	ldr	r2, [pc, #248]	; (80024dc <HAL_GPIO_Init+0x2c8>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d007      	beq.n	80023f8 <HAL_GPIO_Init+0x1e4>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	4a3d      	ldr	r2, [pc, #244]	; (80024e0 <HAL_GPIO_Init+0x2cc>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d101      	bne.n	80023f4 <HAL_GPIO_Init+0x1e0>
 80023f0:	2303      	movs	r3, #3
 80023f2:	e006      	b.n	8002402 <HAL_GPIO_Init+0x1ee>
 80023f4:	2304      	movs	r3, #4
 80023f6:	e004      	b.n	8002402 <HAL_GPIO_Init+0x1ee>
 80023f8:	2302      	movs	r3, #2
 80023fa:	e002      	b.n	8002402 <HAL_GPIO_Init+0x1ee>
 80023fc:	2301      	movs	r3, #1
 80023fe:	e000      	b.n	8002402 <HAL_GPIO_Init+0x1ee>
 8002400:	2300      	movs	r3, #0
 8002402:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002404:	f002 0203 	and.w	r2, r2, #3
 8002408:	0092      	lsls	r2, r2, #2
 800240a:	4093      	lsls	r3, r2
 800240c:	68fa      	ldr	r2, [r7, #12]
 800240e:	4313      	orrs	r3, r2
 8002410:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002412:	492f      	ldr	r1, [pc, #188]	; (80024d0 <HAL_GPIO_Init+0x2bc>)
 8002414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002416:	089b      	lsrs	r3, r3, #2
 8002418:	3302      	adds	r3, #2
 800241a:	68fa      	ldr	r2, [r7, #12]
 800241c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d006      	beq.n	800243a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800242c:	4b2d      	ldr	r3, [pc, #180]	; (80024e4 <HAL_GPIO_Init+0x2d0>)
 800242e:	689a      	ldr	r2, [r3, #8]
 8002430:	492c      	ldr	r1, [pc, #176]	; (80024e4 <HAL_GPIO_Init+0x2d0>)
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	4313      	orrs	r3, r2
 8002436:	608b      	str	r3, [r1, #8]
 8002438:	e006      	b.n	8002448 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800243a:	4b2a      	ldr	r3, [pc, #168]	; (80024e4 <HAL_GPIO_Init+0x2d0>)
 800243c:	689a      	ldr	r2, [r3, #8]
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	43db      	mvns	r3, r3
 8002442:	4928      	ldr	r1, [pc, #160]	; (80024e4 <HAL_GPIO_Init+0x2d0>)
 8002444:	4013      	ands	r3, r2
 8002446:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d006      	beq.n	8002462 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002454:	4b23      	ldr	r3, [pc, #140]	; (80024e4 <HAL_GPIO_Init+0x2d0>)
 8002456:	68da      	ldr	r2, [r3, #12]
 8002458:	4922      	ldr	r1, [pc, #136]	; (80024e4 <HAL_GPIO_Init+0x2d0>)
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	4313      	orrs	r3, r2
 800245e:	60cb      	str	r3, [r1, #12]
 8002460:	e006      	b.n	8002470 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002462:	4b20      	ldr	r3, [pc, #128]	; (80024e4 <HAL_GPIO_Init+0x2d0>)
 8002464:	68da      	ldr	r2, [r3, #12]
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	43db      	mvns	r3, r3
 800246a:	491e      	ldr	r1, [pc, #120]	; (80024e4 <HAL_GPIO_Init+0x2d0>)
 800246c:	4013      	ands	r3, r2
 800246e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d006      	beq.n	800248a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800247c:	4b19      	ldr	r3, [pc, #100]	; (80024e4 <HAL_GPIO_Init+0x2d0>)
 800247e:	685a      	ldr	r2, [r3, #4]
 8002480:	4918      	ldr	r1, [pc, #96]	; (80024e4 <HAL_GPIO_Init+0x2d0>)
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	4313      	orrs	r3, r2
 8002486:	604b      	str	r3, [r1, #4]
 8002488:	e006      	b.n	8002498 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800248a:	4b16      	ldr	r3, [pc, #88]	; (80024e4 <HAL_GPIO_Init+0x2d0>)
 800248c:	685a      	ldr	r2, [r3, #4]
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	43db      	mvns	r3, r3
 8002492:	4914      	ldr	r1, [pc, #80]	; (80024e4 <HAL_GPIO_Init+0x2d0>)
 8002494:	4013      	ands	r3, r2
 8002496:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d021      	beq.n	80024e8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80024a4:	4b0f      	ldr	r3, [pc, #60]	; (80024e4 <HAL_GPIO_Init+0x2d0>)
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	490e      	ldr	r1, [pc, #56]	; (80024e4 <HAL_GPIO_Init+0x2d0>)
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	600b      	str	r3, [r1, #0]
 80024b0:	e021      	b.n	80024f6 <HAL_GPIO_Init+0x2e2>
 80024b2:	bf00      	nop
 80024b4:	10320000 	.word	0x10320000
 80024b8:	10310000 	.word	0x10310000
 80024bc:	10220000 	.word	0x10220000
 80024c0:	10210000 	.word	0x10210000
 80024c4:	10120000 	.word	0x10120000
 80024c8:	10110000 	.word	0x10110000
 80024cc:	40021000 	.word	0x40021000
 80024d0:	40010000 	.word	0x40010000
 80024d4:	40010800 	.word	0x40010800
 80024d8:	40010c00 	.word	0x40010c00
 80024dc:	40011000 	.word	0x40011000
 80024e0:	40011400 	.word	0x40011400
 80024e4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80024e8:	4b0b      	ldr	r3, [pc, #44]	; (8002518 <HAL_GPIO_Init+0x304>)
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	43db      	mvns	r3, r3
 80024f0:	4909      	ldr	r1, [pc, #36]	; (8002518 <HAL_GPIO_Init+0x304>)
 80024f2:	4013      	ands	r3, r2
 80024f4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80024f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f8:	3301      	adds	r3, #1
 80024fa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002502:	fa22 f303 	lsr.w	r3, r2, r3
 8002506:	2b00      	cmp	r3, #0
 8002508:	f47f ae8e 	bne.w	8002228 <HAL_GPIO_Init+0x14>
  }
}
 800250c:	bf00      	nop
 800250e:	bf00      	nop
 8002510:	372c      	adds	r7, #44	; 0x2c
 8002512:	46bd      	mov	sp, r7
 8002514:	bc80      	pop	{r7}
 8002516:	4770      	bx	lr
 8002518:	40010400 	.word	0x40010400

0800251c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b086      	sub	sp, #24
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d101      	bne.n	800252e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e272      	b.n	8002a14 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	2b00      	cmp	r3, #0
 8002538:	f000 8087 	beq.w	800264a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800253c:	4b92      	ldr	r3, [pc, #584]	; (8002788 <HAL_RCC_OscConfig+0x26c>)
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f003 030c 	and.w	r3, r3, #12
 8002544:	2b04      	cmp	r3, #4
 8002546:	d00c      	beq.n	8002562 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002548:	4b8f      	ldr	r3, [pc, #572]	; (8002788 <HAL_RCC_OscConfig+0x26c>)
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f003 030c 	and.w	r3, r3, #12
 8002550:	2b08      	cmp	r3, #8
 8002552:	d112      	bne.n	800257a <HAL_RCC_OscConfig+0x5e>
 8002554:	4b8c      	ldr	r3, [pc, #560]	; (8002788 <HAL_RCC_OscConfig+0x26c>)
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800255c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002560:	d10b      	bne.n	800257a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002562:	4b89      	ldr	r3, [pc, #548]	; (8002788 <HAL_RCC_OscConfig+0x26c>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d06c      	beq.n	8002648 <HAL_RCC_OscConfig+0x12c>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d168      	bne.n	8002648 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e24c      	b.n	8002a14 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002582:	d106      	bne.n	8002592 <HAL_RCC_OscConfig+0x76>
 8002584:	4b80      	ldr	r3, [pc, #512]	; (8002788 <HAL_RCC_OscConfig+0x26c>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a7f      	ldr	r2, [pc, #508]	; (8002788 <HAL_RCC_OscConfig+0x26c>)
 800258a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800258e:	6013      	str	r3, [r2, #0]
 8002590:	e02e      	b.n	80025f0 <HAL_RCC_OscConfig+0xd4>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d10c      	bne.n	80025b4 <HAL_RCC_OscConfig+0x98>
 800259a:	4b7b      	ldr	r3, [pc, #492]	; (8002788 <HAL_RCC_OscConfig+0x26c>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a7a      	ldr	r2, [pc, #488]	; (8002788 <HAL_RCC_OscConfig+0x26c>)
 80025a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025a4:	6013      	str	r3, [r2, #0]
 80025a6:	4b78      	ldr	r3, [pc, #480]	; (8002788 <HAL_RCC_OscConfig+0x26c>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a77      	ldr	r2, [pc, #476]	; (8002788 <HAL_RCC_OscConfig+0x26c>)
 80025ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025b0:	6013      	str	r3, [r2, #0]
 80025b2:	e01d      	b.n	80025f0 <HAL_RCC_OscConfig+0xd4>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025bc:	d10c      	bne.n	80025d8 <HAL_RCC_OscConfig+0xbc>
 80025be:	4b72      	ldr	r3, [pc, #456]	; (8002788 <HAL_RCC_OscConfig+0x26c>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a71      	ldr	r2, [pc, #452]	; (8002788 <HAL_RCC_OscConfig+0x26c>)
 80025c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025c8:	6013      	str	r3, [r2, #0]
 80025ca:	4b6f      	ldr	r3, [pc, #444]	; (8002788 <HAL_RCC_OscConfig+0x26c>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a6e      	ldr	r2, [pc, #440]	; (8002788 <HAL_RCC_OscConfig+0x26c>)
 80025d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025d4:	6013      	str	r3, [r2, #0]
 80025d6:	e00b      	b.n	80025f0 <HAL_RCC_OscConfig+0xd4>
 80025d8:	4b6b      	ldr	r3, [pc, #428]	; (8002788 <HAL_RCC_OscConfig+0x26c>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a6a      	ldr	r2, [pc, #424]	; (8002788 <HAL_RCC_OscConfig+0x26c>)
 80025de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025e2:	6013      	str	r3, [r2, #0]
 80025e4:	4b68      	ldr	r3, [pc, #416]	; (8002788 <HAL_RCC_OscConfig+0x26c>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a67      	ldr	r2, [pc, #412]	; (8002788 <HAL_RCC_OscConfig+0x26c>)
 80025ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025ee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d013      	beq.n	8002620 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f8:	f7fe fdf2 	bl	80011e0 <HAL_GetTick>
 80025fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025fe:	e008      	b.n	8002612 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002600:	f7fe fdee 	bl	80011e0 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b64      	cmp	r3, #100	; 0x64
 800260c:	d901      	bls.n	8002612 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e200      	b.n	8002a14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002612:	4b5d      	ldr	r3, [pc, #372]	; (8002788 <HAL_RCC_OscConfig+0x26c>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d0f0      	beq.n	8002600 <HAL_RCC_OscConfig+0xe4>
 800261e:	e014      	b.n	800264a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002620:	f7fe fdde 	bl	80011e0 <HAL_GetTick>
 8002624:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002626:	e008      	b.n	800263a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002628:	f7fe fdda 	bl	80011e0 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b64      	cmp	r3, #100	; 0x64
 8002634:	d901      	bls.n	800263a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e1ec      	b.n	8002a14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800263a:	4b53      	ldr	r3, [pc, #332]	; (8002788 <HAL_RCC_OscConfig+0x26c>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d1f0      	bne.n	8002628 <HAL_RCC_OscConfig+0x10c>
 8002646:	e000      	b.n	800264a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002648:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0302 	and.w	r3, r3, #2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d063      	beq.n	800271e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002656:	4b4c      	ldr	r3, [pc, #304]	; (8002788 <HAL_RCC_OscConfig+0x26c>)
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f003 030c 	and.w	r3, r3, #12
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00b      	beq.n	800267a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002662:	4b49      	ldr	r3, [pc, #292]	; (8002788 <HAL_RCC_OscConfig+0x26c>)
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f003 030c 	and.w	r3, r3, #12
 800266a:	2b08      	cmp	r3, #8
 800266c:	d11c      	bne.n	80026a8 <HAL_RCC_OscConfig+0x18c>
 800266e:	4b46      	ldr	r3, [pc, #280]	; (8002788 <HAL_RCC_OscConfig+0x26c>)
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d116      	bne.n	80026a8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800267a:	4b43      	ldr	r3, [pc, #268]	; (8002788 <HAL_RCC_OscConfig+0x26c>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d005      	beq.n	8002692 <HAL_RCC_OscConfig+0x176>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d001      	beq.n	8002692 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e1c0      	b.n	8002a14 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002692:	4b3d      	ldr	r3, [pc, #244]	; (8002788 <HAL_RCC_OscConfig+0x26c>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	695b      	ldr	r3, [r3, #20]
 800269e:	00db      	lsls	r3, r3, #3
 80026a0:	4939      	ldr	r1, [pc, #228]	; (8002788 <HAL_RCC_OscConfig+0x26c>)
 80026a2:	4313      	orrs	r3, r2
 80026a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026a6:	e03a      	b.n	800271e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	691b      	ldr	r3, [r3, #16]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d020      	beq.n	80026f2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026b0:	4b36      	ldr	r3, [pc, #216]	; (800278c <HAL_RCC_OscConfig+0x270>)
 80026b2:	2201      	movs	r2, #1
 80026b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b6:	f7fe fd93 	bl	80011e0 <HAL_GetTick>
 80026ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026bc:	e008      	b.n	80026d0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026be:	f7fe fd8f 	bl	80011e0 <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d901      	bls.n	80026d0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e1a1      	b.n	8002a14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026d0:	4b2d      	ldr	r3, [pc, #180]	; (8002788 <HAL_RCC_OscConfig+0x26c>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0302 	and.w	r3, r3, #2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d0f0      	beq.n	80026be <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026dc:	4b2a      	ldr	r3, [pc, #168]	; (8002788 <HAL_RCC_OscConfig+0x26c>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	695b      	ldr	r3, [r3, #20]
 80026e8:	00db      	lsls	r3, r3, #3
 80026ea:	4927      	ldr	r1, [pc, #156]	; (8002788 <HAL_RCC_OscConfig+0x26c>)
 80026ec:	4313      	orrs	r3, r2
 80026ee:	600b      	str	r3, [r1, #0]
 80026f0:	e015      	b.n	800271e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026f2:	4b26      	ldr	r3, [pc, #152]	; (800278c <HAL_RCC_OscConfig+0x270>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f8:	f7fe fd72 	bl	80011e0 <HAL_GetTick>
 80026fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026fe:	e008      	b.n	8002712 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002700:	f7fe fd6e 	bl	80011e0 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b02      	cmp	r3, #2
 800270c:	d901      	bls.n	8002712 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e180      	b.n	8002a14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002712:	4b1d      	ldr	r3, [pc, #116]	; (8002788 <HAL_RCC_OscConfig+0x26c>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	2b00      	cmp	r3, #0
 800271c:	d1f0      	bne.n	8002700 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0308 	and.w	r3, r3, #8
 8002726:	2b00      	cmp	r3, #0
 8002728:	d03a      	beq.n	80027a0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	699b      	ldr	r3, [r3, #24]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d019      	beq.n	8002766 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002732:	4b17      	ldr	r3, [pc, #92]	; (8002790 <HAL_RCC_OscConfig+0x274>)
 8002734:	2201      	movs	r2, #1
 8002736:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002738:	f7fe fd52 	bl	80011e0 <HAL_GetTick>
 800273c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800273e:	e008      	b.n	8002752 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002740:	f7fe fd4e 	bl	80011e0 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b02      	cmp	r3, #2
 800274c:	d901      	bls.n	8002752 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e160      	b.n	8002a14 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002752:	4b0d      	ldr	r3, [pc, #52]	; (8002788 <HAL_RCC_OscConfig+0x26c>)
 8002754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	2b00      	cmp	r3, #0
 800275c:	d0f0      	beq.n	8002740 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800275e:	2001      	movs	r0, #1
 8002760:	f000 face 	bl	8002d00 <RCC_Delay>
 8002764:	e01c      	b.n	80027a0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002766:	4b0a      	ldr	r3, [pc, #40]	; (8002790 <HAL_RCC_OscConfig+0x274>)
 8002768:	2200      	movs	r2, #0
 800276a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800276c:	f7fe fd38 	bl	80011e0 <HAL_GetTick>
 8002770:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002772:	e00f      	b.n	8002794 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002774:	f7fe fd34 	bl	80011e0 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b02      	cmp	r3, #2
 8002780:	d908      	bls.n	8002794 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e146      	b.n	8002a14 <HAL_RCC_OscConfig+0x4f8>
 8002786:	bf00      	nop
 8002788:	40021000 	.word	0x40021000
 800278c:	42420000 	.word	0x42420000
 8002790:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002794:	4b92      	ldr	r3, [pc, #584]	; (80029e0 <HAL_RCC_OscConfig+0x4c4>)
 8002796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002798:	f003 0302 	and.w	r3, r3, #2
 800279c:	2b00      	cmp	r3, #0
 800279e:	d1e9      	bne.n	8002774 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0304 	and.w	r3, r3, #4
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	f000 80a6 	beq.w	80028fa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027ae:	2300      	movs	r3, #0
 80027b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027b2:	4b8b      	ldr	r3, [pc, #556]	; (80029e0 <HAL_RCC_OscConfig+0x4c4>)
 80027b4:	69db      	ldr	r3, [r3, #28]
 80027b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d10d      	bne.n	80027da <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027be:	4b88      	ldr	r3, [pc, #544]	; (80029e0 <HAL_RCC_OscConfig+0x4c4>)
 80027c0:	69db      	ldr	r3, [r3, #28]
 80027c2:	4a87      	ldr	r2, [pc, #540]	; (80029e0 <HAL_RCC_OscConfig+0x4c4>)
 80027c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027c8:	61d3      	str	r3, [r2, #28]
 80027ca:	4b85      	ldr	r3, [pc, #532]	; (80029e0 <HAL_RCC_OscConfig+0x4c4>)
 80027cc:	69db      	ldr	r3, [r3, #28]
 80027ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027d2:	60bb      	str	r3, [r7, #8]
 80027d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027d6:	2301      	movs	r3, #1
 80027d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027da:	4b82      	ldr	r3, [pc, #520]	; (80029e4 <HAL_RCC_OscConfig+0x4c8>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d118      	bne.n	8002818 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027e6:	4b7f      	ldr	r3, [pc, #508]	; (80029e4 <HAL_RCC_OscConfig+0x4c8>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a7e      	ldr	r2, [pc, #504]	; (80029e4 <HAL_RCC_OscConfig+0x4c8>)
 80027ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027f2:	f7fe fcf5 	bl	80011e0 <HAL_GetTick>
 80027f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027f8:	e008      	b.n	800280c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027fa:	f7fe fcf1 	bl	80011e0 <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	2b64      	cmp	r3, #100	; 0x64
 8002806:	d901      	bls.n	800280c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e103      	b.n	8002a14 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800280c:	4b75      	ldr	r3, [pc, #468]	; (80029e4 <HAL_RCC_OscConfig+0x4c8>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002814:	2b00      	cmp	r3, #0
 8002816:	d0f0      	beq.n	80027fa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	2b01      	cmp	r3, #1
 800281e:	d106      	bne.n	800282e <HAL_RCC_OscConfig+0x312>
 8002820:	4b6f      	ldr	r3, [pc, #444]	; (80029e0 <HAL_RCC_OscConfig+0x4c4>)
 8002822:	6a1b      	ldr	r3, [r3, #32]
 8002824:	4a6e      	ldr	r2, [pc, #440]	; (80029e0 <HAL_RCC_OscConfig+0x4c4>)
 8002826:	f043 0301 	orr.w	r3, r3, #1
 800282a:	6213      	str	r3, [r2, #32]
 800282c:	e02d      	b.n	800288a <HAL_RCC_OscConfig+0x36e>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d10c      	bne.n	8002850 <HAL_RCC_OscConfig+0x334>
 8002836:	4b6a      	ldr	r3, [pc, #424]	; (80029e0 <HAL_RCC_OscConfig+0x4c4>)
 8002838:	6a1b      	ldr	r3, [r3, #32]
 800283a:	4a69      	ldr	r2, [pc, #420]	; (80029e0 <HAL_RCC_OscConfig+0x4c4>)
 800283c:	f023 0301 	bic.w	r3, r3, #1
 8002840:	6213      	str	r3, [r2, #32]
 8002842:	4b67      	ldr	r3, [pc, #412]	; (80029e0 <HAL_RCC_OscConfig+0x4c4>)
 8002844:	6a1b      	ldr	r3, [r3, #32]
 8002846:	4a66      	ldr	r2, [pc, #408]	; (80029e0 <HAL_RCC_OscConfig+0x4c4>)
 8002848:	f023 0304 	bic.w	r3, r3, #4
 800284c:	6213      	str	r3, [r2, #32]
 800284e:	e01c      	b.n	800288a <HAL_RCC_OscConfig+0x36e>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	2b05      	cmp	r3, #5
 8002856:	d10c      	bne.n	8002872 <HAL_RCC_OscConfig+0x356>
 8002858:	4b61      	ldr	r3, [pc, #388]	; (80029e0 <HAL_RCC_OscConfig+0x4c4>)
 800285a:	6a1b      	ldr	r3, [r3, #32]
 800285c:	4a60      	ldr	r2, [pc, #384]	; (80029e0 <HAL_RCC_OscConfig+0x4c4>)
 800285e:	f043 0304 	orr.w	r3, r3, #4
 8002862:	6213      	str	r3, [r2, #32]
 8002864:	4b5e      	ldr	r3, [pc, #376]	; (80029e0 <HAL_RCC_OscConfig+0x4c4>)
 8002866:	6a1b      	ldr	r3, [r3, #32]
 8002868:	4a5d      	ldr	r2, [pc, #372]	; (80029e0 <HAL_RCC_OscConfig+0x4c4>)
 800286a:	f043 0301 	orr.w	r3, r3, #1
 800286e:	6213      	str	r3, [r2, #32]
 8002870:	e00b      	b.n	800288a <HAL_RCC_OscConfig+0x36e>
 8002872:	4b5b      	ldr	r3, [pc, #364]	; (80029e0 <HAL_RCC_OscConfig+0x4c4>)
 8002874:	6a1b      	ldr	r3, [r3, #32]
 8002876:	4a5a      	ldr	r2, [pc, #360]	; (80029e0 <HAL_RCC_OscConfig+0x4c4>)
 8002878:	f023 0301 	bic.w	r3, r3, #1
 800287c:	6213      	str	r3, [r2, #32]
 800287e:	4b58      	ldr	r3, [pc, #352]	; (80029e0 <HAL_RCC_OscConfig+0x4c4>)
 8002880:	6a1b      	ldr	r3, [r3, #32]
 8002882:	4a57      	ldr	r2, [pc, #348]	; (80029e0 <HAL_RCC_OscConfig+0x4c4>)
 8002884:	f023 0304 	bic.w	r3, r3, #4
 8002888:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d015      	beq.n	80028be <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002892:	f7fe fca5 	bl	80011e0 <HAL_GetTick>
 8002896:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002898:	e00a      	b.n	80028b0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800289a:	f7fe fca1 	bl	80011e0 <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d901      	bls.n	80028b0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e0b1      	b.n	8002a14 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028b0:	4b4b      	ldr	r3, [pc, #300]	; (80029e0 <HAL_RCC_OscConfig+0x4c4>)
 80028b2:	6a1b      	ldr	r3, [r3, #32]
 80028b4:	f003 0302 	and.w	r3, r3, #2
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d0ee      	beq.n	800289a <HAL_RCC_OscConfig+0x37e>
 80028bc:	e014      	b.n	80028e8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028be:	f7fe fc8f 	bl	80011e0 <HAL_GetTick>
 80028c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028c4:	e00a      	b.n	80028dc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028c6:	f7fe fc8b 	bl	80011e0 <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d901      	bls.n	80028dc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80028d8:	2303      	movs	r3, #3
 80028da:	e09b      	b.n	8002a14 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028dc:	4b40      	ldr	r3, [pc, #256]	; (80029e0 <HAL_RCC_OscConfig+0x4c4>)
 80028de:	6a1b      	ldr	r3, [r3, #32]
 80028e0:	f003 0302 	and.w	r3, r3, #2
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d1ee      	bne.n	80028c6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80028e8:	7dfb      	ldrb	r3, [r7, #23]
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d105      	bne.n	80028fa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028ee:	4b3c      	ldr	r3, [pc, #240]	; (80029e0 <HAL_RCC_OscConfig+0x4c4>)
 80028f0:	69db      	ldr	r3, [r3, #28]
 80028f2:	4a3b      	ldr	r2, [pc, #236]	; (80029e0 <HAL_RCC_OscConfig+0x4c4>)
 80028f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028f8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	69db      	ldr	r3, [r3, #28]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	f000 8087 	beq.w	8002a12 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002904:	4b36      	ldr	r3, [pc, #216]	; (80029e0 <HAL_RCC_OscConfig+0x4c4>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f003 030c 	and.w	r3, r3, #12
 800290c:	2b08      	cmp	r3, #8
 800290e:	d061      	beq.n	80029d4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	69db      	ldr	r3, [r3, #28]
 8002914:	2b02      	cmp	r3, #2
 8002916:	d146      	bne.n	80029a6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002918:	4b33      	ldr	r3, [pc, #204]	; (80029e8 <HAL_RCC_OscConfig+0x4cc>)
 800291a:	2200      	movs	r2, #0
 800291c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800291e:	f7fe fc5f 	bl	80011e0 <HAL_GetTick>
 8002922:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002924:	e008      	b.n	8002938 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002926:	f7fe fc5b 	bl	80011e0 <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	2b02      	cmp	r3, #2
 8002932:	d901      	bls.n	8002938 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e06d      	b.n	8002a14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002938:	4b29      	ldr	r3, [pc, #164]	; (80029e0 <HAL_RCC_OscConfig+0x4c4>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d1f0      	bne.n	8002926 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6a1b      	ldr	r3, [r3, #32]
 8002948:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800294c:	d108      	bne.n	8002960 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800294e:	4b24      	ldr	r3, [pc, #144]	; (80029e0 <HAL_RCC_OscConfig+0x4c4>)
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	4921      	ldr	r1, [pc, #132]	; (80029e0 <HAL_RCC_OscConfig+0x4c4>)
 800295c:	4313      	orrs	r3, r2
 800295e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002960:	4b1f      	ldr	r3, [pc, #124]	; (80029e0 <HAL_RCC_OscConfig+0x4c4>)
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a19      	ldr	r1, [r3, #32]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002970:	430b      	orrs	r3, r1
 8002972:	491b      	ldr	r1, [pc, #108]	; (80029e0 <HAL_RCC_OscConfig+0x4c4>)
 8002974:	4313      	orrs	r3, r2
 8002976:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002978:	4b1b      	ldr	r3, [pc, #108]	; (80029e8 <HAL_RCC_OscConfig+0x4cc>)
 800297a:	2201      	movs	r2, #1
 800297c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800297e:	f7fe fc2f 	bl	80011e0 <HAL_GetTick>
 8002982:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002984:	e008      	b.n	8002998 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002986:	f7fe fc2b 	bl	80011e0 <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	2b02      	cmp	r3, #2
 8002992:	d901      	bls.n	8002998 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	e03d      	b.n	8002a14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002998:	4b11      	ldr	r3, [pc, #68]	; (80029e0 <HAL_RCC_OscConfig+0x4c4>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d0f0      	beq.n	8002986 <HAL_RCC_OscConfig+0x46a>
 80029a4:	e035      	b.n	8002a12 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029a6:	4b10      	ldr	r3, [pc, #64]	; (80029e8 <HAL_RCC_OscConfig+0x4cc>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ac:	f7fe fc18 	bl	80011e0 <HAL_GetTick>
 80029b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029b2:	e008      	b.n	80029c6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029b4:	f7fe fc14 	bl	80011e0 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e026      	b.n	8002a14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029c6:	4b06      	ldr	r3, [pc, #24]	; (80029e0 <HAL_RCC_OscConfig+0x4c4>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d1f0      	bne.n	80029b4 <HAL_RCC_OscConfig+0x498>
 80029d2:	e01e      	b.n	8002a12 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	69db      	ldr	r3, [r3, #28]
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d107      	bne.n	80029ec <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e019      	b.n	8002a14 <HAL_RCC_OscConfig+0x4f8>
 80029e0:	40021000 	.word	0x40021000
 80029e4:	40007000 	.word	0x40007000
 80029e8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80029ec:	4b0b      	ldr	r3, [pc, #44]	; (8002a1c <HAL_RCC_OscConfig+0x500>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6a1b      	ldr	r3, [r3, #32]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d106      	bne.n	8002a0e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d001      	beq.n	8002a12 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e000      	b.n	8002a14 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002a12:	2300      	movs	r3, #0
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3718      	adds	r7, #24
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	40021000 	.word	0x40021000

08002a20 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d101      	bne.n	8002a34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e0d0      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a34:	4b6a      	ldr	r3, [pc, #424]	; (8002be0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0307 	and.w	r3, r3, #7
 8002a3c:	683a      	ldr	r2, [r7, #0]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d910      	bls.n	8002a64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a42:	4b67      	ldr	r3, [pc, #412]	; (8002be0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f023 0207 	bic.w	r2, r3, #7
 8002a4a:	4965      	ldr	r1, [pc, #404]	; (8002be0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a52:	4b63      	ldr	r3, [pc, #396]	; (8002be0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0307 	and.w	r3, r3, #7
 8002a5a:	683a      	ldr	r2, [r7, #0]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d001      	beq.n	8002a64 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e0b8      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0302 	and.w	r3, r3, #2
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d020      	beq.n	8002ab2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0304 	and.w	r3, r3, #4
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d005      	beq.n	8002a88 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a7c:	4b59      	ldr	r3, [pc, #356]	; (8002be4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	4a58      	ldr	r2, [pc, #352]	; (8002be4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a82:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002a86:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0308 	and.w	r3, r3, #8
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d005      	beq.n	8002aa0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a94:	4b53      	ldr	r3, [pc, #332]	; (8002be4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	4a52      	ldr	r2, [pc, #328]	; (8002be4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a9a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002a9e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002aa0:	4b50      	ldr	r3, [pc, #320]	; (8002be4 <HAL_RCC_ClockConfig+0x1c4>)
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	494d      	ldr	r1, [pc, #308]	; (8002be4 <HAL_RCC_ClockConfig+0x1c4>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0301 	and.w	r3, r3, #1
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d040      	beq.n	8002b40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d107      	bne.n	8002ad6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ac6:	4b47      	ldr	r3, [pc, #284]	; (8002be4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d115      	bne.n	8002afe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e07f      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d107      	bne.n	8002aee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ade:	4b41      	ldr	r3, [pc, #260]	; (8002be4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d109      	bne.n	8002afe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e073      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aee:	4b3d      	ldr	r3, [pc, #244]	; (8002be4 <HAL_RCC_ClockConfig+0x1c4>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d101      	bne.n	8002afe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e06b      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002afe:	4b39      	ldr	r3, [pc, #228]	; (8002be4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f023 0203 	bic.w	r2, r3, #3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	4936      	ldr	r1, [pc, #216]	; (8002be4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b10:	f7fe fb66 	bl	80011e0 <HAL_GetTick>
 8002b14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b16:	e00a      	b.n	8002b2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b18:	f7fe fb62 	bl	80011e0 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e053      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b2e:	4b2d      	ldr	r3, [pc, #180]	; (8002be4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f003 020c 	and.w	r2, r3, #12
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d1eb      	bne.n	8002b18 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b40:	4b27      	ldr	r3, [pc, #156]	; (8002be0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0307 	and.w	r3, r3, #7
 8002b48:	683a      	ldr	r2, [r7, #0]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d210      	bcs.n	8002b70 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b4e:	4b24      	ldr	r3, [pc, #144]	; (8002be0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f023 0207 	bic.w	r2, r3, #7
 8002b56:	4922      	ldr	r1, [pc, #136]	; (8002be0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b5e:	4b20      	ldr	r3, [pc, #128]	; (8002be0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0307 	and.w	r3, r3, #7
 8002b66:	683a      	ldr	r2, [r7, #0]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d001      	beq.n	8002b70 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e032      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0304 	and.w	r3, r3, #4
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d008      	beq.n	8002b8e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b7c:	4b19      	ldr	r3, [pc, #100]	; (8002be4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	4916      	ldr	r1, [pc, #88]	; (8002be4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0308 	and.w	r3, r3, #8
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d009      	beq.n	8002bae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b9a:	4b12      	ldr	r3, [pc, #72]	; (8002be4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	00db      	lsls	r3, r3, #3
 8002ba8:	490e      	ldr	r1, [pc, #56]	; (8002be4 <HAL_RCC_ClockConfig+0x1c4>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002bae:	f000 f821 	bl	8002bf4 <HAL_RCC_GetSysClockFreq>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	4b0b      	ldr	r3, [pc, #44]	; (8002be4 <HAL_RCC_ClockConfig+0x1c4>)
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	091b      	lsrs	r3, r3, #4
 8002bba:	f003 030f 	and.w	r3, r3, #15
 8002bbe:	490a      	ldr	r1, [pc, #40]	; (8002be8 <HAL_RCC_ClockConfig+0x1c8>)
 8002bc0:	5ccb      	ldrb	r3, [r1, r3]
 8002bc2:	fa22 f303 	lsr.w	r3, r2, r3
 8002bc6:	4a09      	ldr	r2, [pc, #36]	; (8002bec <HAL_RCC_ClockConfig+0x1cc>)
 8002bc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002bca:	4b09      	ldr	r3, [pc, #36]	; (8002bf0 <HAL_RCC_ClockConfig+0x1d0>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7fe fac4 	bl	800115c <HAL_InitTick>

  return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3710      	adds	r7, #16
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	40022000 	.word	0x40022000
 8002be4:	40021000 	.word	0x40021000
 8002be8:	08005478 	.word	0x08005478
 8002bec:	20000000 	.word	0x20000000
 8002bf0:	20000004 	.word	0x20000004

08002bf4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b087      	sub	sp, #28
 8002bf8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	60fb      	str	r3, [r7, #12]
 8002bfe:	2300      	movs	r3, #0
 8002c00:	60bb      	str	r3, [r7, #8]
 8002c02:	2300      	movs	r3, #0
 8002c04:	617b      	str	r3, [r7, #20]
 8002c06:	2300      	movs	r3, #0
 8002c08:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002c0e:	4b1e      	ldr	r3, [pc, #120]	; (8002c88 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f003 030c 	and.w	r3, r3, #12
 8002c1a:	2b04      	cmp	r3, #4
 8002c1c:	d002      	beq.n	8002c24 <HAL_RCC_GetSysClockFreq+0x30>
 8002c1e:	2b08      	cmp	r3, #8
 8002c20:	d003      	beq.n	8002c2a <HAL_RCC_GetSysClockFreq+0x36>
 8002c22:	e027      	b.n	8002c74 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c24:	4b19      	ldr	r3, [pc, #100]	; (8002c8c <HAL_RCC_GetSysClockFreq+0x98>)
 8002c26:	613b      	str	r3, [r7, #16]
      break;
 8002c28:	e027      	b.n	8002c7a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	0c9b      	lsrs	r3, r3, #18
 8002c2e:	f003 030f 	and.w	r3, r3, #15
 8002c32:	4a17      	ldr	r2, [pc, #92]	; (8002c90 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c34:	5cd3      	ldrb	r3, [r2, r3]
 8002c36:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d010      	beq.n	8002c64 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c42:	4b11      	ldr	r3, [pc, #68]	; (8002c88 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	0c5b      	lsrs	r3, r3, #17
 8002c48:	f003 0301 	and.w	r3, r3, #1
 8002c4c:	4a11      	ldr	r2, [pc, #68]	; (8002c94 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002c4e:	5cd3      	ldrb	r3, [r2, r3]
 8002c50:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a0d      	ldr	r2, [pc, #52]	; (8002c8c <HAL_RCC_GetSysClockFreq+0x98>)
 8002c56:	fb03 f202 	mul.w	r2, r3, r2
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c60:	617b      	str	r3, [r7, #20]
 8002c62:	e004      	b.n	8002c6e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	4a0c      	ldr	r2, [pc, #48]	; (8002c98 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002c68:	fb02 f303 	mul.w	r3, r2, r3
 8002c6c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	613b      	str	r3, [r7, #16]
      break;
 8002c72:	e002      	b.n	8002c7a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c74:	4b05      	ldr	r3, [pc, #20]	; (8002c8c <HAL_RCC_GetSysClockFreq+0x98>)
 8002c76:	613b      	str	r3, [r7, #16]
      break;
 8002c78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c7a:	693b      	ldr	r3, [r7, #16]
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	371c      	adds	r7, #28
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bc80      	pop	{r7}
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	40021000 	.word	0x40021000
 8002c8c:	007a1200 	.word	0x007a1200
 8002c90:	08005490 	.word	0x08005490
 8002c94:	080054a0 	.word	0x080054a0
 8002c98:	003d0900 	.word	0x003d0900

08002c9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ca0:	4b02      	ldr	r3, [pc, #8]	; (8002cac <HAL_RCC_GetHCLKFreq+0x10>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bc80      	pop	{r7}
 8002caa:	4770      	bx	lr
 8002cac:	20000000 	.word	0x20000000

08002cb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002cb4:	f7ff fff2 	bl	8002c9c <HAL_RCC_GetHCLKFreq>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	4b05      	ldr	r3, [pc, #20]	; (8002cd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	0a1b      	lsrs	r3, r3, #8
 8002cc0:	f003 0307 	and.w	r3, r3, #7
 8002cc4:	4903      	ldr	r1, [pc, #12]	; (8002cd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cc6:	5ccb      	ldrb	r3, [r1, r3]
 8002cc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	40021000 	.word	0x40021000
 8002cd4:	08005488 	.word	0x08005488

08002cd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002cdc:	f7ff ffde 	bl	8002c9c <HAL_RCC_GetHCLKFreq>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	4b05      	ldr	r3, [pc, #20]	; (8002cf8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	0adb      	lsrs	r3, r3, #11
 8002ce8:	f003 0307 	and.w	r3, r3, #7
 8002cec:	4903      	ldr	r1, [pc, #12]	; (8002cfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cee:	5ccb      	ldrb	r3, [r1, r3]
 8002cf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	40021000 	.word	0x40021000
 8002cfc:	08005488 	.word	0x08005488

08002d00 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b085      	sub	sp, #20
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002d08:	4b0a      	ldr	r3, [pc, #40]	; (8002d34 <RCC_Delay+0x34>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a0a      	ldr	r2, [pc, #40]	; (8002d38 <RCC_Delay+0x38>)
 8002d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d12:	0a5b      	lsrs	r3, r3, #9
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	fb02 f303 	mul.w	r3, r2, r3
 8002d1a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002d1c:	bf00      	nop
  }
  while (Delay --);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	1e5a      	subs	r2, r3, #1
 8002d22:	60fa      	str	r2, [r7, #12]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d1f9      	bne.n	8002d1c <RCC_Delay+0x1c>
}
 8002d28:	bf00      	nop
 8002d2a:	bf00      	nop
 8002d2c:	3714      	adds	r7, #20
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bc80      	pop	{r7}
 8002d32:	4770      	bx	lr
 8002d34:	20000000 	.word	0x20000000
 8002d38:	10624dd3 	.word	0x10624dd3

08002d3c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b086      	sub	sp, #24
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002d44:	2300      	movs	r3, #0
 8002d46:	613b      	str	r3, [r7, #16]
 8002d48:	2300      	movs	r3, #0
 8002d4a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0301 	and.w	r3, r3, #1
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d07d      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d5c:	4b4f      	ldr	r3, [pc, #316]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d5e:	69db      	ldr	r3, [r3, #28]
 8002d60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d10d      	bne.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d68:	4b4c      	ldr	r3, [pc, #304]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d6a:	69db      	ldr	r3, [r3, #28]
 8002d6c:	4a4b      	ldr	r2, [pc, #300]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d72:	61d3      	str	r3, [r2, #28]
 8002d74:	4b49      	ldr	r3, [pc, #292]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d76:	69db      	ldr	r3, [r3, #28]
 8002d78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d7c:	60bb      	str	r3, [r7, #8]
 8002d7e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d80:	2301      	movs	r3, #1
 8002d82:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d84:	4b46      	ldr	r3, [pc, #280]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d118      	bne.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d90:	4b43      	ldr	r3, [pc, #268]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a42      	ldr	r2, [pc, #264]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d9a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d9c:	f7fe fa20 	bl	80011e0 <HAL_GetTick>
 8002da0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002da2:	e008      	b.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002da4:	f7fe fa1c 	bl	80011e0 <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	2b64      	cmp	r3, #100	; 0x64
 8002db0:	d901      	bls.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e06d      	b.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002db6:	4b3a      	ldr	r3, [pc, #232]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d0f0      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002dc2:	4b36      	ldr	r3, [pc, #216]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dc4:	6a1b      	ldr	r3, [r3, #32]
 8002dc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dca:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d02e      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dda:	68fa      	ldr	r2, [r7, #12]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d027      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002de0:	4b2e      	ldr	r3, [pc, #184]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002de2:	6a1b      	ldr	r3, [r3, #32]
 8002de4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002de8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002dea:	4b2e      	ldr	r3, [pc, #184]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002dec:	2201      	movs	r2, #1
 8002dee:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002df0:	4b2c      	ldr	r3, [pc, #176]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002df6:	4a29      	ldr	r2, [pc, #164]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f003 0301 	and.w	r3, r3, #1
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d014      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e06:	f7fe f9eb 	bl	80011e0 <HAL_GetTick>
 8002e0a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e0c:	e00a      	b.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e0e:	f7fe f9e7 	bl	80011e0 <HAL_GetTick>
 8002e12:	4602      	mov	r2, r0
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d901      	bls.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e036      	b.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e24:	4b1d      	ldr	r3, [pc, #116]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e26:	6a1b      	ldr	r3, [r3, #32]
 8002e28:	f003 0302 	and.w	r3, r3, #2
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d0ee      	beq.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e30:	4b1a      	ldr	r3, [pc, #104]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e32:	6a1b      	ldr	r3, [r3, #32]
 8002e34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	4917      	ldr	r1, [pc, #92]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e42:	7dfb      	ldrb	r3, [r7, #23]
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d105      	bne.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e48:	4b14      	ldr	r3, [pc, #80]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e4a:	69db      	ldr	r3, [r3, #28]
 8002e4c:	4a13      	ldr	r2, [pc, #76]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e52:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0302 	and.w	r3, r3, #2
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d008      	beq.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e60:	4b0e      	ldr	r3, [pc, #56]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	490b      	ldr	r1, [pc, #44]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0310 	and.w	r3, r3, #16
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d008      	beq.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e7e:	4b07      	ldr	r3, [pc, #28]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	4904      	ldr	r1, [pc, #16]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3718      	adds	r7, #24
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	40021000 	.word	0x40021000
 8002ea0:	40007000 	.word	0x40007000
 8002ea4:	42420440 	.word	0x42420440

08002ea8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d101      	bne.n	8002eba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e03f      	b.n	8002f3a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d106      	bne.n	8002ed4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f000 fc5a 	bl	8003788 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2224      	movs	r2, #36	; 0x24
 8002ed8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	68da      	ldr	r2, [r3, #12]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002eea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f000 fb8d 	bl	800360c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	691a      	ldr	r2, [r3, #16]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	695a      	ldr	r2, [r3, #20]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	68da      	ldr	r2, [r3, #12]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2220      	movs	r2, #32
 8002f2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2220      	movs	r2, #32
 8002f34:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002f38:	2300      	movs	r3, #0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}

08002f42 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f42:	b580      	push	{r7, lr}
 8002f44:	b08a      	sub	sp, #40	; 0x28
 8002f46:	af02      	add	r7, sp, #8
 8002f48:	60f8      	str	r0, [r7, #12]
 8002f4a:	60b9      	str	r1, [r7, #8]
 8002f4c:	603b      	str	r3, [r7, #0]
 8002f4e:	4613      	mov	r3, r2
 8002f50:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f52:	2300      	movs	r3, #0
 8002f54:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	2b20      	cmp	r3, #32
 8002f60:	d17c      	bne.n	800305c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d002      	beq.n	8002f6e <HAL_UART_Transmit+0x2c>
 8002f68:	88fb      	ldrh	r3, [r7, #6]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d101      	bne.n	8002f72 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e075      	b.n	800305e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d101      	bne.n	8002f80 <HAL_UART_Transmit+0x3e>
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	e06e      	b.n	800305e <HAL_UART_Transmit+0x11c>
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2221      	movs	r2, #33	; 0x21
 8002f92:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002f96:	f7fe f923 	bl	80011e0 <HAL_GetTick>
 8002f9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	88fa      	ldrh	r2, [r7, #6]
 8002fa0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	88fa      	ldrh	r2, [r7, #6]
 8002fa6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fb0:	d108      	bne.n	8002fc4 <HAL_UART_Transmit+0x82>
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d104      	bne.n	8002fc4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	61bb      	str	r3, [r7, #24]
 8002fc2:	e003      	b.n	8002fcc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002fd4:	e02a      	b.n	800302c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	9300      	str	r3, [sp, #0]
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	2180      	movs	r1, #128	; 0x80
 8002fe0:	68f8      	ldr	r0, [r7, #12]
 8002fe2:	f000 f9b0 	bl	8003346 <UART_WaitOnFlagUntilTimeout>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d001      	beq.n	8002ff0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002fec:	2303      	movs	r3, #3
 8002fee:	e036      	b.n	800305e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d10b      	bne.n	800300e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	881b      	ldrh	r3, [r3, #0]
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003004:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	3302      	adds	r3, #2
 800300a:	61bb      	str	r3, [r7, #24]
 800300c:	e007      	b.n	800301e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	781a      	ldrb	r2, [r3, #0]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	3301      	adds	r3, #1
 800301c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003022:	b29b      	uxth	r3, r3
 8003024:	3b01      	subs	r3, #1
 8003026:	b29a      	uxth	r2, r3
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003030:	b29b      	uxth	r3, r3
 8003032:	2b00      	cmp	r3, #0
 8003034:	d1cf      	bne.n	8002fd6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	9300      	str	r3, [sp, #0]
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	2200      	movs	r2, #0
 800303e:	2140      	movs	r1, #64	; 0x40
 8003040:	68f8      	ldr	r0, [r7, #12]
 8003042:	f000 f980 	bl	8003346 <UART_WaitOnFlagUntilTimeout>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d001      	beq.n	8003050 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e006      	b.n	800305e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2220      	movs	r2, #32
 8003054:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003058:	2300      	movs	r3, #0
 800305a:	e000      	b.n	800305e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800305c:	2302      	movs	r3, #2
  }
}
 800305e:	4618      	mov	r0, r3
 8003060:	3720      	adds	r7, #32
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}

08003066 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003066:	b480      	push	{r7}
 8003068:	b085      	sub	sp, #20
 800306a:	af00      	add	r7, sp, #0
 800306c:	60f8      	str	r0, [r7, #12]
 800306e:	60b9      	str	r1, [r7, #8]
 8003070:	4613      	mov	r3, r2
 8003072:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800307a:	b2db      	uxtb	r3, r3
 800307c:	2b20      	cmp	r3, #32
 800307e:	d140      	bne.n	8003102 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d002      	beq.n	800308c <HAL_UART_Receive_IT+0x26>
 8003086:	88fb      	ldrh	r3, [r7, #6]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d101      	bne.n	8003090 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e039      	b.n	8003104 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003096:	2b01      	cmp	r3, #1
 8003098:	d101      	bne.n	800309e <HAL_UART_Receive_IT+0x38>
 800309a:	2302      	movs	r3, #2
 800309c:	e032      	b.n	8003104 <HAL_UART_Receive_IT+0x9e>
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2201      	movs	r2, #1
 80030a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	68ba      	ldr	r2, [r7, #8]
 80030aa:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	88fa      	ldrh	r2, [r7, #6]
 80030b0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	88fa      	ldrh	r2, [r7, #6]
 80030b6:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2222      	movs	r2, #34	; 0x22
 80030c2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	68da      	ldr	r2, [r3, #12]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030dc:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	695a      	ldr	r2, [r3, #20]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f042 0201 	orr.w	r2, r2, #1
 80030ec:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	68da      	ldr	r2, [r3, #12]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f042 0220 	orr.w	r2, r2, #32
 80030fc:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80030fe:	2300      	movs	r3, #0
 8003100:	e000      	b.n	8003104 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003102:	2302      	movs	r3, #2
  }
}
 8003104:	4618      	mov	r0, r3
 8003106:	3714      	adds	r7, #20
 8003108:	46bd      	mov	sp, r7
 800310a:	bc80      	pop	{r7}
 800310c:	4770      	bx	lr
	...

08003110 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b088      	sub	sp, #32
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003130:	2300      	movs	r3, #0
 8003132:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003134:	2300      	movs	r3, #0
 8003136:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	f003 030f 	and.w	r3, r3, #15
 800313e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d10d      	bne.n	8003162 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	f003 0320 	and.w	r3, r3, #32
 800314c:	2b00      	cmp	r3, #0
 800314e:	d008      	beq.n	8003162 <HAL_UART_IRQHandler+0x52>
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	f003 0320 	and.w	r3, r3, #32
 8003156:	2b00      	cmp	r3, #0
 8003158:	d003      	beq.n	8003162 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f000 f9d5 	bl	800350a <UART_Receive_IT>
      return;
 8003160:	e0d0      	b.n	8003304 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	2b00      	cmp	r3, #0
 8003166:	f000 80b0 	beq.w	80032ca <HAL_UART_IRQHandler+0x1ba>
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	f003 0301 	and.w	r3, r3, #1
 8003170:	2b00      	cmp	r3, #0
 8003172:	d105      	bne.n	8003180 <HAL_UART_IRQHandler+0x70>
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800317a:	2b00      	cmp	r3, #0
 800317c:	f000 80a5 	beq.w	80032ca <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	f003 0301 	and.w	r3, r3, #1
 8003186:	2b00      	cmp	r3, #0
 8003188:	d00a      	beq.n	80031a0 <HAL_UART_IRQHandler+0x90>
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003190:	2b00      	cmp	r3, #0
 8003192:	d005      	beq.n	80031a0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003198:	f043 0201 	orr.w	r2, r3, #1
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	f003 0304 	and.w	r3, r3, #4
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00a      	beq.n	80031c0 <HAL_UART_IRQHandler+0xb0>
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	f003 0301 	and.w	r3, r3, #1
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d005      	beq.n	80031c0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031b8:	f043 0202 	orr.w	r2, r3, #2
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d00a      	beq.n	80031e0 <HAL_UART_IRQHandler+0xd0>
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	f003 0301 	and.w	r3, r3, #1
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d005      	beq.n	80031e0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031d8:	f043 0204 	orr.w	r2, r3, #4
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	f003 0308 	and.w	r3, r3, #8
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00f      	beq.n	800320a <HAL_UART_IRQHandler+0xfa>
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	f003 0320 	and.w	r3, r3, #32
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d104      	bne.n	80031fe <HAL_UART_IRQHandler+0xee>
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	f003 0301 	and.w	r3, r3, #1
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d005      	beq.n	800320a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003202:	f043 0208 	orr.w	r2, r3, #8
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800320e:	2b00      	cmp	r3, #0
 8003210:	d077      	beq.n	8003302 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	f003 0320 	and.w	r3, r3, #32
 8003218:	2b00      	cmp	r3, #0
 800321a:	d007      	beq.n	800322c <HAL_UART_IRQHandler+0x11c>
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	f003 0320 	and.w	r3, r3, #32
 8003222:	2b00      	cmp	r3, #0
 8003224:	d002      	beq.n	800322c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f000 f96f 	bl	800350a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	695b      	ldr	r3, [r3, #20]
 8003232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003236:	2b00      	cmp	r3, #0
 8003238:	bf14      	ite	ne
 800323a:	2301      	movne	r3, #1
 800323c:	2300      	moveq	r3, #0
 800323e:	b2db      	uxtb	r3, r3
 8003240:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003246:	f003 0308 	and.w	r3, r3, #8
 800324a:	2b00      	cmp	r3, #0
 800324c:	d102      	bne.n	8003254 <HAL_UART_IRQHandler+0x144>
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d031      	beq.n	80032b8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f000 f8c0 	bl	80033da <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	695b      	ldr	r3, [r3, #20]
 8003260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003264:	2b00      	cmp	r3, #0
 8003266:	d023      	beq.n	80032b0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	695a      	ldr	r2, [r3, #20]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003276:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800327c:	2b00      	cmp	r3, #0
 800327e:	d013      	beq.n	80032a8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003284:	4a21      	ldr	r2, [pc, #132]	; (800330c <HAL_UART_IRQHandler+0x1fc>)
 8003286:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800328c:	4618      	mov	r0, r3
 800328e:	f7fe fe15 	bl	8001ebc <HAL_DMA_Abort_IT>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d016      	beq.n	80032c6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800329c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80032a2:	4610      	mov	r0, r2
 80032a4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032a6:	e00e      	b.n	80032c6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f000 f843 	bl	8003334 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032ae:	e00a      	b.n	80032c6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f000 f83f 	bl	8003334 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032b6:	e006      	b.n	80032c6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f000 f83b 	bl	8003334 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80032c4:	e01d      	b.n	8003302 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032c6:	bf00      	nop
    return;
 80032c8:	e01b      	b.n	8003302 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d008      	beq.n	80032e6 <HAL_UART_IRQHandler+0x1d6>
 80032d4:	69bb      	ldr	r3, [r7, #24]
 80032d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d003      	beq.n	80032e6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 f8ac 	bl	800343c <UART_Transmit_IT>
    return;
 80032e4:	e00e      	b.n	8003304 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d009      	beq.n	8003304 <HAL_UART_IRQHandler+0x1f4>
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d004      	beq.n	8003304 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f000 f8ed 	bl	80034da <UART_EndTransmit_IT>
    return;
 8003300:	e000      	b.n	8003304 <HAL_UART_IRQHandler+0x1f4>
    return;
 8003302:	bf00      	nop
  }
}
 8003304:	3720      	adds	r7, #32
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	08003415 	.word	0x08003415

08003310 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003318:	bf00      	nop
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	bc80      	pop	{r7}
 8003320:	4770      	bx	lr

08003322 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003322:	b480      	push	{r7}
 8003324:	b083      	sub	sp, #12
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800332a:	bf00      	nop
 800332c:	370c      	adds	r7, #12
 800332e:	46bd      	mov	sp, r7
 8003330:	bc80      	pop	{r7}
 8003332:	4770      	bx	lr

08003334 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800333c:	bf00      	nop
 800333e:	370c      	adds	r7, #12
 8003340:	46bd      	mov	sp, r7
 8003342:	bc80      	pop	{r7}
 8003344:	4770      	bx	lr

08003346 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b084      	sub	sp, #16
 800334a:	af00      	add	r7, sp, #0
 800334c:	60f8      	str	r0, [r7, #12]
 800334e:	60b9      	str	r1, [r7, #8]
 8003350:	603b      	str	r3, [r7, #0]
 8003352:	4613      	mov	r3, r2
 8003354:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003356:	e02c      	b.n	80033b2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800335e:	d028      	beq.n	80033b2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d007      	beq.n	8003376 <UART_WaitOnFlagUntilTimeout+0x30>
 8003366:	f7fd ff3b 	bl	80011e0 <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	69ba      	ldr	r2, [r7, #24]
 8003372:	429a      	cmp	r2, r3
 8003374:	d21d      	bcs.n	80033b2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68da      	ldr	r2, [r3, #12]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003384:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	695a      	ldr	r2, [r3, #20]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f022 0201 	bic.w	r2, r2, #1
 8003394:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2220      	movs	r2, #32
 800339a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2220      	movs	r2, #32
 80033a2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e00f      	b.n	80033d2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	4013      	ands	r3, r2
 80033bc:	68ba      	ldr	r2, [r7, #8]
 80033be:	429a      	cmp	r2, r3
 80033c0:	bf0c      	ite	eq
 80033c2:	2301      	moveq	r3, #1
 80033c4:	2300      	movne	r3, #0
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	461a      	mov	r2, r3
 80033ca:	79fb      	ldrb	r3, [r7, #7]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d0c3      	beq.n	8003358 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3710      	adds	r7, #16
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80033da:	b480      	push	{r7}
 80033dc:	b083      	sub	sp, #12
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	68da      	ldr	r2, [r3, #12]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80033f0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	695a      	ldr	r2, [r3, #20]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f022 0201 	bic.w	r2, r2, #1
 8003400:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2220      	movs	r2, #32
 8003406:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800340a:	bf00      	nop
 800340c:	370c      	adds	r7, #12
 800340e:	46bd      	mov	sp, r7
 8003410:	bc80      	pop	{r7}
 8003412:	4770      	bx	lr

08003414 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003420:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2200      	movs	r2, #0
 8003426:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2200      	movs	r2, #0
 800342c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800342e:	68f8      	ldr	r0, [r7, #12]
 8003430:	f7ff ff80 	bl	8003334 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003434:	bf00      	nop
 8003436:	3710      	adds	r7, #16
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800343c:	b480      	push	{r7}
 800343e:	b085      	sub	sp, #20
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800344a:	b2db      	uxtb	r3, r3
 800344c:	2b21      	cmp	r3, #33	; 0x21
 800344e:	d13e      	bne.n	80034ce <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003458:	d114      	bne.n	8003484 <UART_Transmit_IT+0x48>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d110      	bne.n	8003484 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a1b      	ldr	r3, [r3, #32]
 8003466:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	881b      	ldrh	r3, [r3, #0]
 800346c:	461a      	mov	r2, r3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003476:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a1b      	ldr	r3, [r3, #32]
 800347c:	1c9a      	adds	r2, r3, #2
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	621a      	str	r2, [r3, #32]
 8003482:	e008      	b.n	8003496 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a1b      	ldr	r3, [r3, #32]
 8003488:	1c59      	adds	r1, r3, #1
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	6211      	str	r1, [r2, #32]
 800348e:	781a      	ldrb	r2, [r3, #0]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800349a:	b29b      	uxth	r3, r3
 800349c:	3b01      	subs	r3, #1
 800349e:	b29b      	uxth	r3, r3
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	4619      	mov	r1, r3
 80034a4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d10f      	bne.n	80034ca <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	68da      	ldr	r2, [r3, #12]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034b8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	68da      	ldr	r2, [r3, #12]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034c8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80034ca:	2300      	movs	r3, #0
 80034cc:	e000      	b.n	80034d0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80034ce:	2302      	movs	r3, #2
  }
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3714      	adds	r7, #20
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bc80      	pop	{r7}
 80034d8:	4770      	bx	lr

080034da <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80034da:	b580      	push	{r7, lr}
 80034dc:	b082      	sub	sp, #8
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68da      	ldr	r2, [r3, #12]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034f0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2220      	movs	r2, #32
 80034f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f7ff ff08 	bl	8003310 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3708      	adds	r7, #8
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}

0800350a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800350a:	b580      	push	{r7, lr}
 800350c:	b084      	sub	sp, #16
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003518:	b2db      	uxtb	r3, r3
 800351a:	2b22      	cmp	r3, #34	; 0x22
 800351c:	d170      	bne.n	8003600 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003526:	d117      	bne.n	8003558 <UART_Receive_IT+0x4e>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	691b      	ldr	r3, [r3, #16]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d113      	bne.n	8003558 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8003530:	2300      	movs	r3, #0
 8003532:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003538:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	b29b      	uxth	r3, r3
 8003542:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003546:	b29a      	uxth	r2, r3
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003550:	1c9a      	adds	r2, r3, #2
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	629a      	str	r2, [r3, #40]	; 0x28
 8003556:	e026      	b.n	80035a6 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800355c:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800355e:	2300      	movs	r3, #0
 8003560:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800356a:	d007      	beq.n	800357c <UART_Receive_IT+0x72>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d10a      	bne.n	800358a <UART_Receive_IT+0x80>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	691b      	ldr	r3, [r3, #16]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d106      	bne.n	800358a <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	b2da      	uxtb	r2, r3
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	701a      	strb	r2, [r3, #0]
 8003588:	e008      	b.n	800359c <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	b2db      	uxtb	r3, r3
 8003592:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003596:	b2da      	uxtb	r2, r3
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a0:	1c5a      	adds	r2, r3, #1
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	3b01      	subs	r3, #1
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	4619      	mov	r1, r3
 80035b4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d120      	bne.n	80035fc <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	68da      	ldr	r2, [r3, #12]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f022 0220 	bic.w	r2, r2, #32
 80035c8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	68da      	ldr	r2, [r3, #12]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035d8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	695a      	ldr	r2, [r3, #20]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f022 0201 	bic.w	r2, r2, #1
 80035e8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2220      	movs	r2, #32
 80035ee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f7ff fe95 	bl	8003322 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80035f8:	2300      	movs	r3, #0
 80035fa:	e002      	b.n	8003602 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 80035fc:	2300      	movs	r3, #0
 80035fe:	e000      	b.n	8003602 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8003600:	2302      	movs	r3, #2
  }
}
 8003602:	4618      	mov	r0, r3
 8003604:	3710      	adds	r7, #16
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
	...

0800360c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	68da      	ldr	r2, [r3, #12]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	430a      	orrs	r2, r1
 8003628:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	689a      	ldr	r2, [r3, #8]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	691b      	ldr	r3, [r3, #16]
 8003632:	431a      	orrs	r2, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	695b      	ldr	r3, [r3, #20]
 8003638:	4313      	orrs	r3, r2
 800363a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003646:	f023 030c 	bic.w	r3, r3, #12
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	6812      	ldr	r2, [r2, #0]
 800364e:	68b9      	ldr	r1, [r7, #8]
 8003650:	430b      	orrs	r3, r1
 8003652:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	695b      	ldr	r3, [r3, #20]
 800365a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	699a      	ldr	r2, [r3, #24]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	430a      	orrs	r2, r1
 8003668:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a2c      	ldr	r2, [pc, #176]	; (8003720 <UART_SetConfig+0x114>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d103      	bne.n	800367c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003674:	f7ff fb30 	bl	8002cd8 <HAL_RCC_GetPCLK2Freq>
 8003678:	60f8      	str	r0, [r7, #12]
 800367a:	e002      	b.n	8003682 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800367c:	f7ff fb18 	bl	8002cb0 <HAL_RCC_GetPCLK1Freq>
 8003680:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003682:	68fa      	ldr	r2, [r7, #12]
 8003684:	4613      	mov	r3, r2
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	4413      	add	r3, r2
 800368a:	009a      	lsls	r2, r3, #2
 800368c:	441a      	add	r2, r3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	fbb2 f3f3 	udiv	r3, r2, r3
 8003698:	4a22      	ldr	r2, [pc, #136]	; (8003724 <UART_SetConfig+0x118>)
 800369a:	fba2 2303 	umull	r2, r3, r2, r3
 800369e:	095b      	lsrs	r3, r3, #5
 80036a0:	0119      	lsls	r1, r3, #4
 80036a2:	68fa      	ldr	r2, [r7, #12]
 80036a4:	4613      	mov	r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	4413      	add	r3, r2
 80036aa:	009a      	lsls	r2, r3, #2
 80036ac:	441a      	add	r2, r3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80036b8:	4b1a      	ldr	r3, [pc, #104]	; (8003724 <UART_SetConfig+0x118>)
 80036ba:	fba3 0302 	umull	r0, r3, r3, r2
 80036be:	095b      	lsrs	r3, r3, #5
 80036c0:	2064      	movs	r0, #100	; 0x64
 80036c2:	fb00 f303 	mul.w	r3, r0, r3
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	011b      	lsls	r3, r3, #4
 80036ca:	3332      	adds	r3, #50	; 0x32
 80036cc:	4a15      	ldr	r2, [pc, #84]	; (8003724 <UART_SetConfig+0x118>)
 80036ce:	fba2 2303 	umull	r2, r3, r2, r3
 80036d2:	095b      	lsrs	r3, r3, #5
 80036d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036d8:	4419      	add	r1, r3
 80036da:	68fa      	ldr	r2, [r7, #12]
 80036dc:	4613      	mov	r3, r2
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	4413      	add	r3, r2
 80036e2:	009a      	lsls	r2, r3, #2
 80036e4:	441a      	add	r2, r3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80036f0:	4b0c      	ldr	r3, [pc, #48]	; (8003724 <UART_SetConfig+0x118>)
 80036f2:	fba3 0302 	umull	r0, r3, r3, r2
 80036f6:	095b      	lsrs	r3, r3, #5
 80036f8:	2064      	movs	r0, #100	; 0x64
 80036fa:	fb00 f303 	mul.w	r3, r0, r3
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	011b      	lsls	r3, r3, #4
 8003702:	3332      	adds	r3, #50	; 0x32
 8003704:	4a07      	ldr	r2, [pc, #28]	; (8003724 <UART_SetConfig+0x118>)
 8003706:	fba2 2303 	umull	r2, r3, r2, r3
 800370a:	095b      	lsrs	r3, r3, #5
 800370c:	f003 020f 	and.w	r2, r3, #15
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	440a      	add	r2, r1
 8003716:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003718:	bf00      	nop
 800371a:	3710      	adds	r7, #16
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	40013800 	.word	0x40013800
 8003724:	51eb851f 	.word	0x51eb851f

08003728 <uart_rs485_hw_init>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_ADC1_Init(void);

 void uart_rs485_hw_init(void){
 8003728:	b580      	push	{r7, lr}
 800372a:	af00      	add	r7, sp, #0
	rs485_com.uart_module.Instance = RS485_PORT_COM;
 800372c:	4b13      	ldr	r3, [pc, #76]	; (800377c <uart_rs485_hw_init+0x54>)
 800372e:	4a14      	ldr	r2, [pc, #80]	; (8003780 <uart_rs485_hw_init+0x58>)
 8003730:	601a      	str	r2, [r3, #0]
	rs485_com.uart_module.Init.BaudRate = UART_BAUDRATE_SLAVE;
 8003732:	4b12      	ldr	r3, [pc, #72]	; (800377c <uart_rs485_hw_init+0x54>)
 8003734:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003738:	605a      	str	r2, [r3, #4]
	rs485_com.uart_module.Init.WordLength = UART_WORDLENGTH_8B;
 800373a:	4b10      	ldr	r3, [pc, #64]	; (800377c <uart_rs485_hw_init+0x54>)
 800373c:	2200      	movs	r2, #0
 800373e:	609a      	str	r2, [r3, #8]
	rs485_com.uart_module.Init.StopBits = UART_STOPBITS_1;
 8003740:	4b0e      	ldr	r3, [pc, #56]	; (800377c <uart_rs485_hw_init+0x54>)
 8003742:	2200      	movs	r2, #0
 8003744:	60da      	str	r2, [r3, #12]
	rs485_com.uart_module.Init.Parity = UART_PARITY_NONE;
 8003746:	4b0d      	ldr	r3, [pc, #52]	; (800377c <uart_rs485_hw_init+0x54>)
 8003748:	2200      	movs	r2, #0
 800374a:	611a      	str	r2, [r3, #16]
	rs485_com.uart_module.Init.Mode = UART_MODE_TX_RX;
 800374c:	4b0b      	ldr	r3, [pc, #44]	; (800377c <uart_rs485_hw_init+0x54>)
 800374e:	220c      	movs	r2, #12
 8003750:	615a      	str	r2, [r3, #20]
	rs485_com.uart_module.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003752:	4b0a      	ldr	r3, [pc, #40]	; (800377c <uart_rs485_hw_init+0x54>)
 8003754:	2200      	movs	r2, #0
 8003756:	619a      	str	r2, [r3, #24]
	rs485_com.uart_module.Init.OverSampling = UART_OVERSAMPLING_16;
 8003758:	4b08      	ldr	r3, [pc, #32]	; (800377c <uart_rs485_hw_init+0x54>)
 800375a:	2200      	movs	r2, #0
 800375c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&rs485_com.uart_module) != HAL_OK)
 800375e:	4807      	ldr	r0, [pc, #28]	; (800377c <uart_rs485_hw_init+0x54>)
 8003760:	f7ff fba2 	bl	8002ea8 <HAL_UART_Init>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d001      	beq.n	800376e <uart_rs485_hw_init+0x46>
	{
		Error_Handler();
 800376a:	f000 fc33 	bl	8003fd4 <Error_Handler>
	}
	HAL_UART_Receive_IT(&rs485_com.uart_module, (uint8_t*)&rs485_com.rx_data, 1);
 800376e:	2201      	movs	r2, #1
 8003770:	4904      	ldr	r1, [pc, #16]	; (8003784 <uart_rs485_hw_init+0x5c>)
 8003772:	4802      	ldr	r0, [pc, #8]	; (800377c <uart_rs485_hw_init+0x54>)
 8003774:	f7ff fc77 	bl	8003066 <HAL_UART_Receive_IT>

}
 8003778:	bf00      	nop
 800377a:	bd80      	pop	{r7, pc}
 800377c:	20000048 	.word	0x20000048
 8003780:	40013800 	.word	0x40013800
 8003784:	200000cc 	.word	0x200000cc

08003788 <HAL_UART_MspInit>:

 void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle){
 8003788:	b580      	push	{r7, lr}
 800378a:	b088      	sub	sp, #32
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]

 	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003790:	f107 0310 	add.w	r3, r7, #16
 8003794:	2200      	movs	r2, #0
 8003796:	601a      	str	r2, [r3, #0]
 8003798:	605a      	str	r2, [r3, #4]
 800379a:	609a      	str	r2, [r3, #8]
 800379c:	60da      	str	r2, [r3, #12]

 	if(uartHandle->Instance == RS485_PORT_COM)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a20      	ldr	r2, [pc, #128]	; (8003824 <HAL_UART_MspInit+0x9c>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d139      	bne.n	800381c <HAL_UART_MspInit+0x94>
 	{
 		/* USART1 clock enable */
 		__HAL_RCC_USART1_CLK_ENABLE();
 80037a8:	4b1f      	ldr	r3, [pc, #124]	; (8003828 <HAL_UART_MspInit+0xa0>)
 80037aa:	699b      	ldr	r3, [r3, #24]
 80037ac:	4a1e      	ldr	r2, [pc, #120]	; (8003828 <HAL_UART_MspInit+0xa0>)
 80037ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037b2:	6193      	str	r3, [r2, #24]
 80037b4:	4b1c      	ldr	r3, [pc, #112]	; (8003828 <HAL_UART_MspInit+0xa0>)
 80037b6:	699b      	ldr	r3, [r3, #24]
 80037b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037bc:	60fb      	str	r3, [r7, #12]
 80037be:	68fb      	ldr	r3, [r7, #12]
 		__HAL_RCC_GPIOA_CLK_ENABLE();
 80037c0:	4b19      	ldr	r3, [pc, #100]	; (8003828 <HAL_UART_MspInit+0xa0>)
 80037c2:	699b      	ldr	r3, [r3, #24]
 80037c4:	4a18      	ldr	r2, [pc, #96]	; (8003828 <HAL_UART_MspInit+0xa0>)
 80037c6:	f043 0304 	orr.w	r3, r3, #4
 80037ca:	6193      	str	r3, [r2, #24]
 80037cc:	4b16      	ldr	r3, [pc, #88]	; (8003828 <HAL_UART_MspInit+0xa0>)
 80037ce:	699b      	ldr	r3, [r3, #24]
 80037d0:	f003 0304 	and.w	r3, r3, #4
 80037d4:	60bb      	str	r3, [r7, #8]
 80037d6:	68bb      	ldr	r3, [r7, #8]

 		/**USART1 GPIO Configuration
 		PA9     ------> USART1_TX
 		PA10     ------> USART1_RX
 		*/
 		GPIO_InitStruct.Pin = GPIO_PIN_9;
 80037d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037dc:	613b      	str	r3, [r7, #16]
 		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037de:	2302      	movs	r3, #2
 80037e0:	617b      	str	r3, [r7, #20]
 		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80037e2:	2303      	movs	r3, #3
 80037e4:	61fb      	str	r3, [r7, #28]
 		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037e6:	f107 0310 	add.w	r3, r7, #16
 80037ea:	4619      	mov	r1, r3
 80037ec:	480f      	ldr	r0, [pc, #60]	; (800382c <HAL_UART_MspInit+0xa4>)
 80037ee:	f7fe fd11 	bl	8002214 <HAL_GPIO_Init>

 		GPIO_InitStruct.Pin = GPIO_PIN_10;
 80037f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037f6:	613b      	str	r3, [r7, #16]
 		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80037f8:	2300      	movs	r3, #0
 80037fa:	617b      	str	r3, [r7, #20]
 		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037fc:	2300      	movs	r3, #0
 80037fe:	61bb      	str	r3, [r7, #24]
 		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003800:	f107 0310 	add.w	r3, r7, #16
 8003804:	4619      	mov	r1, r3
 8003806:	4809      	ldr	r0, [pc, #36]	; (800382c <HAL_UART_MspInit+0xa4>)
 8003808:	f7fe fd04 	bl	8002214 <HAL_GPIO_Init>

 		/* USART1 interrupt Init */
 		HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800380c:	2200      	movs	r2, #0
 800380e:	2101      	movs	r1, #1
 8003810:	2025      	movs	r0, #37	; 0x25
 8003812:	f7fe fa62 	bl	8001cda <HAL_NVIC_SetPriority>
 		HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003816:	2025      	movs	r0, #37	; 0x25
 8003818:	f7fe fa7b 	bl	8001d12 <HAL_NVIC_EnableIRQ>
 	}

 }
 800381c:	bf00      	nop
 800381e:	3720      	adds	r7, #32
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	40013800 	.word	0x40013800
 8003828:	40021000 	.word	0x40021000
 800382c:	40010800 	.word	0x40010800

08003830 <board_init>:

void board_init(void){
 8003830:	b580      	push	{r7, lr}
 8003832:	af00      	add	r7, sp, #0
	  HAL_Init();
 8003834:	f7fd fc7c 	bl	8001130 <HAL_Init>
	  SystemClock_Config();
 8003838:	f000 fad4 	bl	8003de4 <SystemClock_Config>
	  MX_GPIO_Init();
 800383c:	f000 fba8 	bl	8003f90 <MX_GPIO_Init>
	  MX_DMA_Init();
 8003840:	f000 fb88 	bl	8003f54 <MX_DMA_Init>
	  MX_ADC1_Init();
 8003844:	f000 fb2a 	bl	8003e9c <MX_ADC1_Init>
	  uart_rs485_hw_init();
 8003848:	f7ff ff6e 	bl	8003728 <uart_rs485_hw_init>
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)sensor_value, 3);
 800384c:	2203      	movs	r2, #3
 800384e:	4903      	ldr	r1, [pc, #12]	; (800385c <board_init+0x2c>)
 8003850:	4803      	ldr	r0, [pc, #12]	; (8003860 <board_init+0x30>)
 8003852:	f7fd fda7 	bl	80013a4 <HAL_ADC_Start_DMA>

}
 8003856:	bf00      	nop
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	2000018c 	.word	0x2000018c
 8003860:	20000118 	.word	0x20000118
 8003864:	00000000 	.word	0x00000000

08003868 <FloatToStringX_XXX>:


void FloatToStringX_XXX(double* value, uint8_t* buffer){
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
	buffer[1] = '.' ;
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	3301      	adds	r3, #1
 8003876:	222e      	movs	r2, #46	; 0x2e
 8003878:	701a      	strb	r2, [r3, #0]
	uint32_t number = (*value) * 1000.001;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003880:	a331      	add	r3, pc, #196	; (adr r3, 8003948 <FloatToStringX_XXX+0xe0>)
 8003882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003886:	f7fc fe1f 	bl	80004c8 <__aeabi_dmul>
 800388a:	4602      	mov	r2, r0
 800388c:	460b      	mov	r3, r1
 800388e:	4610      	mov	r0, r2
 8003890:	4619      	mov	r1, r3
 8003892:	f7fd f8db 	bl	8000a4c <__aeabi_d2uiz>
 8003896:	4603      	mov	r3, r0
 8003898:	60fb      	str	r3, [r7, #12]
	buffer[4] = (char)(number % 10 + 48);
 800389a:	68f9      	ldr	r1, [r7, #12]
 800389c:	4b2c      	ldr	r3, [pc, #176]	; (8003950 <FloatToStringX_XXX+0xe8>)
 800389e:	fba3 2301 	umull	r2, r3, r3, r1
 80038a2:	08da      	lsrs	r2, r3, #3
 80038a4:	4613      	mov	r3, r2
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	4413      	add	r3, r2
 80038aa:	005b      	lsls	r3, r3, #1
 80038ac:	1aca      	subs	r2, r1, r3
 80038ae:	b2d2      	uxtb	r2, r2
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	3304      	adds	r3, #4
 80038b4:	3230      	adds	r2, #48	; 0x30
 80038b6:	b2d2      	uxtb	r2, r2
 80038b8:	701a      	strb	r2, [r3, #0]
	number = number / 10 ;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	4a24      	ldr	r2, [pc, #144]	; (8003950 <FloatToStringX_XXX+0xe8>)
 80038be:	fba2 2303 	umull	r2, r3, r2, r3
 80038c2:	08db      	lsrs	r3, r3, #3
 80038c4:	60fb      	str	r3, [r7, #12]
	buffer[3] = (char)(number % 10 + 48);
 80038c6:	68f9      	ldr	r1, [r7, #12]
 80038c8:	4b21      	ldr	r3, [pc, #132]	; (8003950 <FloatToStringX_XXX+0xe8>)
 80038ca:	fba3 2301 	umull	r2, r3, r3, r1
 80038ce:	08da      	lsrs	r2, r3, #3
 80038d0:	4613      	mov	r3, r2
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	4413      	add	r3, r2
 80038d6:	005b      	lsls	r3, r3, #1
 80038d8:	1aca      	subs	r2, r1, r3
 80038da:	b2d2      	uxtb	r2, r2
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	3303      	adds	r3, #3
 80038e0:	3230      	adds	r2, #48	; 0x30
 80038e2:	b2d2      	uxtb	r2, r2
 80038e4:	701a      	strb	r2, [r3, #0]
	number = number / 10 ;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	4a19      	ldr	r2, [pc, #100]	; (8003950 <FloatToStringX_XXX+0xe8>)
 80038ea:	fba2 2303 	umull	r2, r3, r2, r3
 80038ee:	08db      	lsrs	r3, r3, #3
 80038f0:	60fb      	str	r3, [r7, #12]
	buffer[2] = (char)(number % 10 + 48);
 80038f2:	68f9      	ldr	r1, [r7, #12]
 80038f4:	4b16      	ldr	r3, [pc, #88]	; (8003950 <FloatToStringX_XXX+0xe8>)
 80038f6:	fba3 2301 	umull	r2, r3, r3, r1
 80038fa:	08da      	lsrs	r2, r3, #3
 80038fc:	4613      	mov	r3, r2
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	4413      	add	r3, r2
 8003902:	005b      	lsls	r3, r3, #1
 8003904:	1aca      	subs	r2, r1, r3
 8003906:	b2d2      	uxtb	r2, r2
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	3302      	adds	r3, #2
 800390c:	3230      	adds	r2, #48	; 0x30
 800390e:	b2d2      	uxtb	r2, r2
 8003910:	701a      	strb	r2, [r3, #0]
	number = number / 10 ;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	4a0e      	ldr	r2, [pc, #56]	; (8003950 <FloatToStringX_XXX+0xe8>)
 8003916:	fba2 2303 	umull	r2, r3, r2, r3
 800391a:	08db      	lsrs	r3, r3, #3
 800391c:	60fb      	str	r3, [r7, #12]
	buffer[0] = (char)(number % 10 + 48);
 800391e:	68f9      	ldr	r1, [r7, #12]
 8003920:	4b0b      	ldr	r3, [pc, #44]	; (8003950 <FloatToStringX_XXX+0xe8>)
 8003922:	fba3 2301 	umull	r2, r3, r3, r1
 8003926:	08da      	lsrs	r2, r3, #3
 8003928:	4613      	mov	r3, r2
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	4413      	add	r3, r2
 800392e:	005b      	lsls	r3, r3, #1
 8003930:	1aca      	subs	r2, r1, r3
 8003932:	b2d3      	uxtb	r3, r2
 8003934:	3330      	adds	r3, #48	; 0x30
 8003936:	b2da      	uxtb	r2, r3
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	701a      	strb	r2, [r3, #0]
	return;
 800393c:	bf00      	nop
}
 800393e:	3710      	adds	r7, #16
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}
 8003944:	f3af 8000 	nop.w
 8003948:	0c49ba5e 	.word	0x0c49ba5e
 800394c:	408f4002 	.word	0x408f4002
 8003950:	cccccccd 	.word	0xcccccccd
 8003954:	00000000 	.word	0x00000000

08003958 <FloatToStringXX_XX>:


void FloatToStringXX_XX(double* value, uint8_t* buffer){
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
	buffer[2] = '.' ;
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	3302      	adds	r3, #2
 8003966:	222e      	movs	r2, #46	; 0x2e
 8003968:	701a      	strb	r2, [r3, #0]
	uint32_t number = (*value) * 100.001;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003970:	a331      	add	r3, pc, #196	; (adr r3, 8003a38 <FloatToStringXX_XX+0xe0>)
 8003972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003976:	f7fc fda7 	bl	80004c8 <__aeabi_dmul>
 800397a:	4602      	mov	r2, r0
 800397c:	460b      	mov	r3, r1
 800397e:	4610      	mov	r0, r2
 8003980:	4619      	mov	r1, r3
 8003982:	f7fd f863 	bl	8000a4c <__aeabi_d2uiz>
 8003986:	4603      	mov	r3, r0
 8003988:	60fb      	str	r3, [r7, #12]
	buffer[4] = (char)(number % 10 + 48);
 800398a:	68f9      	ldr	r1, [r7, #12]
 800398c:	4b2c      	ldr	r3, [pc, #176]	; (8003a40 <FloatToStringXX_XX+0xe8>)
 800398e:	fba3 2301 	umull	r2, r3, r3, r1
 8003992:	08da      	lsrs	r2, r3, #3
 8003994:	4613      	mov	r3, r2
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	4413      	add	r3, r2
 800399a:	005b      	lsls	r3, r3, #1
 800399c:	1aca      	subs	r2, r1, r3
 800399e:	b2d2      	uxtb	r2, r2
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	3304      	adds	r3, #4
 80039a4:	3230      	adds	r2, #48	; 0x30
 80039a6:	b2d2      	uxtb	r2, r2
 80039a8:	701a      	strb	r2, [r3, #0]
	number = number / 10 ;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	4a24      	ldr	r2, [pc, #144]	; (8003a40 <FloatToStringXX_XX+0xe8>)
 80039ae:	fba2 2303 	umull	r2, r3, r2, r3
 80039b2:	08db      	lsrs	r3, r3, #3
 80039b4:	60fb      	str	r3, [r7, #12]
	buffer[3] = (char)(number % 10 + 48);
 80039b6:	68f9      	ldr	r1, [r7, #12]
 80039b8:	4b21      	ldr	r3, [pc, #132]	; (8003a40 <FloatToStringXX_XX+0xe8>)
 80039ba:	fba3 2301 	umull	r2, r3, r3, r1
 80039be:	08da      	lsrs	r2, r3, #3
 80039c0:	4613      	mov	r3, r2
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	4413      	add	r3, r2
 80039c6:	005b      	lsls	r3, r3, #1
 80039c8:	1aca      	subs	r2, r1, r3
 80039ca:	b2d2      	uxtb	r2, r2
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	3303      	adds	r3, #3
 80039d0:	3230      	adds	r2, #48	; 0x30
 80039d2:	b2d2      	uxtb	r2, r2
 80039d4:	701a      	strb	r2, [r3, #0]
	number = number / 10 ;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	4a19      	ldr	r2, [pc, #100]	; (8003a40 <FloatToStringXX_XX+0xe8>)
 80039da:	fba2 2303 	umull	r2, r3, r2, r3
 80039de:	08db      	lsrs	r3, r3, #3
 80039e0:	60fb      	str	r3, [r7, #12]
	buffer[1] = (char)(number % 10 + 48);
 80039e2:	68f9      	ldr	r1, [r7, #12]
 80039e4:	4b16      	ldr	r3, [pc, #88]	; (8003a40 <FloatToStringXX_XX+0xe8>)
 80039e6:	fba3 2301 	umull	r2, r3, r3, r1
 80039ea:	08da      	lsrs	r2, r3, #3
 80039ec:	4613      	mov	r3, r2
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	4413      	add	r3, r2
 80039f2:	005b      	lsls	r3, r3, #1
 80039f4:	1aca      	subs	r2, r1, r3
 80039f6:	b2d2      	uxtb	r2, r2
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	3301      	adds	r3, #1
 80039fc:	3230      	adds	r2, #48	; 0x30
 80039fe:	b2d2      	uxtb	r2, r2
 8003a00:	701a      	strb	r2, [r3, #0]
	number = number / 10 ;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	4a0e      	ldr	r2, [pc, #56]	; (8003a40 <FloatToStringXX_XX+0xe8>)
 8003a06:	fba2 2303 	umull	r2, r3, r2, r3
 8003a0a:	08db      	lsrs	r3, r3, #3
 8003a0c:	60fb      	str	r3, [r7, #12]
	buffer[0] = (char)(number % 10 + 48);
 8003a0e:	68f9      	ldr	r1, [r7, #12]
 8003a10:	4b0b      	ldr	r3, [pc, #44]	; (8003a40 <FloatToStringXX_XX+0xe8>)
 8003a12:	fba3 2301 	umull	r2, r3, r3, r1
 8003a16:	08da      	lsrs	r2, r3, #3
 8003a18:	4613      	mov	r3, r2
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	4413      	add	r3, r2
 8003a1e:	005b      	lsls	r3, r3, #1
 8003a20:	1aca      	subs	r2, r1, r3
 8003a22:	b2d3      	uxtb	r3, r2
 8003a24:	3330      	adds	r3, #48	; 0x30
 8003a26:	b2da      	uxtb	r2, r3
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	701a      	strb	r2, [r3, #0]
	return;
 8003a2c:	bf00      	nop

}
 8003a2e:	3710      	adds	r7, #16
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	f3af 8000 	nop.w
 8003a38:	624dd2f2 	.word	0x624dd2f2
 8003a3c:	40590010 	.word	0x40590010
 8003a40:	cccccccd 	.word	0xcccccccd
 8003a44:	00000000 	.word	0x00000000

08003a48 <FloatToStringXXX_X>:


void FloatToStringXXX_X(double* value, uint8_t* buffer){
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
	buffer[3] = '.' ;
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	3303      	adds	r3, #3
 8003a56:	222e      	movs	r2, #46	; 0x2e
 8003a58:	701a      	strb	r2, [r3, #0]
	uint32_t number = (*value) * 10.001;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003a60:	a331      	add	r3, pc, #196	; (adr r3, 8003b28 <FloatToStringXXX_X+0xe0>)
 8003a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a66:	f7fc fd2f 	bl	80004c8 <__aeabi_dmul>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	460b      	mov	r3, r1
 8003a6e:	4610      	mov	r0, r2
 8003a70:	4619      	mov	r1, r3
 8003a72:	f7fc ffeb 	bl	8000a4c <__aeabi_d2uiz>
 8003a76:	4603      	mov	r3, r0
 8003a78:	60fb      	str	r3, [r7, #12]
	buffer[4] = (char)(number % 10 + 48);
 8003a7a:	68f9      	ldr	r1, [r7, #12]
 8003a7c:	4b2c      	ldr	r3, [pc, #176]	; (8003b30 <FloatToStringXXX_X+0xe8>)
 8003a7e:	fba3 2301 	umull	r2, r3, r3, r1
 8003a82:	08da      	lsrs	r2, r3, #3
 8003a84:	4613      	mov	r3, r2
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	4413      	add	r3, r2
 8003a8a:	005b      	lsls	r3, r3, #1
 8003a8c:	1aca      	subs	r2, r1, r3
 8003a8e:	b2d2      	uxtb	r2, r2
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	3304      	adds	r3, #4
 8003a94:	3230      	adds	r2, #48	; 0x30
 8003a96:	b2d2      	uxtb	r2, r2
 8003a98:	701a      	strb	r2, [r3, #0]
	number = number / 10 ;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	4a24      	ldr	r2, [pc, #144]	; (8003b30 <FloatToStringXXX_X+0xe8>)
 8003a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa2:	08db      	lsrs	r3, r3, #3
 8003aa4:	60fb      	str	r3, [r7, #12]
	buffer[2] = (char)(number % 10 + 48);
 8003aa6:	68f9      	ldr	r1, [r7, #12]
 8003aa8:	4b21      	ldr	r3, [pc, #132]	; (8003b30 <FloatToStringXXX_X+0xe8>)
 8003aaa:	fba3 2301 	umull	r2, r3, r3, r1
 8003aae:	08da      	lsrs	r2, r3, #3
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	4413      	add	r3, r2
 8003ab6:	005b      	lsls	r3, r3, #1
 8003ab8:	1aca      	subs	r2, r1, r3
 8003aba:	b2d2      	uxtb	r2, r2
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	3302      	adds	r3, #2
 8003ac0:	3230      	adds	r2, #48	; 0x30
 8003ac2:	b2d2      	uxtb	r2, r2
 8003ac4:	701a      	strb	r2, [r3, #0]
	number = number / 10 ;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	4a19      	ldr	r2, [pc, #100]	; (8003b30 <FloatToStringXXX_X+0xe8>)
 8003aca:	fba2 2303 	umull	r2, r3, r2, r3
 8003ace:	08db      	lsrs	r3, r3, #3
 8003ad0:	60fb      	str	r3, [r7, #12]
	buffer[1] = (char)(number % 10 + 48);
 8003ad2:	68f9      	ldr	r1, [r7, #12]
 8003ad4:	4b16      	ldr	r3, [pc, #88]	; (8003b30 <FloatToStringXXX_X+0xe8>)
 8003ad6:	fba3 2301 	umull	r2, r3, r3, r1
 8003ada:	08da      	lsrs	r2, r3, #3
 8003adc:	4613      	mov	r3, r2
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	4413      	add	r3, r2
 8003ae2:	005b      	lsls	r3, r3, #1
 8003ae4:	1aca      	subs	r2, r1, r3
 8003ae6:	b2d2      	uxtb	r2, r2
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	3301      	adds	r3, #1
 8003aec:	3230      	adds	r2, #48	; 0x30
 8003aee:	b2d2      	uxtb	r2, r2
 8003af0:	701a      	strb	r2, [r3, #0]
	number = number / 10 ;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	4a0e      	ldr	r2, [pc, #56]	; (8003b30 <FloatToStringXXX_X+0xe8>)
 8003af6:	fba2 2303 	umull	r2, r3, r2, r3
 8003afa:	08db      	lsrs	r3, r3, #3
 8003afc:	60fb      	str	r3, [r7, #12]
	buffer[0] = (char)(number % 10 + 48);
 8003afe:	68f9      	ldr	r1, [r7, #12]
 8003b00:	4b0b      	ldr	r3, [pc, #44]	; (8003b30 <FloatToStringXXX_X+0xe8>)
 8003b02:	fba3 2301 	umull	r2, r3, r3, r1
 8003b06:	08da      	lsrs	r2, r3, #3
 8003b08:	4613      	mov	r3, r2
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	4413      	add	r3, r2
 8003b0e:	005b      	lsls	r3, r3, #1
 8003b10:	1aca      	subs	r2, r1, r3
 8003b12:	b2d3      	uxtb	r3, r2
 8003b14:	3330      	adds	r3, #48	; 0x30
 8003b16:	b2da      	uxtb	r2, r3
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	701a      	strb	r2, [r3, #0]
	return;
 8003b1c:	bf00      	nop
}
 8003b1e:	3710      	adds	r7, #16
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	f3af 8000 	nop.w
 8003b28:	126e978d 	.word	0x126e978d
 8003b2c:	40240083 	.word	0x40240083
 8003b30:	cccccccd 	.word	0xcccccccd
 8003b34:	00000000 	.word	0x00000000

08003b38 <FloatToStringXXXX>:

void FloatToStringXXXX(double* value, uint8_t* buffer){
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	6039      	str	r1, [r7, #0]
	buffer[4] = ' ';
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	3304      	adds	r3, #4
 8003b46:	2220      	movs	r2, #32
 8003b48:	701a      	strb	r2, [r3, #0]
	uint32_t number = (*value) * 1.0001;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b50:	a331      	add	r3, pc, #196	; (adr r3, 8003c18 <FloatToStringXXXX+0xe0>)
 8003b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b56:	f7fc fcb7 	bl	80004c8 <__aeabi_dmul>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	4610      	mov	r0, r2
 8003b60:	4619      	mov	r1, r3
 8003b62:	f7fc ff73 	bl	8000a4c <__aeabi_d2uiz>
 8003b66:	4603      	mov	r3, r0
 8003b68:	60fb      	str	r3, [r7, #12]
	buffer[3] = (char)(number % 10 + 48);
 8003b6a:	68f9      	ldr	r1, [r7, #12]
 8003b6c:	4b2c      	ldr	r3, [pc, #176]	; (8003c20 <FloatToStringXXXX+0xe8>)
 8003b6e:	fba3 2301 	umull	r2, r3, r3, r1
 8003b72:	08da      	lsrs	r2, r3, #3
 8003b74:	4613      	mov	r3, r2
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	4413      	add	r3, r2
 8003b7a:	005b      	lsls	r3, r3, #1
 8003b7c:	1aca      	subs	r2, r1, r3
 8003b7e:	b2d2      	uxtb	r2, r2
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	3303      	adds	r3, #3
 8003b84:	3230      	adds	r2, #48	; 0x30
 8003b86:	b2d2      	uxtb	r2, r2
 8003b88:	701a      	strb	r2, [r3, #0]
	number = number / 10 ;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	4a24      	ldr	r2, [pc, #144]	; (8003c20 <FloatToStringXXXX+0xe8>)
 8003b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b92:	08db      	lsrs	r3, r3, #3
 8003b94:	60fb      	str	r3, [r7, #12]
	buffer[2] = (char)(number % 10 + 48);
 8003b96:	68f9      	ldr	r1, [r7, #12]
 8003b98:	4b21      	ldr	r3, [pc, #132]	; (8003c20 <FloatToStringXXXX+0xe8>)
 8003b9a:	fba3 2301 	umull	r2, r3, r3, r1
 8003b9e:	08da      	lsrs	r2, r3, #3
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	4413      	add	r3, r2
 8003ba6:	005b      	lsls	r3, r3, #1
 8003ba8:	1aca      	subs	r2, r1, r3
 8003baa:	b2d2      	uxtb	r2, r2
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	3302      	adds	r3, #2
 8003bb0:	3230      	adds	r2, #48	; 0x30
 8003bb2:	b2d2      	uxtb	r2, r2
 8003bb4:	701a      	strb	r2, [r3, #0]
	number = number / 10 ;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	4a19      	ldr	r2, [pc, #100]	; (8003c20 <FloatToStringXXXX+0xe8>)
 8003bba:	fba2 2303 	umull	r2, r3, r2, r3
 8003bbe:	08db      	lsrs	r3, r3, #3
 8003bc0:	60fb      	str	r3, [r7, #12]
	buffer[1] = (char)(number % 10 + 48);
 8003bc2:	68f9      	ldr	r1, [r7, #12]
 8003bc4:	4b16      	ldr	r3, [pc, #88]	; (8003c20 <FloatToStringXXXX+0xe8>)
 8003bc6:	fba3 2301 	umull	r2, r3, r3, r1
 8003bca:	08da      	lsrs	r2, r3, #3
 8003bcc:	4613      	mov	r3, r2
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	4413      	add	r3, r2
 8003bd2:	005b      	lsls	r3, r3, #1
 8003bd4:	1aca      	subs	r2, r1, r3
 8003bd6:	b2d2      	uxtb	r2, r2
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	3301      	adds	r3, #1
 8003bdc:	3230      	adds	r2, #48	; 0x30
 8003bde:	b2d2      	uxtb	r2, r2
 8003be0:	701a      	strb	r2, [r3, #0]
	number = number / 10 ;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	4a0e      	ldr	r2, [pc, #56]	; (8003c20 <FloatToStringXXXX+0xe8>)
 8003be6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bea:	08db      	lsrs	r3, r3, #3
 8003bec:	60fb      	str	r3, [r7, #12]
	buffer[0] = (char)(number % 10 + 48);
 8003bee:	68f9      	ldr	r1, [r7, #12]
 8003bf0:	4b0b      	ldr	r3, [pc, #44]	; (8003c20 <FloatToStringXXXX+0xe8>)
 8003bf2:	fba3 2301 	umull	r2, r3, r3, r1
 8003bf6:	08da      	lsrs	r2, r3, #3
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	4413      	add	r3, r2
 8003bfe:	005b      	lsls	r3, r3, #1
 8003c00:	1aca      	subs	r2, r1, r3
 8003c02:	b2d3      	uxtb	r3, r2
 8003c04:	3330      	adds	r3, #48	; 0x30
 8003c06:	b2da      	uxtb	r2, r3
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	701a      	strb	r2, [r3, #0]
	return;
 8003c0c:	bf00      	nop

}
 8003c0e:	3710      	adds	r7, #16
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	f3af 8000 	nop.w
 8003c18:	db8bac71 	.word	0xdb8bac71
 8003c1c:	3ff00068 	.word	0x3ff00068
 8003c20:	cccccccd 	.word	0xcccccccd
 8003c24:	00000000 	.word	0x00000000

08003c28 <FloatToStringXXXXX>:

void FloatToStringXXXXX(double* value, uint8_t* buffer){
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
	uint32_t number = (*value) * 1.000001;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003c38:	a33b      	add	r3, pc, #236	; (adr r3, 8003d28 <FloatToStringXXXXX+0x100>)
 8003c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c3e:	f7fc fc43 	bl	80004c8 <__aeabi_dmul>
 8003c42:	4602      	mov	r2, r0
 8003c44:	460b      	mov	r3, r1
 8003c46:	4610      	mov	r0, r2
 8003c48:	4619      	mov	r1, r3
 8003c4a:	f7fc feff 	bl	8000a4c <__aeabi_d2uiz>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	60fb      	str	r3, [r7, #12]
	buffer[4] = (char)(number % 10 + 48);
 8003c52:	68f9      	ldr	r1, [r7, #12]
 8003c54:	4b36      	ldr	r3, [pc, #216]	; (8003d30 <FloatToStringXXXXX+0x108>)
 8003c56:	fba3 2301 	umull	r2, r3, r3, r1
 8003c5a:	08da      	lsrs	r2, r3, #3
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	4413      	add	r3, r2
 8003c62:	005b      	lsls	r3, r3, #1
 8003c64:	1aca      	subs	r2, r1, r3
 8003c66:	b2d2      	uxtb	r2, r2
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	3304      	adds	r3, #4
 8003c6c:	3230      	adds	r2, #48	; 0x30
 8003c6e:	b2d2      	uxtb	r2, r2
 8003c70:	701a      	strb	r2, [r3, #0]
	number = number / 10 ;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	4a2e      	ldr	r2, [pc, #184]	; (8003d30 <FloatToStringXXXXX+0x108>)
 8003c76:	fba2 2303 	umull	r2, r3, r2, r3
 8003c7a:	08db      	lsrs	r3, r3, #3
 8003c7c:	60fb      	str	r3, [r7, #12]
	buffer[3] = (char)(number % 10 + 48);
 8003c7e:	68f9      	ldr	r1, [r7, #12]
 8003c80:	4b2b      	ldr	r3, [pc, #172]	; (8003d30 <FloatToStringXXXXX+0x108>)
 8003c82:	fba3 2301 	umull	r2, r3, r3, r1
 8003c86:	08da      	lsrs	r2, r3, #3
 8003c88:	4613      	mov	r3, r2
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	4413      	add	r3, r2
 8003c8e:	005b      	lsls	r3, r3, #1
 8003c90:	1aca      	subs	r2, r1, r3
 8003c92:	b2d2      	uxtb	r2, r2
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	3303      	adds	r3, #3
 8003c98:	3230      	adds	r2, #48	; 0x30
 8003c9a:	b2d2      	uxtb	r2, r2
 8003c9c:	701a      	strb	r2, [r3, #0]
	number = number / 10 ;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	4a23      	ldr	r2, [pc, #140]	; (8003d30 <FloatToStringXXXXX+0x108>)
 8003ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca6:	08db      	lsrs	r3, r3, #3
 8003ca8:	60fb      	str	r3, [r7, #12]
	buffer[2] = (char)(number % 10 + 48);
 8003caa:	68f9      	ldr	r1, [r7, #12]
 8003cac:	4b20      	ldr	r3, [pc, #128]	; (8003d30 <FloatToStringXXXXX+0x108>)
 8003cae:	fba3 2301 	umull	r2, r3, r3, r1
 8003cb2:	08da      	lsrs	r2, r3, #3
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	4413      	add	r3, r2
 8003cba:	005b      	lsls	r3, r3, #1
 8003cbc:	1aca      	subs	r2, r1, r3
 8003cbe:	b2d2      	uxtb	r2, r2
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	3302      	adds	r3, #2
 8003cc4:	3230      	adds	r2, #48	; 0x30
 8003cc6:	b2d2      	uxtb	r2, r2
 8003cc8:	701a      	strb	r2, [r3, #0]
	number = number / 10 ;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	4a18      	ldr	r2, [pc, #96]	; (8003d30 <FloatToStringXXXXX+0x108>)
 8003cce:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd2:	08db      	lsrs	r3, r3, #3
 8003cd4:	60fb      	str	r3, [r7, #12]
	buffer[1] = (char)(number % 10 + 48);
 8003cd6:	68f9      	ldr	r1, [r7, #12]
 8003cd8:	4b15      	ldr	r3, [pc, #84]	; (8003d30 <FloatToStringXXXXX+0x108>)
 8003cda:	fba3 2301 	umull	r2, r3, r3, r1
 8003cde:	08da      	lsrs	r2, r3, #3
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	4413      	add	r3, r2
 8003ce6:	005b      	lsls	r3, r3, #1
 8003ce8:	1aca      	subs	r2, r1, r3
 8003cea:	b2d2      	uxtb	r2, r2
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	3301      	adds	r3, #1
 8003cf0:	3230      	adds	r2, #48	; 0x30
 8003cf2:	b2d2      	uxtb	r2, r2
 8003cf4:	701a      	strb	r2, [r3, #0]
	number = number / 10 ;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	4a0d      	ldr	r2, [pc, #52]	; (8003d30 <FloatToStringXXXXX+0x108>)
 8003cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8003cfe:	08db      	lsrs	r3, r3, #3
 8003d00:	60fb      	str	r3, [r7, #12]
	buffer[0] = (char)(number % 10 + 48);
 8003d02:	68f9      	ldr	r1, [r7, #12]
 8003d04:	4b0a      	ldr	r3, [pc, #40]	; (8003d30 <FloatToStringXXXXX+0x108>)
 8003d06:	fba3 2301 	umull	r2, r3, r3, r1
 8003d0a:	08da      	lsrs	r2, r3, #3
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	4413      	add	r3, r2
 8003d12:	005b      	lsls	r3, r3, #1
 8003d14:	1aca      	subs	r2, r1, r3
 8003d16:	b2d3      	uxtb	r3, r2
 8003d18:	3330      	adds	r3, #48	; 0x30
 8003d1a:	b2da      	uxtb	r2, r3
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	701a      	strb	r2, [r3, #0]
	return;
 8003d20:	bf00      	nop

}
 8003d22:	3710      	adds	r7, #16
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	0c6f7a0b 	.word	0x0c6f7a0b
 8003d2c:	3ff00001 	.word	0x3ff00001
 8003d30:	cccccccd 	.word	0xcccccccd
 8003d34:	00000000 	.word	0x00000000

08003d38 <lkv_lcd_float_to_string>:



void lkv_lcd_float_to_string(double* value, uint8_t* buffer){
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]

	if(*value < 10){
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003d48:	f04f 0200 	mov.w	r2, #0
 8003d4c:	4b22      	ldr	r3, [pc, #136]	; (8003dd8 <lkv_lcd_float_to_string+0xa0>)
 8003d4e:	f7fc fe2d 	bl	80009ac <__aeabi_dcmplt>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d004      	beq.n	8003d62 <lkv_lcd_float_to_string+0x2a>

		return FloatToStringX_XXX(value, buffer);
 8003d58:	6839      	ldr	r1, [r7, #0]
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f7ff fd84 	bl	8003868 <FloatToStringX_XXX>
 8003d60:	e033      	b.n	8003dca <lkv_lcd_float_to_string+0x92>

	}else if(*value < 100){
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003d68:	f04f 0200 	mov.w	r2, #0
 8003d6c:	4b1b      	ldr	r3, [pc, #108]	; (8003ddc <lkv_lcd_float_to_string+0xa4>)
 8003d6e:	f7fc fe1d 	bl	80009ac <__aeabi_dcmplt>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d004      	beq.n	8003d82 <lkv_lcd_float_to_string+0x4a>

		return FloatToStringXX_XX(value, buffer);
 8003d78:	6839      	ldr	r1, [r7, #0]
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f7ff fdec 	bl	8003958 <FloatToStringXX_XX>
 8003d80:	e023      	b.n	8003dca <lkv_lcd_float_to_string+0x92>

	}else if(*value < 1000){
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003d88:	f04f 0200 	mov.w	r2, #0
 8003d8c:	4b14      	ldr	r3, [pc, #80]	; (8003de0 <lkv_lcd_float_to_string+0xa8>)
 8003d8e:	f7fc fe0d 	bl	80009ac <__aeabi_dcmplt>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d004      	beq.n	8003da2 <lkv_lcd_float_to_string+0x6a>

		return FloatToStringXXX_X(value, buffer);
 8003d98:	6839      	ldr	r1, [r7, #0]
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f7ff fe54 	bl	8003a48 <FloatToStringXXX_X>
 8003da0:	e013      	b.n	8003dca <lkv_lcd_float_to_string+0x92>

	}else if(*value < 10000){
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003da8:	a309      	add	r3, pc, #36	; (adr r3, 8003dd0 <lkv_lcd_float_to_string+0x98>)
 8003daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dae:	f7fc fdfd 	bl	80009ac <__aeabi_dcmplt>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d004      	beq.n	8003dc2 <lkv_lcd_float_to_string+0x8a>

		return FloatToStringXXXX(value, buffer);
 8003db8:	6839      	ldr	r1, [r7, #0]
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f7ff febc 	bl	8003b38 <FloatToStringXXXX>
 8003dc0:	e003      	b.n	8003dca <lkv_lcd_float_to_string+0x92>

	}else {

		return FloatToStringXXXXX(value, buffer);
 8003dc2:	6839      	ldr	r1, [r7, #0]
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f7ff ff2f 	bl	8003c28 <FloatToStringXXXXX>
	}
}
 8003dca:	3708      	adds	r7, #8
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	00000000 	.word	0x00000000
 8003dd4:	40c38800 	.word	0x40c38800
 8003dd8:	40240000 	.word	0x40240000
 8003ddc:	40590000 	.word	0x40590000
 8003de0:	408f4000 	.word	0x408f4000

08003de4 <SystemClock_Config>:


void SystemClock_Config(void)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b094      	sub	sp, #80	; 0x50
 8003de8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003dea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003dee:	2228      	movs	r2, #40	; 0x28
 8003df0:	2100      	movs	r1, #0
 8003df2:	4618      	mov	r0, r3
 8003df4:	f000 fb16 	bl	8004424 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003df8:	f107 0314 	add.w	r3, r7, #20
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	601a      	str	r2, [r3, #0]
 8003e00:	605a      	str	r2, [r3, #4]
 8003e02:	609a      	str	r2, [r3, #8]
 8003e04:	60da      	str	r2, [r3, #12]
 8003e06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003e08:	1d3b      	adds	r3, r7, #4
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	601a      	str	r2, [r3, #0]
 8003e0e:	605a      	str	r2, [r3, #4]
 8003e10:	609a      	str	r2, [r3, #8]
 8003e12:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003e14:	2301      	movs	r3, #1
 8003e16:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003e18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003e22:	2301      	movs	r3, #1
 8003e24:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003e26:	2302      	movs	r3, #2
 8003e28:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003e2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e2e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003e30:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8003e34:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003e36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f7fe fb6e 	bl	800251c <HAL_RCC_OscConfig>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d001      	beq.n	8003e4a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8003e46:	f000 f8c5 	bl	8003fd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003e4a:	230f      	movs	r3, #15
 8003e4c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003e4e:	2302      	movs	r3, #2
 8003e50:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003e52:	2300      	movs	r3, #0
 8003e54:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003e56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e5a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003e60:	f107 0314 	add.w	r3, r7, #20
 8003e64:	2102      	movs	r1, #2
 8003e66:	4618      	mov	r0, r3
 8003e68:	f7fe fdda 	bl	8002a20 <HAL_RCC_ClockConfig>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d001      	beq.n	8003e76 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8003e72:	f000 f8af 	bl	8003fd4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003e76:	2302      	movs	r3, #2
 8003e78:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8003e7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e7e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003e80:	1d3b      	adds	r3, r7, #4
 8003e82:	4618      	mov	r0, r3
 8003e84:	f7fe ff5a 	bl	8002d3c <HAL_RCCEx_PeriphCLKConfig>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d001      	beq.n	8003e92 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8003e8e:	f000 f8a1 	bl	8003fd4 <Error_Handler>
  }
}
 8003e92:	bf00      	nop
 8003e94:	3750      	adds	r7, #80	; 0x50
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
	...

08003e9c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003ea2:	1d3b      	adds	r3, r7, #4
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	601a      	str	r2, [r3, #0]
 8003ea8:	605a      	str	r2, [r3, #4]
 8003eaa:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8003eac:	4b27      	ldr	r3, [pc, #156]	; (8003f4c <MX_ADC1_Init+0xb0>)
 8003eae:	4a28      	ldr	r2, [pc, #160]	; (8003f50 <MX_ADC1_Init+0xb4>)
 8003eb0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003eb2:	4b26      	ldr	r3, [pc, #152]	; (8003f4c <MX_ADC1_Init+0xb0>)
 8003eb4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003eb8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003eba:	4b24      	ldr	r3, [pc, #144]	; (8003f4c <MX_ADC1_Init+0xb0>)
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003ec0:	4b22      	ldr	r3, [pc, #136]	; (8003f4c <MX_ADC1_Init+0xb0>)
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003ec6:	4b21      	ldr	r3, [pc, #132]	; (8003f4c <MX_ADC1_Init+0xb0>)
 8003ec8:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8003ecc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003ece:	4b1f      	ldr	r3, [pc, #124]	; (8003f4c <MX_ADC1_Init+0xb0>)
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8003ed4:	4b1d      	ldr	r3, [pc, #116]	; (8003f4c <MX_ADC1_Init+0xb0>)
 8003ed6:	2203      	movs	r2, #3
 8003ed8:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003eda:	481c      	ldr	r0, [pc, #112]	; (8003f4c <MX_ADC1_Init+0xb0>)
 8003edc:	f7fd f98a 	bl	80011f4 <HAL_ADC_Init>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d001      	beq.n	8003eea <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8003ee6:	f000 f875 	bl	8003fd4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003eea:	2300      	movs	r3, #0
 8003eec:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8003ef2:	2307      	movs	r3, #7
 8003ef4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003ef6:	1d3b      	adds	r3, r7, #4
 8003ef8:	4619      	mov	r1, r3
 8003efa:	4814      	ldr	r0, [pc, #80]	; (8003f4c <MX_ADC1_Init+0xb0>)
 8003efc:	f7fd fc14 	bl	8001728 <HAL_ADC_ConfigChannel>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d001      	beq.n	8003f0a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8003f06:	f000 f865 	bl	8003fd4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003f0e:	2302      	movs	r3, #2
 8003f10:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003f12:	1d3b      	adds	r3, r7, #4
 8003f14:	4619      	mov	r1, r3
 8003f16:	480d      	ldr	r0, [pc, #52]	; (8003f4c <MX_ADC1_Init+0xb0>)
 8003f18:	f7fd fc06 	bl	8001728 <HAL_ADC_ConfigChannel>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d001      	beq.n	8003f26 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8003f22:	f000 f857 	bl	8003fd4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8003f26:	2302      	movs	r3, #2
 8003f28:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003f2e:	1d3b      	adds	r3, r7, #4
 8003f30:	4619      	mov	r1, r3
 8003f32:	4806      	ldr	r0, [pc, #24]	; (8003f4c <MX_ADC1_Init+0xb0>)
 8003f34:	f7fd fbf8 	bl	8001728 <HAL_ADC_ConfigChannel>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d001      	beq.n	8003f42 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8003f3e:	f000 f849 	bl	8003fd4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003f42:	bf00      	nop
 8003f44:	3710      	adds	r7, #16
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	20000118 	.word	0x20000118
 8003f50:	40012400 	.word	0x40012400

08003f54 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003f5a:	4b0c      	ldr	r3, [pc, #48]	; (8003f8c <MX_DMA_Init+0x38>)
 8003f5c:	695b      	ldr	r3, [r3, #20]
 8003f5e:	4a0b      	ldr	r2, [pc, #44]	; (8003f8c <MX_DMA_Init+0x38>)
 8003f60:	f043 0301 	orr.w	r3, r3, #1
 8003f64:	6153      	str	r3, [r2, #20]
 8003f66:	4b09      	ldr	r3, [pc, #36]	; (8003f8c <MX_DMA_Init+0x38>)
 8003f68:	695b      	ldr	r3, [r3, #20]
 8003f6a:	f003 0301 	and.w	r3, r3, #1
 8003f6e:	607b      	str	r3, [r7, #4]
 8003f70:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003f72:	2200      	movs	r2, #0
 8003f74:	2100      	movs	r1, #0
 8003f76:	200b      	movs	r0, #11
 8003f78:	f7fd feaf 	bl	8001cda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003f7c:	200b      	movs	r0, #11
 8003f7e:	f7fd fec8 	bl	8001d12 <HAL_NVIC_EnableIRQ>

}
 8003f82:	bf00      	nop
 8003f84:	3708      	adds	r7, #8
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	40021000 	.word	0x40021000

08003f90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f96:	4b0e      	ldr	r3, [pc, #56]	; (8003fd0 <MX_GPIO_Init+0x40>)
 8003f98:	699b      	ldr	r3, [r3, #24]
 8003f9a:	4a0d      	ldr	r2, [pc, #52]	; (8003fd0 <MX_GPIO_Init+0x40>)
 8003f9c:	f043 0320 	orr.w	r3, r3, #32
 8003fa0:	6193      	str	r3, [r2, #24]
 8003fa2:	4b0b      	ldr	r3, [pc, #44]	; (8003fd0 <MX_GPIO_Init+0x40>)
 8003fa4:	699b      	ldr	r3, [r3, #24]
 8003fa6:	f003 0320 	and.w	r3, r3, #32
 8003faa:	607b      	str	r3, [r7, #4]
 8003fac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fae:	4b08      	ldr	r3, [pc, #32]	; (8003fd0 <MX_GPIO_Init+0x40>)
 8003fb0:	699b      	ldr	r3, [r3, #24]
 8003fb2:	4a07      	ldr	r2, [pc, #28]	; (8003fd0 <MX_GPIO_Init+0x40>)
 8003fb4:	f043 0304 	orr.w	r3, r3, #4
 8003fb8:	6193      	str	r3, [r2, #24]
 8003fba:	4b05      	ldr	r3, [pc, #20]	; (8003fd0 <MX_GPIO_Init+0x40>)
 8003fbc:	699b      	ldr	r3, [r3, #24]
 8003fbe:	f003 0304 	and.w	r3, r3, #4
 8003fc2:	603b      	str	r3, [r7, #0]
 8003fc4:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003fc6:	bf00      	nop
 8003fc8:	370c      	adds	r7, #12
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bc80      	pop	{r7}
 8003fce:	4770      	bx	lr
 8003fd0:	40021000 	.word	0x40021000

08003fd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003fd8:	b672      	cpsid	i
}
 8003fda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003fdc:	e7fe      	b.n	8003fdc <Error_Handler+0x8>

08003fde <main>:
void adc_value_to_3_axist(uint16_t* _adcValue, double* _axistValue, uint8_t _numberValue);
void caculate_shaking_value(double* _old_axist_value, double* _new_axist_value, double* _shaking_value);
void build_tx_data(uint8_t* _tx_buff, double* _shaking_value);

int main(void)
{
 8003fde:	b580      	push	{r7, lr}
 8003fe0:	af00      	add	r7, sp, #0
	board_init();
 8003fe2:	f7ff fc25 	bl	8003830 <board_init>
  while (1)
 8003fe6:	e7fe      	b.n	8003fe6 <main+0x8>

08003fe8 <SysTick_Handler>:
  }
}


void SysTick_Handler(void)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8003fec:	f7fd f8e6 	bl	80011bc <HAL_IncTick>
  g_sys_time++;
 8003ff0:	4b13      	ldr	r3, [pc, #76]	; (8004040 <SysTick_Handler+0x58>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	3301      	adds	r3, #1
 8003ff6:	4a12      	ldr	r2, [pc, #72]	; (8004040 <SysTick_Handler+0x58>)
 8003ff8:	6013      	str	r3, [r2, #0]
  if(g_sys_time % SCAN_ADC_RATE == 0){
 8003ffa:	4b11      	ldr	r3, [pc, #68]	; (8004040 <SysTick_Handler+0x58>)
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	4b11      	ldr	r3, [pc, #68]	; (8004044 <SysTick_Handler+0x5c>)
 8004000:	fba3 1302 	umull	r1, r3, r3, r2
 8004004:	095b      	lsrs	r3, r3, #5
 8004006:	2164      	movs	r1, #100	; 0x64
 8004008:	fb01 f303 	mul.w	r3, r1, r3
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	2b00      	cmp	r3, #0
 8004010:	d113      	bne.n	800403a <SysTick_Handler+0x52>
	  adc_value_to_3_axist(sensor_value, axit_value, 3);
 8004012:	2203      	movs	r2, #3
 8004014:	490c      	ldr	r1, [pc, #48]	; (8004048 <SysTick_Handler+0x60>)
 8004016:	480d      	ldr	r0, [pc, #52]	; (800404c <SysTick_Handler+0x64>)
 8004018:	f000 f824 	bl	8004064 <adc_value_to_3_axist>
	  caculate_shaking_value(old_axist_value, new_axist_value, shaking_value);
 800401c:	4a0c      	ldr	r2, [pc, #48]	; (8004050 <SysTick_Handler+0x68>)
 800401e:	490d      	ldr	r1, [pc, #52]	; (8004054 <SysTick_Handler+0x6c>)
 8004020:	480d      	ldr	r0, [pc, #52]	; (8004058 <SysTick_Handler+0x70>)
 8004022:	f000 f87d 	bl	8004120 <caculate_shaking_value>
	  build_tx_data(tx_buff, shaking_value);
 8004026:	490a      	ldr	r1, [pc, #40]	; (8004050 <SysTick_Handler+0x68>)
 8004028:	480c      	ldr	r0, [pc, #48]	; (800405c <SysTick_Handler+0x74>)
 800402a:	f000 f99f 	bl	800436c <build_tx_data>
	  HAL_UART_Transmit(&rs485_com.uart_module, tx_buff, 26, 100);
 800402e:	2364      	movs	r3, #100	; 0x64
 8004030:	221a      	movs	r2, #26
 8004032:	490a      	ldr	r1, [pc, #40]	; (800405c <SysTick_Handler+0x74>)
 8004034:	480a      	ldr	r0, [pc, #40]	; (8004060 <SysTick_Handler+0x78>)
 8004036:	f7fe ff84 	bl	8002f42 <HAL_UART_Transmit>
  }
}
 800403a:	bf00      	nop
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	200001b0 	.word	0x200001b0
 8004044:	51eb851f 	.word	0x51eb851f
 8004048:	20000198 	.word	0x20000198
 800404c:	2000018c 	.word	0x2000018c
 8004050:	20000100 	.word	0x20000100
 8004054:	200000d0 	.word	0x200000d0
 8004058:	200000e8 	.word	0x200000e8
 800405c:	200001b4 	.word	0x200001b4
 8004060:	20000048 	.word	0x20000048

08004064 <adc_value_to_3_axist>:



void adc_value_to_3_axist(uint16_t* _adcValue, double* _axistValue, uint8_t _numberValue){
 8004064:	b590      	push	{r4, r7, lr}
 8004066:	b087      	sub	sp, #28
 8004068:	af00      	add	r7, sp, #0
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	60b9      	str	r1, [r7, #8]
 800406e:	4613      	mov	r3, r2
 8004070:	71fb      	strb	r3, [r7, #7]
	for(int i = 0; i < _numberValue; i ++){
 8004072:	2300      	movs	r3, #0
 8004074:	617b      	str	r3, [r7, #20]
 8004076:	e03f      	b.n	80040f8 <adc_value_to_3_axist+0x94>
		_axistValue[i] = (float)((int)_adcValue[i] - axist_balance_value[i])/400*90;
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	005b      	lsls	r3, r3, #1
 800407c:	68fa      	ldr	r2, [r7, #12]
 800407e:	4413      	add	r3, r2
 8004080:	881b      	ldrh	r3, [r3, #0]
 8004082:	4619      	mov	r1, r3
 8004084:	4a21      	ldr	r2, [pc, #132]	; (800410c <adc_value_to_3_axist+0xa8>)
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800408c:	1acb      	subs	r3, r1, r3
 800408e:	4618      	mov	r0, r3
 8004090:	f7fc fdb6 	bl	8000c00 <__aeabi_i2f>
 8004094:	4603      	mov	r3, r0
 8004096:	491e      	ldr	r1, [pc, #120]	; (8004110 <adc_value_to_3_axist+0xac>)
 8004098:	4618      	mov	r0, r3
 800409a:	f7fc feb9 	bl	8000e10 <__aeabi_fdiv>
 800409e:	4603      	mov	r3, r0
 80040a0:	491c      	ldr	r1, [pc, #112]	; (8004114 <adc_value_to_3_axist+0xb0>)
 80040a2:	4618      	mov	r0, r3
 80040a4:	f7fc fe00 	bl	8000ca8 <__aeabi_fmul>
 80040a8:	4603      	mov	r3, r0
 80040aa:	4619      	mov	r1, r3
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	00db      	lsls	r3, r3, #3
 80040b0:	68ba      	ldr	r2, [r7, #8]
 80040b2:	18d4      	adds	r4, r2, r3
 80040b4:	4608      	mov	r0, r1
 80040b6:	f7fc f9af 	bl	8000418 <__aeabi_f2d>
 80040ba:	4602      	mov	r2, r0
 80040bc:	460b      	mov	r3, r1
 80040be:	e9c4 2300 	strd	r2, r3, [r4]
		old_axist_value[i] = new_axist_value[i];
 80040c2:	4a15      	ldr	r2, [pc, #84]	; (8004118 <adc_value_to_3_axist+0xb4>)
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	00db      	lsls	r3, r3, #3
 80040c8:	4413      	add	r3, r2
 80040ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ce:	4813      	ldr	r0, [pc, #76]	; (800411c <adc_value_to_3_axist+0xb8>)
 80040d0:	6979      	ldr	r1, [r7, #20]
 80040d2:	00c9      	lsls	r1, r1, #3
 80040d4:	4401      	add	r1, r0
 80040d6:	e9c1 2300 	strd	r2, r3, [r1]
		new_axist_value[i] = _axistValue[i];
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	00db      	lsls	r3, r3, #3
 80040de:	68ba      	ldr	r2, [r7, #8]
 80040e0:	4413      	add	r3, r2
 80040e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040e6:	480c      	ldr	r0, [pc, #48]	; (8004118 <adc_value_to_3_axist+0xb4>)
 80040e8:	6979      	ldr	r1, [r7, #20]
 80040ea:	00c9      	lsls	r1, r1, #3
 80040ec:	4401      	add	r1, r0
 80040ee:	e9c1 2300 	strd	r2, r3, [r1]
	for(int i = 0; i < _numberValue; i ++){
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	3301      	adds	r3, #1
 80040f6:	617b      	str	r3, [r7, #20]
 80040f8:	79fb      	ldrb	r3, [r7, #7]
 80040fa:	697a      	ldr	r2, [r7, #20]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	dbbb      	blt.n	8004078 <adc_value_to_3_axist+0x14>
	}
}
 8004100:	bf00      	nop
 8004102:	bf00      	nop
 8004104:	371c      	adds	r7, #28
 8004106:	46bd      	mov	sp, r7
 8004108:	bd90      	pop	{r4, r7, pc}
 800410a:	bf00      	nop
 800410c:	20000018 	.word	0x20000018
 8004110:	43c80000 	.word	0x43c80000
 8004114:	42b40000 	.word	0x42b40000
 8004118:	200000d0 	.word	0x200000d0
 800411c:	200000e8 	.word	0x200000e8

08004120 <caculate_shaking_value>:

void caculate_shaking_value(double* _old_axist_value, double* _new_axist_value, double* _shaking_value){
 8004120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004124:	b08b      	sub	sp, #44	; 0x2c
 8004126:	af00      	add	r7, sp, #0
 8004128:	60f8      	str	r0, [r7, #12]
 800412a:	60b9      	str	r1, [r7, #8]
 800412c:	607a      	str	r2, [r7, #4]
	for(int i = 0; i < 3; i++){
 800412e:	2300      	movs	r3, #0
 8004130:	627b      	str	r3, [r7, #36]	; 0x24
 8004132:	e103      	b.n	800433c <caculate_shaking_value+0x21c>

		double new_angle;
		double old_angle;

		if(i == 2){
 8004134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004136:	2b02      	cmp	r3, #2
 8004138:	d142      	bne.n	80041c0 <caculate_shaking_value+0xa0>
			 new_angle = (_new_axist_value[i] - 90)*PI/ 180;
 800413a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413c:	00db      	lsls	r3, r3, #3
 800413e:	68ba      	ldr	r2, [r7, #8]
 8004140:	4413      	add	r3, r2
 8004142:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004146:	f04f 0200 	mov.w	r2, #0
 800414a:	4b83      	ldr	r3, [pc, #524]	; (8004358 <caculate_shaking_value+0x238>)
 800414c:	f7fc f804 	bl	8000158 <__aeabi_dsub>
 8004150:	4602      	mov	r2, r0
 8004152:	460b      	mov	r3, r1
 8004154:	4610      	mov	r0, r2
 8004156:	4619      	mov	r1, r3
 8004158:	a37d      	add	r3, pc, #500	; (adr r3, 8004350 <caculate_shaking_value+0x230>)
 800415a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800415e:	f7fc f9b3 	bl	80004c8 <__aeabi_dmul>
 8004162:	4602      	mov	r2, r0
 8004164:	460b      	mov	r3, r1
 8004166:	4610      	mov	r0, r2
 8004168:	4619      	mov	r1, r3
 800416a:	f04f 0200 	mov.w	r2, #0
 800416e:	4b7b      	ldr	r3, [pc, #492]	; (800435c <caculate_shaking_value+0x23c>)
 8004170:	f7fc fad4 	bl	800071c <__aeabi_ddiv>
 8004174:	4602      	mov	r2, r0
 8004176:	460b      	mov	r3, r1
 8004178:	e9c7 2306 	strd	r2, r3, [r7, #24]
		 	 old_angle = (old_axist_value[i] - 90)*PI/ 180;
 800417c:	4a78      	ldr	r2, [pc, #480]	; (8004360 <caculate_shaking_value+0x240>)
 800417e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004180:	00db      	lsls	r3, r3, #3
 8004182:	4413      	add	r3, r2
 8004184:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004188:	f04f 0200 	mov.w	r2, #0
 800418c:	4b72      	ldr	r3, [pc, #456]	; (8004358 <caculate_shaking_value+0x238>)
 800418e:	f7fb ffe3 	bl	8000158 <__aeabi_dsub>
 8004192:	4602      	mov	r2, r0
 8004194:	460b      	mov	r3, r1
 8004196:	4610      	mov	r0, r2
 8004198:	4619      	mov	r1, r3
 800419a:	a36d      	add	r3, pc, #436	; (adr r3, 8004350 <caculate_shaking_value+0x230>)
 800419c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041a0:	f7fc f992 	bl	80004c8 <__aeabi_dmul>
 80041a4:	4602      	mov	r2, r0
 80041a6:	460b      	mov	r3, r1
 80041a8:	4610      	mov	r0, r2
 80041aa:	4619      	mov	r1, r3
 80041ac:	f04f 0200 	mov.w	r2, #0
 80041b0:	4b6a      	ldr	r3, [pc, #424]	; (800435c <caculate_shaking_value+0x23c>)
 80041b2:	f7fc fab3 	bl	800071c <__aeabi_ddiv>
 80041b6:	4602      	mov	r2, r0
 80041b8:	460b      	mov	r3, r1
 80041ba:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80041be:	e02f      	b.n	8004220 <caculate_shaking_value+0x100>
		}else{
			 new_angle = _new_axist_value[i]*PI/ 180;
 80041c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c2:	00db      	lsls	r3, r3, #3
 80041c4:	68ba      	ldr	r2, [r7, #8]
 80041c6:	4413      	add	r3, r2
 80041c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80041cc:	a360      	add	r3, pc, #384	; (adr r3, 8004350 <caculate_shaking_value+0x230>)
 80041ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d2:	f7fc f979 	bl	80004c8 <__aeabi_dmul>
 80041d6:	4602      	mov	r2, r0
 80041d8:	460b      	mov	r3, r1
 80041da:	4610      	mov	r0, r2
 80041dc:	4619      	mov	r1, r3
 80041de:	f04f 0200 	mov.w	r2, #0
 80041e2:	4b5e      	ldr	r3, [pc, #376]	; (800435c <caculate_shaking_value+0x23c>)
 80041e4:	f7fc fa9a 	bl	800071c <__aeabi_ddiv>
 80041e8:	4602      	mov	r2, r0
 80041ea:	460b      	mov	r3, r1
 80041ec:	e9c7 2306 	strd	r2, r3, [r7, #24]
			 old_angle = old_axist_value[i]*PI/ 180;
 80041f0:	4a5b      	ldr	r2, [pc, #364]	; (8004360 <caculate_shaking_value+0x240>)
 80041f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f4:	00db      	lsls	r3, r3, #3
 80041f6:	4413      	add	r3, r2
 80041f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80041fc:	a354      	add	r3, pc, #336	; (adr r3, 8004350 <caculate_shaking_value+0x230>)
 80041fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004202:	f7fc f961 	bl	80004c8 <__aeabi_dmul>
 8004206:	4602      	mov	r2, r0
 8004208:	460b      	mov	r3, r1
 800420a:	4610      	mov	r0, r2
 800420c:	4619      	mov	r1, r3
 800420e:	f04f 0200 	mov.w	r2, #0
 8004212:	4b52      	ldr	r3, [pc, #328]	; (800435c <caculate_shaking_value+0x23c>)
 8004214:	f7fc fa82 	bl	800071c <__aeabi_ddiv>
 8004218:	4602      	mov	r2, r0
 800421a:	460b      	mov	r3, r1
 800421c:	e9c7 2304 	strd	r2, r3, [r7, #16]
		}



		if((_new_axist_value[i]*old_axist_value[i]) >= 0){
 8004220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004222:	00db      	lsls	r3, r3, #3
 8004224:	68ba      	ldr	r2, [r7, #8]
 8004226:	4413      	add	r3, r2
 8004228:	e9d3 0100 	ldrd	r0, r1, [r3]
 800422c:	4a4c      	ldr	r2, [pc, #304]	; (8004360 <caculate_shaking_value+0x240>)
 800422e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004230:	00db      	lsls	r3, r3, #3
 8004232:	4413      	add	r3, r2
 8004234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004238:	f7fc f946 	bl	80004c8 <__aeabi_dmul>
 800423c:	4602      	mov	r2, r0
 800423e:	460b      	mov	r3, r1
 8004240:	4610      	mov	r0, r2
 8004242:	4619      	mov	r1, r3
 8004244:	f04f 0200 	mov.w	r2, #0
 8004248:	f04f 0300 	mov.w	r3, #0
 800424c:	f7fc fbc2 	bl	80009d4 <__aeabi_dcmpge>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d035      	beq.n	80042c2 <caculate_shaking_value+0x1a2>

			_shaking_value[i] = three_axist_motor_lengh[i]*fabs(cos(new_angle) - cos(old_angle)) / SCAN_ADC_RATE ;
 8004256:	4a43      	ldr	r2, [pc, #268]	; (8004364 <caculate_shaking_value+0x244>)
 8004258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800425e:	4618      	mov	r0, r3
 8004260:	f7fc f8b8 	bl	80003d4 <__aeabi_ui2d>
 8004264:	4680      	mov	r8, r0
 8004266:	4689      	mov	r9, r1
 8004268:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800426c:	f000 f906 	bl	800447c <cos>
 8004270:	4682      	mov	sl, r0
 8004272:	468b      	mov	fp, r1
 8004274:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004278:	f000 f900 	bl	800447c <cos>
 800427c:	4602      	mov	r2, r0
 800427e:	460b      	mov	r3, r1
 8004280:	4650      	mov	r0, sl
 8004282:	4659      	mov	r1, fp
 8004284:	f7fb ff68 	bl	8000158 <__aeabi_dsub>
 8004288:	4602      	mov	r2, r0
 800428a:	460b      	mov	r3, r1
 800428c:	4614      	mov	r4, r2
 800428e:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8004292:	4622      	mov	r2, r4
 8004294:	462b      	mov	r3, r5
 8004296:	4640      	mov	r0, r8
 8004298:	4649      	mov	r1, r9
 800429a:	f7fc f915 	bl	80004c8 <__aeabi_dmul>
 800429e:	4602      	mov	r2, r0
 80042a0:	460b      	mov	r3, r1
 80042a2:	4610      	mov	r0, r2
 80042a4:	4619      	mov	r1, r3
 80042a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a8:	00db      	lsls	r3, r3, #3
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	18d6      	adds	r6, r2, r3
 80042ae:	f04f 0200 	mov.w	r2, #0
 80042b2:	4b2d      	ldr	r3, [pc, #180]	; (8004368 <caculate_shaking_value+0x248>)
 80042b4:	f7fc fa32 	bl	800071c <__aeabi_ddiv>
 80042b8:	4602      	mov	r2, r0
 80042ba:	460b      	mov	r3, r1
 80042bc:	e9c6 2300 	strd	r2, r3, [r6]
 80042c0:	e039      	b.n	8004336 <caculate_shaking_value+0x216>
		}else{
			_shaking_value[i] = three_axist_motor_lengh[i]*(2 - cos(old_angle) - cos(new_angle)) / SCAN_ADC_RATE ;
 80042c2:	4a28      	ldr	r2, [pc, #160]	; (8004364 <caculate_shaking_value+0x244>)
 80042c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042ca:	4618      	mov	r0, r3
 80042cc:	f7fc f882 	bl	80003d4 <__aeabi_ui2d>
 80042d0:	4680      	mov	r8, r0
 80042d2:	4689      	mov	r9, r1
 80042d4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80042d8:	f000 f8d0 	bl	800447c <cos>
 80042dc:	4602      	mov	r2, r0
 80042de:	460b      	mov	r3, r1
 80042e0:	f04f 0000 	mov.w	r0, #0
 80042e4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80042e8:	f7fb ff36 	bl	8000158 <__aeabi_dsub>
 80042ec:	4602      	mov	r2, r0
 80042ee:	460b      	mov	r3, r1
 80042f0:	4692      	mov	sl, r2
 80042f2:	469b      	mov	fp, r3
 80042f4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80042f8:	f000 f8c0 	bl	800447c <cos>
 80042fc:	4602      	mov	r2, r0
 80042fe:	460b      	mov	r3, r1
 8004300:	4650      	mov	r0, sl
 8004302:	4659      	mov	r1, fp
 8004304:	f7fb ff28 	bl	8000158 <__aeabi_dsub>
 8004308:	4602      	mov	r2, r0
 800430a:	460b      	mov	r3, r1
 800430c:	4640      	mov	r0, r8
 800430e:	4649      	mov	r1, r9
 8004310:	f7fc f8da 	bl	80004c8 <__aeabi_dmul>
 8004314:	4602      	mov	r2, r0
 8004316:	460b      	mov	r3, r1
 8004318:	4610      	mov	r0, r2
 800431a:	4619      	mov	r1, r3
 800431c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431e:	00db      	lsls	r3, r3, #3
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	18d6      	adds	r6, r2, r3
 8004324:	f04f 0200 	mov.w	r2, #0
 8004328:	4b0f      	ldr	r3, [pc, #60]	; (8004368 <caculate_shaking_value+0x248>)
 800432a:	f7fc f9f7 	bl	800071c <__aeabi_ddiv>
 800432e:	4602      	mov	r2, r0
 8004330:	460b      	mov	r3, r1
 8004332:	e9c6 2300 	strd	r2, r3, [r6]
	for(int i = 0; i < 3; i++){
 8004336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004338:	3301      	adds	r3, #1
 800433a:	627b      	str	r3, [r7, #36]	; 0x24
 800433c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433e:	2b02      	cmp	r3, #2
 8004340:	f77f aef8 	ble.w	8004134 <caculate_shaking_value+0x14>
		}

	}
}
 8004344:	bf00      	nop
 8004346:	bf00      	nop
 8004348:	372c      	adds	r7, #44	; 0x2c
 800434a:	46bd      	mov	sp, r7
 800434c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004350:	2e48e8a7 	.word	0x2e48e8a7
 8004354:	400921ff 	.word	0x400921ff
 8004358:	40568000 	.word	0x40568000
 800435c:	40668000 	.word	0x40668000
 8004360:	200000e8 	.word	0x200000e8
 8004364:	2000000c 	.word	0x2000000c
 8004368:	40590000 	.word	0x40590000

0800436c <build_tx_data>:

void build_tx_data(uint8_t* _tx_buff, double* _shaking_value){
 800436c:	b580      	push	{r7, lr}
 800436e:	b082      	sub	sp, #8
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	6039      	str	r1, [r7, #0]
	_tx_buff[0] = 'X';
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2258      	movs	r2, #88	; 0x58
 800437a:	701a      	strb	r2, [r3, #0]
	_tx_buff[1] = ':';
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	3301      	adds	r3, #1
 8004380:	223a      	movs	r2, #58	; 0x3a
 8004382:	701a      	strb	r2, [r3, #0]
	lkv_lcd_float_to_string(&_shaking_value[0], &_tx_buff[2]);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	3302      	adds	r3, #2
 8004388:	4619      	mov	r1, r3
 800438a:	6838      	ldr	r0, [r7, #0]
 800438c:	f7ff fcd4 	bl	8003d38 <lkv_lcd_float_to_string>
	_tx_buff[7] = '\n';
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	3307      	adds	r3, #7
 8004394:	220a      	movs	r2, #10
 8004396:	701a      	strb	r2, [r3, #0]

	_tx_buff[8] = 'Y';
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	3308      	adds	r3, #8
 800439c:	2259      	movs	r2, #89	; 0x59
 800439e:	701a      	strb	r2, [r3, #0]
	_tx_buff[9] = ':';
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	3309      	adds	r3, #9
 80043a4:	223a      	movs	r2, #58	; 0x3a
 80043a6:	701a      	strb	r2, [r3, #0]
	lkv_lcd_float_to_string(&_shaking_value[1], &_tx_buff[10]);
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	f103 0208 	add.w	r2, r3, #8
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	330a      	adds	r3, #10
 80043b2:	4619      	mov	r1, r3
 80043b4:	4610      	mov	r0, r2
 80043b6:	f7ff fcbf 	bl	8003d38 <lkv_lcd_float_to_string>
	_tx_buff[15] = '\n';
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	330f      	adds	r3, #15
 80043be:	220a      	movs	r2, #10
 80043c0:	701a      	strb	r2, [r3, #0]

	_tx_buff[16] = 'Z';
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	3310      	adds	r3, #16
 80043c6:	225a      	movs	r2, #90	; 0x5a
 80043c8:	701a      	strb	r2, [r3, #0]
	_tx_buff[17] = ':';
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	3311      	adds	r3, #17
 80043ce:	223a      	movs	r2, #58	; 0x3a
 80043d0:	701a      	strb	r2, [r3, #0]
	lkv_lcd_float_to_string(&_shaking_value[2], &_tx_buff[18]);
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	f103 0210 	add.w	r2, r3, #16
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	3312      	adds	r3, #18
 80043dc:	4619      	mov	r1, r3
 80043de:	4610      	mov	r0, r2
 80043e0:	f7ff fcaa 	bl	8003d38 <lkv_lcd_float_to_string>
	_tx_buff[23] = '\n';
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	3317      	adds	r3, #23
 80043e8:	220a      	movs	r2, #10
 80043ea:	701a      	strb	r2, [r3, #0]
	_tx_buff[24] = '\n';
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	3318      	adds	r3, #24
 80043f0:	220a      	movs	r2, #10
 80043f2:	701a      	strb	r2, [r3, #0]
	_tx_buff[25] = '\0';
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	3319      	adds	r3, #25
 80043f8:	2200      	movs	r2, #0
 80043fa:	701a      	strb	r2, [r3, #0]

}
 80043fc:	bf00      	nop
 80043fe:	3708      	adds	r7, #8
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}

08004404 <USART1_IRQHandler>:


void USART1_IRQHandler(void){
 8004404:	b580      	push	{r7, lr}
 8004406:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&rs485_com.uart_module);
 8004408:	4804      	ldr	r0, [pc, #16]	; (800441c <USART1_IRQHandler+0x18>)
 800440a:	f7fe fe81 	bl	8003110 <HAL_UART_IRQHandler>
	HAL_UART_Receive_IT(&rs485_com.uart_module, &rs485_com.rx_data, 1);
 800440e:	2201      	movs	r2, #1
 8004410:	4903      	ldr	r1, [pc, #12]	; (8004420 <USART1_IRQHandler+0x1c>)
 8004412:	4802      	ldr	r0, [pc, #8]	; (800441c <USART1_IRQHandler+0x18>)
 8004414:	f7fe fe27 	bl	8003066 <HAL_UART_Receive_IT>
}
 8004418:	bf00      	nop
 800441a:	bd80      	pop	{r7, pc}
 800441c:	20000048 	.word	0x20000048
 8004420:	200000cc 	.word	0x200000cc

08004424 <memset>:
 8004424:	4603      	mov	r3, r0
 8004426:	4402      	add	r2, r0
 8004428:	4293      	cmp	r3, r2
 800442a:	d100      	bne.n	800442e <memset+0xa>
 800442c:	4770      	bx	lr
 800442e:	f803 1b01 	strb.w	r1, [r3], #1
 8004432:	e7f9      	b.n	8004428 <memset+0x4>

08004434 <__libc_init_array>:
 8004434:	b570      	push	{r4, r5, r6, lr}
 8004436:	2600      	movs	r6, #0
 8004438:	4d0c      	ldr	r5, [pc, #48]	; (800446c <__libc_init_array+0x38>)
 800443a:	4c0d      	ldr	r4, [pc, #52]	; (8004470 <__libc_init_array+0x3c>)
 800443c:	1b64      	subs	r4, r4, r5
 800443e:	10a4      	asrs	r4, r4, #2
 8004440:	42a6      	cmp	r6, r4
 8004442:	d109      	bne.n	8004458 <__libc_init_array+0x24>
 8004444:	f001 f80c 	bl	8005460 <_init>
 8004448:	2600      	movs	r6, #0
 800444a:	4d0a      	ldr	r5, [pc, #40]	; (8004474 <__libc_init_array+0x40>)
 800444c:	4c0a      	ldr	r4, [pc, #40]	; (8004478 <__libc_init_array+0x44>)
 800444e:	1b64      	subs	r4, r4, r5
 8004450:	10a4      	asrs	r4, r4, #2
 8004452:	42a6      	cmp	r6, r4
 8004454:	d105      	bne.n	8004462 <__libc_init_array+0x2e>
 8004456:	bd70      	pop	{r4, r5, r6, pc}
 8004458:	f855 3b04 	ldr.w	r3, [r5], #4
 800445c:	4798      	blx	r3
 800445e:	3601      	adds	r6, #1
 8004460:	e7ee      	b.n	8004440 <__libc_init_array+0xc>
 8004462:	f855 3b04 	ldr.w	r3, [r5], #4
 8004466:	4798      	blx	r3
 8004468:	3601      	adds	r6, #1
 800446a:	e7f2      	b.n	8004452 <__libc_init_array+0x1e>
 800446c:	08005680 	.word	0x08005680
 8004470:	08005680 	.word	0x08005680
 8004474:	08005680 	.word	0x08005680
 8004478:	08005684 	.word	0x08005684

0800447c <cos>:
 800447c:	b530      	push	{r4, r5, lr}
 800447e:	4a20      	ldr	r2, [pc, #128]	; (8004500 <cos+0x84>)
 8004480:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004484:	4293      	cmp	r3, r2
 8004486:	b087      	sub	sp, #28
 8004488:	dc06      	bgt.n	8004498 <cos+0x1c>
 800448a:	2200      	movs	r2, #0
 800448c:	2300      	movs	r3, #0
 800448e:	b007      	add	sp, #28
 8004490:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004494:	f000 b838 	b.w	8004508 <__kernel_cos>
 8004498:	4a1a      	ldr	r2, [pc, #104]	; (8004504 <cos+0x88>)
 800449a:	4293      	cmp	r3, r2
 800449c:	dd05      	ble.n	80044aa <cos+0x2e>
 800449e:	4602      	mov	r2, r0
 80044a0:	460b      	mov	r3, r1
 80044a2:	f7fb fe59 	bl	8000158 <__aeabi_dsub>
 80044a6:	b007      	add	sp, #28
 80044a8:	bd30      	pop	{r4, r5, pc}
 80044aa:	aa02      	add	r2, sp, #8
 80044ac:	f000 f9a4 	bl	80047f8 <__ieee754_rem_pio2>
 80044b0:	f000 0003 	and.w	r0, r0, #3
 80044b4:	2801      	cmp	r0, #1
 80044b6:	d009      	beq.n	80044cc <cos+0x50>
 80044b8:	2802      	cmp	r0, #2
 80044ba:	d011      	beq.n	80044e0 <cos+0x64>
 80044bc:	b9b8      	cbnz	r0, 80044ee <cos+0x72>
 80044be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80044c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80044c6:	f000 f81f 	bl	8004508 <__kernel_cos>
 80044ca:	e7ec      	b.n	80044a6 <cos+0x2a>
 80044cc:	9000      	str	r0, [sp, #0]
 80044ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80044d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80044d6:	f000 f8d7 	bl	8004688 <__kernel_sin>
 80044da:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80044de:	e7e2      	b.n	80044a6 <cos+0x2a>
 80044e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80044e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80044e8:	f000 f80e 	bl	8004508 <__kernel_cos>
 80044ec:	e7f5      	b.n	80044da <cos+0x5e>
 80044ee:	2301      	movs	r3, #1
 80044f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80044f4:	9300      	str	r3, [sp, #0]
 80044f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80044fa:	f000 f8c5 	bl	8004688 <__kernel_sin>
 80044fe:	e7d2      	b.n	80044a6 <cos+0x2a>
 8004500:	3fe921fb 	.word	0x3fe921fb
 8004504:	7fefffff 	.word	0x7fefffff

08004508 <__kernel_cos>:
 8004508:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800450c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8004510:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8004514:	4680      	mov	r8, r0
 8004516:	460f      	mov	r7, r1
 8004518:	e9cd 2300 	strd	r2, r3, [sp]
 800451c:	da04      	bge.n	8004528 <__kernel_cos+0x20>
 800451e:	f7fc fa6d 	bl	80009fc <__aeabi_d2iz>
 8004522:	2800      	cmp	r0, #0
 8004524:	f000 8086 	beq.w	8004634 <__kernel_cos+0x12c>
 8004528:	4642      	mov	r2, r8
 800452a:	463b      	mov	r3, r7
 800452c:	4640      	mov	r0, r8
 800452e:	4639      	mov	r1, r7
 8004530:	f7fb ffca 	bl	80004c8 <__aeabi_dmul>
 8004534:	2200      	movs	r2, #0
 8004536:	4b4e      	ldr	r3, [pc, #312]	; (8004670 <__kernel_cos+0x168>)
 8004538:	4604      	mov	r4, r0
 800453a:	460d      	mov	r5, r1
 800453c:	f7fb ffc4 	bl	80004c8 <__aeabi_dmul>
 8004540:	a33f      	add	r3, pc, #252	; (adr r3, 8004640 <__kernel_cos+0x138>)
 8004542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004546:	4682      	mov	sl, r0
 8004548:	468b      	mov	fp, r1
 800454a:	4620      	mov	r0, r4
 800454c:	4629      	mov	r1, r5
 800454e:	f7fb ffbb 	bl	80004c8 <__aeabi_dmul>
 8004552:	a33d      	add	r3, pc, #244	; (adr r3, 8004648 <__kernel_cos+0x140>)
 8004554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004558:	f7fb fe00 	bl	800015c <__adddf3>
 800455c:	4622      	mov	r2, r4
 800455e:	462b      	mov	r3, r5
 8004560:	f7fb ffb2 	bl	80004c8 <__aeabi_dmul>
 8004564:	a33a      	add	r3, pc, #232	; (adr r3, 8004650 <__kernel_cos+0x148>)
 8004566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800456a:	f7fb fdf5 	bl	8000158 <__aeabi_dsub>
 800456e:	4622      	mov	r2, r4
 8004570:	462b      	mov	r3, r5
 8004572:	f7fb ffa9 	bl	80004c8 <__aeabi_dmul>
 8004576:	a338      	add	r3, pc, #224	; (adr r3, 8004658 <__kernel_cos+0x150>)
 8004578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800457c:	f7fb fdee 	bl	800015c <__adddf3>
 8004580:	4622      	mov	r2, r4
 8004582:	462b      	mov	r3, r5
 8004584:	f7fb ffa0 	bl	80004c8 <__aeabi_dmul>
 8004588:	a335      	add	r3, pc, #212	; (adr r3, 8004660 <__kernel_cos+0x158>)
 800458a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800458e:	f7fb fde3 	bl	8000158 <__aeabi_dsub>
 8004592:	4622      	mov	r2, r4
 8004594:	462b      	mov	r3, r5
 8004596:	f7fb ff97 	bl	80004c8 <__aeabi_dmul>
 800459a:	a333      	add	r3, pc, #204	; (adr r3, 8004668 <__kernel_cos+0x160>)
 800459c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045a0:	f7fb fddc 	bl	800015c <__adddf3>
 80045a4:	4622      	mov	r2, r4
 80045a6:	462b      	mov	r3, r5
 80045a8:	f7fb ff8e 	bl	80004c8 <__aeabi_dmul>
 80045ac:	4622      	mov	r2, r4
 80045ae:	462b      	mov	r3, r5
 80045b0:	f7fb ff8a 	bl	80004c8 <__aeabi_dmul>
 80045b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80045b8:	4604      	mov	r4, r0
 80045ba:	460d      	mov	r5, r1
 80045bc:	4640      	mov	r0, r8
 80045be:	4639      	mov	r1, r7
 80045c0:	f7fb ff82 	bl	80004c8 <__aeabi_dmul>
 80045c4:	460b      	mov	r3, r1
 80045c6:	4602      	mov	r2, r0
 80045c8:	4629      	mov	r1, r5
 80045ca:	4620      	mov	r0, r4
 80045cc:	f7fb fdc4 	bl	8000158 <__aeabi_dsub>
 80045d0:	4b28      	ldr	r3, [pc, #160]	; (8004674 <__kernel_cos+0x16c>)
 80045d2:	4680      	mov	r8, r0
 80045d4:	429e      	cmp	r6, r3
 80045d6:	4689      	mov	r9, r1
 80045d8:	dc0e      	bgt.n	80045f8 <__kernel_cos+0xf0>
 80045da:	4602      	mov	r2, r0
 80045dc:	460b      	mov	r3, r1
 80045de:	4650      	mov	r0, sl
 80045e0:	4659      	mov	r1, fp
 80045e2:	f7fb fdb9 	bl	8000158 <__aeabi_dsub>
 80045e6:	4602      	mov	r2, r0
 80045e8:	2000      	movs	r0, #0
 80045ea:	460b      	mov	r3, r1
 80045ec:	4922      	ldr	r1, [pc, #136]	; (8004678 <__kernel_cos+0x170>)
 80045ee:	f7fb fdb3 	bl	8000158 <__aeabi_dsub>
 80045f2:	b003      	add	sp, #12
 80045f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045f8:	2400      	movs	r4, #0
 80045fa:	4b20      	ldr	r3, [pc, #128]	; (800467c <__kernel_cos+0x174>)
 80045fc:	4622      	mov	r2, r4
 80045fe:	429e      	cmp	r6, r3
 8004600:	bfcc      	ite	gt
 8004602:	4d1f      	ldrgt	r5, [pc, #124]	; (8004680 <__kernel_cos+0x178>)
 8004604:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8004608:	462b      	mov	r3, r5
 800460a:	2000      	movs	r0, #0
 800460c:	491a      	ldr	r1, [pc, #104]	; (8004678 <__kernel_cos+0x170>)
 800460e:	f7fb fda3 	bl	8000158 <__aeabi_dsub>
 8004612:	4622      	mov	r2, r4
 8004614:	4606      	mov	r6, r0
 8004616:	460f      	mov	r7, r1
 8004618:	462b      	mov	r3, r5
 800461a:	4650      	mov	r0, sl
 800461c:	4659      	mov	r1, fp
 800461e:	f7fb fd9b 	bl	8000158 <__aeabi_dsub>
 8004622:	4642      	mov	r2, r8
 8004624:	464b      	mov	r3, r9
 8004626:	f7fb fd97 	bl	8000158 <__aeabi_dsub>
 800462a:	4602      	mov	r2, r0
 800462c:	460b      	mov	r3, r1
 800462e:	4630      	mov	r0, r6
 8004630:	4639      	mov	r1, r7
 8004632:	e7dc      	b.n	80045ee <__kernel_cos+0xe6>
 8004634:	2000      	movs	r0, #0
 8004636:	4910      	ldr	r1, [pc, #64]	; (8004678 <__kernel_cos+0x170>)
 8004638:	e7db      	b.n	80045f2 <__kernel_cos+0xea>
 800463a:	bf00      	nop
 800463c:	f3af 8000 	nop.w
 8004640:	be8838d4 	.word	0xbe8838d4
 8004644:	bda8fae9 	.word	0xbda8fae9
 8004648:	bdb4b1c4 	.word	0xbdb4b1c4
 800464c:	3e21ee9e 	.word	0x3e21ee9e
 8004650:	809c52ad 	.word	0x809c52ad
 8004654:	3e927e4f 	.word	0x3e927e4f
 8004658:	19cb1590 	.word	0x19cb1590
 800465c:	3efa01a0 	.word	0x3efa01a0
 8004660:	16c15177 	.word	0x16c15177
 8004664:	3f56c16c 	.word	0x3f56c16c
 8004668:	5555554c 	.word	0x5555554c
 800466c:	3fa55555 	.word	0x3fa55555
 8004670:	3fe00000 	.word	0x3fe00000
 8004674:	3fd33332 	.word	0x3fd33332
 8004678:	3ff00000 	.word	0x3ff00000
 800467c:	3fe90000 	.word	0x3fe90000
 8004680:	3fd20000 	.word	0x3fd20000
 8004684:	00000000 	.word	0x00000000

08004688 <__kernel_sin>:
 8004688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800468c:	b086      	sub	sp, #24
 800468e:	e9cd 2300 	strd	r2, r3, [sp]
 8004692:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004696:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800469a:	4682      	mov	sl, r0
 800469c:	460c      	mov	r4, r1
 800469e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80046a0:	da03      	bge.n	80046aa <__kernel_sin+0x22>
 80046a2:	f7fc f9ab 	bl	80009fc <__aeabi_d2iz>
 80046a6:	2800      	cmp	r0, #0
 80046a8:	d050      	beq.n	800474c <__kernel_sin+0xc4>
 80046aa:	4652      	mov	r2, sl
 80046ac:	4623      	mov	r3, r4
 80046ae:	4650      	mov	r0, sl
 80046b0:	4621      	mov	r1, r4
 80046b2:	f7fb ff09 	bl	80004c8 <__aeabi_dmul>
 80046b6:	4606      	mov	r6, r0
 80046b8:	460f      	mov	r7, r1
 80046ba:	4602      	mov	r2, r0
 80046bc:	460b      	mov	r3, r1
 80046be:	4650      	mov	r0, sl
 80046c0:	4621      	mov	r1, r4
 80046c2:	f7fb ff01 	bl	80004c8 <__aeabi_dmul>
 80046c6:	a33e      	add	r3, pc, #248	; (adr r3, 80047c0 <__kernel_sin+0x138>)
 80046c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046cc:	4680      	mov	r8, r0
 80046ce:	4689      	mov	r9, r1
 80046d0:	4630      	mov	r0, r6
 80046d2:	4639      	mov	r1, r7
 80046d4:	f7fb fef8 	bl	80004c8 <__aeabi_dmul>
 80046d8:	a33b      	add	r3, pc, #236	; (adr r3, 80047c8 <__kernel_sin+0x140>)
 80046da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046de:	f7fb fd3b 	bl	8000158 <__aeabi_dsub>
 80046e2:	4632      	mov	r2, r6
 80046e4:	463b      	mov	r3, r7
 80046e6:	f7fb feef 	bl	80004c8 <__aeabi_dmul>
 80046ea:	a339      	add	r3, pc, #228	; (adr r3, 80047d0 <__kernel_sin+0x148>)
 80046ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046f0:	f7fb fd34 	bl	800015c <__adddf3>
 80046f4:	4632      	mov	r2, r6
 80046f6:	463b      	mov	r3, r7
 80046f8:	f7fb fee6 	bl	80004c8 <__aeabi_dmul>
 80046fc:	a336      	add	r3, pc, #216	; (adr r3, 80047d8 <__kernel_sin+0x150>)
 80046fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004702:	f7fb fd29 	bl	8000158 <__aeabi_dsub>
 8004706:	4632      	mov	r2, r6
 8004708:	463b      	mov	r3, r7
 800470a:	f7fb fedd 	bl	80004c8 <__aeabi_dmul>
 800470e:	a334      	add	r3, pc, #208	; (adr r3, 80047e0 <__kernel_sin+0x158>)
 8004710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004714:	f7fb fd22 	bl	800015c <__adddf3>
 8004718:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800471c:	b9dd      	cbnz	r5, 8004756 <__kernel_sin+0xce>
 800471e:	4602      	mov	r2, r0
 8004720:	460b      	mov	r3, r1
 8004722:	4630      	mov	r0, r6
 8004724:	4639      	mov	r1, r7
 8004726:	f7fb fecf 	bl	80004c8 <__aeabi_dmul>
 800472a:	a32f      	add	r3, pc, #188	; (adr r3, 80047e8 <__kernel_sin+0x160>)
 800472c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004730:	f7fb fd12 	bl	8000158 <__aeabi_dsub>
 8004734:	4642      	mov	r2, r8
 8004736:	464b      	mov	r3, r9
 8004738:	f7fb fec6 	bl	80004c8 <__aeabi_dmul>
 800473c:	4602      	mov	r2, r0
 800473e:	460b      	mov	r3, r1
 8004740:	4650      	mov	r0, sl
 8004742:	4621      	mov	r1, r4
 8004744:	f7fb fd0a 	bl	800015c <__adddf3>
 8004748:	4682      	mov	sl, r0
 800474a:	460c      	mov	r4, r1
 800474c:	4650      	mov	r0, sl
 800474e:	4621      	mov	r1, r4
 8004750:	b006      	add	sp, #24
 8004752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004756:	2200      	movs	r2, #0
 8004758:	e9dd 0100 	ldrd	r0, r1, [sp]
 800475c:	4b24      	ldr	r3, [pc, #144]	; (80047f0 <__kernel_sin+0x168>)
 800475e:	f7fb feb3 	bl	80004c8 <__aeabi_dmul>
 8004762:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004766:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800476a:	4640      	mov	r0, r8
 800476c:	4649      	mov	r1, r9
 800476e:	f7fb feab 	bl	80004c8 <__aeabi_dmul>
 8004772:	4602      	mov	r2, r0
 8004774:	460b      	mov	r3, r1
 8004776:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800477a:	f7fb fced 	bl	8000158 <__aeabi_dsub>
 800477e:	4632      	mov	r2, r6
 8004780:	463b      	mov	r3, r7
 8004782:	f7fb fea1 	bl	80004c8 <__aeabi_dmul>
 8004786:	e9dd 2300 	ldrd	r2, r3, [sp]
 800478a:	f7fb fce5 	bl	8000158 <__aeabi_dsub>
 800478e:	a316      	add	r3, pc, #88	; (adr r3, 80047e8 <__kernel_sin+0x160>)
 8004790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004794:	4606      	mov	r6, r0
 8004796:	460f      	mov	r7, r1
 8004798:	4640      	mov	r0, r8
 800479a:	4649      	mov	r1, r9
 800479c:	f7fb fe94 	bl	80004c8 <__aeabi_dmul>
 80047a0:	4602      	mov	r2, r0
 80047a2:	460b      	mov	r3, r1
 80047a4:	4630      	mov	r0, r6
 80047a6:	4639      	mov	r1, r7
 80047a8:	f7fb fcd8 	bl	800015c <__adddf3>
 80047ac:	4602      	mov	r2, r0
 80047ae:	460b      	mov	r3, r1
 80047b0:	4650      	mov	r0, sl
 80047b2:	4621      	mov	r1, r4
 80047b4:	f7fb fcd0 	bl	8000158 <__aeabi_dsub>
 80047b8:	e7c6      	b.n	8004748 <__kernel_sin+0xc0>
 80047ba:	bf00      	nop
 80047bc:	f3af 8000 	nop.w
 80047c0:	5acfd57c 	.word	0x5acfd57c
 80047c4:	3de5d93a 	.word	0x3de5d93a
 80047c8:	8a2b9ceb 	.word	0x8a2b9ceb
 80047cc:	3e5ae5e6 	.word	0x3e5ae5e6
 80047d0:	57b1fe7d 	.word	0x57b1fe7d
 80047d4:	3ec71de3 	.word	0x3ec71de3
 80047d8:	19c161d5 	.word	0x19c161d5
 80047dc:	3f2a01a0 	.word	0x3f2a01a0
 80047e0:	1110f8a6 	.word	0x1110f8a6
 80047e4:	3f811111 	.word	0x3f811111
 80047e8:	55555549 	.word	0x55555549
 80047ec:	3fc55555 	.word	0x3fc55555
 80047f0:	3fe00000 	.word	0x3fe00000
 80047f4:	00000000 	.word	0x00000000

080047f8 <__ieee754_rem_pio2>:
 80047f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047fc:	4614      	mov	r4, r2
 80047fe:	4ac2      	ldr	r2, [pc, #776]	; (8004b08 <__ieee754_rem_pio2+0x310>)
 8004800:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 8004804:	b08d      	sub	sp, #52	; 0x34
 8004806:	4592      	cmp	sl, r2
 8004808:	9104      	str	r1, [sp, #16]
 800480a:	dc07      	bgt.n	800481c <__ieee754_rem_pio2+0x24>
 800480c:	2200      	movs	r2, #0
 800480e:	2300      	movs	r3, #0
 8004810:	e9c4 0100 	strd	r0, r1, [r4]
 8004814:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8004818:	2500      	movs	r5, #0
 800481a:	e024      	b.n	8004866 <__ieee754_rem_pio2+0x6e>
 800481c:	4abb      	ldr	r2, [pc, #748]	; (8004b0c <__ieee754_rem_pio2+0x314>)
 800481e:	4592      	cmp	sl, r2
 8004820:	dc72      	bgt.n	8004908 <__ieee754_rem_pio2+0x110>
 8004822:	9b04      	ldr	r3, [sp, #16]
 8004824:	4dba      	ldr	r5, [pc, #744]	; (8004b10 <__ieee754_rem_pio2+0x318>)
 8004826:	2b00      	cmp	r3, #0
 8004828:	a3a9      	add	r3, pc, #676	; (adr r3, 8004ad0 <__ieee754_rem_pio2+0x2d8>)
 800482a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800482e:	dd36      	ble.n	800489e <__ieee754_rem_pio2+0xa6>
 8004830:	f7fb fc92 	bl	8000158 <__aeabi_dsub>
 8004834:	45aa      	cmp	sl, r5
 8004836:	4606      	mov	r6, r0
 8004838:	460f      	mov	r7, r1
 800483a:	d018      	beq.n	800486e <__ieee754_rem_pio2+0x76>
 800483c:	a3a6      	add	r3, pc, #664	; (adr r3, 8004ad8 <__ieee754_rem_pio2+0x2e0>)
 800483e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004842:	f7fb fc89 	bl	8000158 <__aeabi_dsub>
 8004846:	4602      	mov	r2, r0
 8004848:	460b      	mov	r3, r1
 800484a:	4630      	mov	r0, r6
 800484c:	e9c4 2300 	strd	r2, r3, [r4]
 8004850:	4639      	mov	r1, r7
 8004852:	f7fb fc81 	bl	8000158 <__aeabi_dsub>
 8004856:	a3a0      	add	r3, pc, #640	; (adr r3, 8004ad8 <__ieee754_rem_pio2+0x2e0>)
 8004858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800485c:	f7fb fc7c 	bl	8000158 <__aeabi_dsub>
 8004860:	2501      	movs	r5, #1
 8004862:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004866:	4628      	mov	r0, r5
 8004868:	b00d      	add	sp, #52	; 0x34
 800486a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800486e:	a39c      	add	r3, pc, #624	; (adr r3, 8004ae0 <__ieee754_rem_pio2+0x2e8>)
 8004870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004874:	f7fb fc70 	bl	8000158 <__aeabi_dsub>
 8004878:	a39b      	add	r3, pc, #620	; (adr r3, 8004ae8 <__ieee754_rem_pio2+0x2f0>)
 800487a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800487e:	4606      	mov	r6, r0
 8004880:	460f      	mov	r7, r1
 8004882:	f7fb fc69 	bl	8000158 <__aeabi_dsub>
 8004886:	4602      	mov	r2, r0
 8004888:	460b      	mov	r3, r1
 800488a:	4630      	mov	r0, r6
 800488c:	e9c4 2300 	strd	r2, r3, [r4]
 8004890:	4639      	mov	r1, r7
 8004892:	f7fb fc61 	bl	8000158 <__aeabi_dsub>
 8004896:	a394      	add	r3, pc, #592	; (adr r3, 8004ae8 <__ieee754_rem_pio2+0x2f0>)
 8004898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800489c:	e7de      	b.n	800485c <__ieee754_rem_pio2+0x64>
 800489e:	f7fb fc5d 	bl	800015c <__adddf3>
 80048a2:	45aa      	cmp	sl, r5
 80048a4:	4606      	mov	r6, r0
 80048a6:	460f      	mov	r7, r1
 80048a8:	d016      	beq.n	80048d8 <__ieee754_rem_pio2+0xe0>
 80048aa:	a38b      	add	r3, pc, #556	; (adr r3, 8004ad8 <__ieee754_rem_pio2+0x2e0>)
 80048ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b0:	f7fb fc54 	bl	800015c <__adddf3>
 80048b4:	4602      	mov	r2, r0
 80048b6:	460b      	mov	r3, r1
 80048b8:	4630      	mov	r0, r6
 80048ba:	e9c4 2300 	strd	r2, r3, [r4]
 80048be:	4639      	mov	r1, r7
 80048c0:	f7fb fc4a 	bl	8000158 <__aeabi_dsub>
 80048c4:	a384      	add	r3, pc, #528	; (adr r3, 8004ad8 <__ieee754_rem_pio2+0x2e0>)
 80048c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ca:	f7fb fc47 	bl	800015c <__adddf3>
 80048ce:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80048d2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80048d6:	e7c6      	b.n	8004866 <__ieee754_rem_pio2+0x6e>
 80048d8:	a381      	add	r3, pc, #516	; (adr r3, 8004ae0 <__ieee754_rem_pio2+0x2e8>)
 80048da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048de:	f7fb fc3d 	bl	800015c <__adddf3>
 80048e2:	a381      	add	r3, pc, #516	; (adr r3, 8004ae8 <__ieee754_rem_pio2+0x2f0>)
 80048e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e8:	4606      	mov	r6, r0
 80048ea:	460f      	mov	r7, r1
 80048ec:	f7fb fc36 	bl	800015c <__adddf3>
 80048f0:	4602      	mov	r2, r0
 80048f2:	460b      	mov	r3, r1
 80048f4:	4630      	mov	r0, r6
 80048f6:	e9c4 2300 	strd	r2, r3, [r4]
 80048fa:	4639      	mov	r1, r7
 80048fc:	f7fb fc2c 	bl	8000158 <__aeabi_dsub>
 8004900:	a379      	add	r3, pc, #484	; (adr r3, 8004ae8 <__ieee754_rem_pio2+0x2f0>)
 8004902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004906:	e7e0      	b.n	80048ca <__ieee754_rem_pio2+0xd2>
 8004908:	4a82      	ldr	r2, [pc, #520]	; (8004b14 <__ieee754_rem_pio2+0x31c>)
 800490a:	4592      	cmp	sl, r2
 800490c:	f300 80d4 	bgt.w	8004ab8 <__ieee754_rem_pio2+0x2c0>
 8004910:	f000 f966 	bl	8004be0 <fabs>
 8004914:	a376      	add	r3, pc, #472	; (adr r3, 8004af0 <__ieee754_rem_pio2+0x2f8>)
 8004916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800491a:	4606      	mov	r6, r0
 800491c:	460f      	mov	r7, r1
 800491e:	f7fb fdd3 	bl	80004c8 <__aeabi_dmul>
 8004922:	2200      	movs	r2, #0
 8004924:	4b7c      	ldr	r3, [pc, #496]	; (8004b18 <__ieee754_rem_pio2+0x320>)
 8004926:	f7fb fc19 	bl	800015c <__adddf3>
 800492a:	f7fc f867 	bl	80009fc <__aeabi_d2iz>
 800492e:	4605      	mov	r5, r0
 8004930:	f7fb fd60 	bl	80003f4 <__aeabi_i2d>
 8004934:	4602      	mov	r2, r0
 8004936:	460b      	mov	r3, r1
 8004938:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800493c:	a364      	add	r3, pc, #400	; (adr r3, 8004ad0 <__ieee754_rem_pio2+0x2d8>)
 800493e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004942:	f7fb fdc1 	bl	80004c8 <__aeabi_dmul>
 8004946:	4602      	mov	r2, r0
 8004948:	460b      	mov	r3, r1
 800494a:	4630      	mov	r0, r6
 800494c:	4639      	mov	r1, r7
 800494e:	f7fb fc03 	bl	8000158 <__aeabi_dsub>
 8004952:	a361      	add	r3, pc, #388	; (adr r3, 8004ad8 <__ieee754_rem_pio2+0x2e0>)
 8004954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004958:	4680      	mov	r8, r0
 800495a:	4689      	mov	r9, r1
 800495c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004960:	f7fb fdb2 	bl	80004c8 <__aeabi_dmul>
 8004964:	2d1f      	cmp	r5, #31
 8004966:	4606      	mov	r6, r0
 8004968:	460f      	mov	r7, r1
 800496a:	dc0e      	bgt.n	800498a <__ieee754_rem_pio2+0x192>
 800496c:	4b6b      	ldr	r3, [pc, #428]	; (8004b1c <__ieee754_rem_pio2+0x324>)
 800496e:	1e6a      	subs	r2, r5, #1
 8004970:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004974:	4553      	cmp	r3, sl
 8004976:	d008      	beq.n	800498a <__ieee754_rem_pio2+0x192>
 8004978:	4632      	mov	r2, r6
 800497a:	463b      	mov	r3, r7
 800497c:	4640      	mov	r0, r8
 800497e:	4649      	mov	r1, r9
 8004980:	f7fb fbea 	bl	8000158 <__aeabi_dsub>
 8004984:	e9c4 0100 	strd	r0, r1, [r4]
 8004988:	e012      	b.n	80049b0 <__ieee754_rem_pio2+0x1b8>
 800498a:	463b      	mov	r3, r7
 800498c:	4632      	mov	r2, r6
 800498e:	4640      	mov	r0, r8
 8004990:	4649      	mov	r1, r9
 8004992:	f7fb fbe1 	bl	8000158 <__aeabi_dsub>
 8004996:	ea4f 532a 	mov.w	r3, sl, asr #20
 800499a:	9305      	str	r3, [sp, #20]
 800499c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80049a0:	ebc3 531a 	rsb	r3, r3, sl, lsr #20
 80049a4:	2b10      	cmp	r3, #16
 80049a6:	dc1f      	bgt.n	80049e8 <__ieee754_rem_pio2+0x1f0>
 80049a8:	4602      	mov	r2, r0
 80049aa:	460b      	mov	r3, r1
 80049ac:	e9c4 2300 	strd	r2, r3, [r4]
 80049b0:	e9d4 2a00 	ldrd	r2, sl, [r4]
 80049b4:	4640      	mov	r0, r8
 80049b6:	4653      	mov	r3, sl
 80049b8:	4649      	mov	r1, r9
 80049ba:	f7fb fbcd 	bl	8000158 <__aeabi_dsub>
 80049be:	4632      	mov	r2, r6
 80049c0:	463b      	mov	r3, r7
 80049c2:	f7fb fbc9 	bl	8000158 <__aeabi_dsub>
 80049c6:	460b      	mov	r3, r1
 80049c8:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80049cc:	9904      	ldr	r1, [sp, #16]
 80049ce:	4602      	mov	r2, r0
 80049d0:	2900      	cmp	r1, #0
 80049d2:	f6bf af48 	bge.w	8004866 <__ieee754_rem_pio2+0x6e>
 80049d6:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 80049da:	e9c4 1201 	strd	r1, r2, [r4, #4]
 80049de:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80049e2:	60e3      	str	r3, [r4, #12]
 80049e4:	426d      	negs	r5, r5
 80049e6:	e73e      	b.n	8004866 <__ieee754_rem_pio2+0x6e>
 80049e8:	a33d      	add	r3, pc, #244	; (adr r3, 8004ae0 <__ieee754_rem_pio2+0x2e8>)
 80049ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80049f2:	f7fb fd69 	bl	80004c8 <__aeabi_dmul>
 80049f6:	4606      	mov	r6, r0
 80049f8:	460f      	mov	r7, r1
 80049fa:	4602      	mov	r2, r0
 80049fc:	460b      	mov	r3, r1
 80049fe:	4640      	mov	r0, r8
 8004a00:	4649      	mov	r1, r9
 8004a02:	f7fb fba9 	bl	8000158 <__aeabi_dsub>
 8004a06:	4602      	mov	r2, r0
 8004a08:	460b      	mov	r3, r1
 8004a0a:	4682      	mov	sl, r0
 8004a0c:	468b      	mov	fp, r1
 8004a0e:	4640      	mov	r0, r8
 8004a10:	4649      	mov	r1, r9
 8004a12:	f7fb fba1 	bl	8000158 <__aeabi_dsub>
 8004a16:	4632      	mov	r2, r6
 8004a18:	463b      	mov	r3, r7
 8004a1a:	f7fb fb9d 	bl	8000158 <__aeabi_dsub>
 8004a1e:	a332      	add	r3, pc, #200	; (adr r3, 8004ae8 <__ieee754_rem_pio2+0x2f0>)
 8004a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a24:	4606      	mov	r6, r0
 8004a26:	460f      	mov	r7, r1
 8004a28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a2c:	f7fb fd4c 	bl	80004c8 <__aeabi_dmul>
 8004a30:	4632      	mov	r2, r6
 8004a32:	463b      	mov	r3, r7
 8004a34:	f7fb fb90 	bl	8000158 <__aeabi_dsub>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	460b      	mov	r3, r1
 8004a3c:	4606      	mov	r6, r0
 8004a3e:	460f      	mov	r7, r1
 8004a40:	4650      	mov	r0, sl
 8004a42:	4659      	mov	r1, fp
 8004a44:	f7fb fb88 	bl	8000158 <__aeabi_dsub>
 8004a48:	9a05      	ldr	r2, [sp, #20]
 8004a4a:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004a4e:	1ad3      	subs	r3, r2, r3
 8004a50:	2b31      	cmp	r3, #49	; 0x31
 8004a52:	dc06      	bgt.n	8004a62 <__ieee754_rem_pio2+0x26a>
 8004a54:	4602      	mov	r2, r0
 8004a56:	460b      	mov	r3, r1
 8004a58:	46d0      	mov	r8, sl
 8004a5a:	46d9      	mov	r9, fp
 8004a5c:	e9c4 2300 	strd	r2, r3, [r4]
 8004a60:	e7a6      	b.n	80049b0 <__ieee754_rem_pio2+0x1b8>
 8004a62:	a325      	add	r3, pc, #148	; (adr r3, 8004af8 <__ieee754_rem_pio2+0x300>)
 8004a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a6c:	f7fb fd2c 	bl	80004c8 <__aeabi_dmul>
 8004a70:	4606      	mov	r6, r0
 8004a72:	460f      	mov	r7, r1
 8004a74:	4602      	mov	r2, r0
 8004a76:	460b      	mov	r3, r1
 8004a78:	4650      	mov	r0, sl
 8004a7a:	4659      	mov	r1, fp
 8004a7c:	f7fb fb6c 	bl	8000158 <__aeabi_dsub>
 8004a80:	4602      	mov	r2, r0
 8004a82:	460b      	mov	r3, r1
 8004a84:	4680      	mov	r8, r0
 8004a86:	4689      	mov	r9, r1
 8004a88:	4650      	mov	r0, sl
 8004a8a:	4659      	mov	r1, fp
 8004a8c:	f7fb fb64 	bl	8000158 <__aeabi_dsub>
 8004a90:	4632      	mov	r2, r6
 8004a92:	463b      	mov	r3, r7
 8004a94:	f7fb fb60 	bl	8000158 <__aeabi_dsub>
 8004a98:	a319      	add	r3, pc, #100	; (adr r3, 8004b00 <__ieee754_rem_pio2+0x308>)
 8004a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a9e:	4606      	mov	r6, r0
 8004aa0:	460f      	mov	r7, r1
 8004aa2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004aa6:	f7fb fd0f 	bl	80004c8 <__aeabi_dmul>
 8004aaa:	4632      	mov	r2, r6
 8004aac:	463b      	mov	r3, r7
 8004aae:	f7fb fb53 	bl	8000158 <__aeabi_dsub>
 8004ab2:	4606      	mov	r6, r0
 8004ab4:	460f      	mov	r7, r1
 8004ab6:	e75f      	b.n	8004978 <__ieee754_rem_pio2+0x180>
 8004ab8:	4a19      	ldr	r2, [pc, #100]	; (8004b20 <__ieee754_rem_pio2+0x328>)
 8004aba:	4592      	cmp	sl, r2
 8004abc:	dd32      	ble.n	8004b24 <__ieee754_rem_pio2+0x32c>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	460b      	mov	r3, r1
 8004ac2:	f7fb fb49 	bl	8000158 <__aeabi_dsub>
 8004ac6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004aca:	e9c4 0100 	strd	r0, r1, [r4]
 8004ace:	e6a3      	b.n	8004818 <__ieee754_rem_pio2+0x20>
 8004ad0:	54400000 	.word	0x54400000
 8004ad4:	3ff921fb 	.word	0x3ff921fb
 8004ad8:	1a626331 	.word	0x1a626331
 8004adc:	3dd0b461 	.word	0x3dd0b461
 8004ae0:	1a600000 	.word	0x1a600000
 8004ae4:	3dd0b461 	.word	0x3dd0b461
 8004ae8:	2e037073 	.word	0x2e037073
 8004aec:	3ba3198a 	.word	0x3ba3198a
 8004af0:	6dc9c883 	.word	0x6dc9c883
 8004af4:	3fe45f30 	.word	0x3fe45f30
 8004af8:	2e000000 	.word	0x2e000000
 8004afc:	3ba3198a 	.word	0x3ba3198a
 8004b00:	252049c1 	.word	0x252049c1
 8004b04:	397b839a 	.word	0x397b839a
 8004b08:	3fe921fb 	.word	0x3fe921fb
 8004b0c:	4002d97b 	.word	0x4002d97b
 8004b10:	3ff921fb 	.word	0x3ff921fb
 8004b14:	413921fb 	.word	0x413921fb
 8004b18:	3fe00000 	.word	0x3fe00000
 8004b1c:	080054a4 	.word	0x080054a4
 8004b20:	7fefffff 	.word	0x7fefffff
 8004b24:	ea4f 552a 	mov.w	r5, sl, asr #20
 8004b28:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8004b2c:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8004b30:	460f      	mov	r7, r1
 8004b32:	4606      	mov	r6, r0
 8004b34:	f7fb ff62 	bl	80009fc <__aeabi_d2iz>
 8004b38:	f7fb fc5c 	bl	80003f4 <__aeabi_i2d>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	460b      	mov	r3, r1
 8004b40:	4630      	mov	r0, r6
 8004b42:	4639      	mov	r1, r7
 8004b44:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004b48:	f7fb fb06 	bl	8000158 <__aeabi_dsub>
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	4b22      	ldr	r3, [pc, #136]	; (8004bd8 <__ieee754_rem_pio2+0x3e0>)
 8004b50:	f7fb fcba 	bl	80004c8 <__aeabi_dmul>
 8004b54:	460f      	mov	r7, r1
 8004b56:	4606      	mov	r6, r0
 8004b58:	f7fb ff50 	bl	80009fc <__aeabi_d2iz>
 8004b5c:	f7fb fc4a 	bl	80003f4 <__aeabi_i2d>
 8004b60:	4602      	mov	r2, r0
 8004b62:	460b      	mov	r3, r1
 8004b64:	4630      	mov	r0, r6
 8004b66:	4639      	mov	r1, r7
 8004b68:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004b6c:	f7fb faf4 	bl	8000158 <__aeabi_dsub>
 8004b70:	2200      	movs	r2, #0
 8004b72:	4b19      	ldr	r3, [pc, #100]	; (8004bd8 <__ieee754_rem_pio2+0x3e0>)
 8004b74:	f7fb fca8 	bl	80004c8 <__aeabi_dmul>
 8004b78:	f04f 0803 	mov.w	r8, #3
 8004b7c:	2600      	movs	r6, #0
 8004b7e:	2700      	movs	r7, #0
 8004b80:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004b84:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8004b88:	4632      	mov	r2, r6
 8004b8a:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8004b8e:	463b      	mov	r3, r7
 8004b90:	46c2      	mov	sl, r8
 8004b92:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8004b96:	f7fb feff 	bl	8000998 <__aeabi_dcmpeq>
 8004b9a:	2800      	cmp	r0, #0
 8004b9c:	d1f4      	bne.n	8004b88 <__ieee754_rem_pio2+0x390>
 8004b9e:	4b0f      	ldr	r3, [pc, #60]	; (8004bdc <__ieee754_rem_pio2+0x3e4>)
 8004ba0:	462a      	mov	r2, r5
 8004ba2:	9301      	str	r3, [sp, #4]
 8004ba4:	2302      	movs	r3, #2
 8004ba6:	4621      	mov	r1, r4
 8004ba8:	9300      	str	r3, [sp, #0]
 8004baa:	a806      	add	r0, sp, #24
 8004bac:	4653      	mov	r3, sl
 8004bae:	f000 f81b 	bl	8004be8 <__kernel_rem_pio2>
 8004bb2:	9b04      	ldr	r3, [sp, #16]
 8004bb4:	4605      	mov	r5, r0
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	f6bf ae55 	bge.w	8004866 <__ieee754_rem_pio2+0x6e>
 8004bbc:	e9d4 2100 	ldrd	r2, r1, [r4]
 8004bc0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004bc4:	e9c4 2300 	strd	r2, r3, [r4]
 8004bc8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8004bcc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004bd0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8004bd4:	e706      	b.n	80049e4 <__ieee754_rem_pio2+0x1ec>
 8004bd6:	bf00      	nop
 8004bd8:	41700000 	.word	0x41700000
 8004bdc:	08005524 	.word	0x08005524

08004be0 <fabs>:
 8004be0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004be4:	4619      	mov	r1, r3
 8004be6:	4770      	bx	lr

08004be8 <__kernel_rem_pio2>:
 8004be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bec:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8004bf0:	9308      	str	r3, [sp, #32]
 8004bf2:	9106      	str	r1, [sp, #24]
 8004bf4:	4bb6      	ldr	r3, [pc, #728]	; (8004ed0 <__kernel_rem_pio2+0x2e8>)
 8004bf6:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8004bf8:	f112 0f14 	cmn.w	r2, #20
 8004bfc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004c00:	bfa8      	it	ge
 8004c02:	1ed4      	subge	r4, r2, #3
 8004c04:	9302      	str	r3, [sp, #8]
 8004c06:	9b08      	ldr	r3, [sp, #32]
 8004c08:	bfb8      	it	lt
 8004c0a:	2400      	movlt	r4, #0
 8004c0c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8004c10:	9307      	str	r3, [sp, #28]
 8004c12:	bfa4      	itt	ge
 8004c14:	2318      	movge	r3, #24
 8004c16:	fb94 f4f3 	sdivge	r4, r4, r3
 8004c1a:	f06f 0317 	mvn.w	r3, #23
 8004c1e:	fb04 3303 	mla	r3, r4, r3, r3
 8004c22:	eb03 0b02 	add.w	fp, r3, r2
 8004c26:	9a07      	ldr	r2, [sp, #28]
 8004c28:	9b02      	ldr	r3, [sp, #8]
 8004c2a:	1aa7      	subs	r7, r4, r2
 8004c2c:	eb03 0802 	add.w	r8, r3, r2
 8004c30:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8004c32:	2500      	movs	r5, #0
 8004c34:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8004c38:	2200      	movs	r2, #0
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	9009      	str	r0, [sp, #36]	; 0x24
 8004c3e:	ae20      	add	r6, sp, #128	; 0x80
 8004c40:	4545      	cmp	r5, r8
 8004c42:	dd14      	ble.n	8004c6e <__kernel_rem_pio2+0x86>
 8004c44:	f04f 0800 	mov.w	r8, #0
 8004c48:	9a08      	ldr	r2, [sp, #32]
 8004c4a:	ab20      	add	r3, sp, #128	; 0x80
 8004c4c:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 8004c50:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 8004c54:	9b02      	ldr	r3, [sp, #8]
 8004c56:	4598      	cmp	r8, r3
 8004c58:	dc35      	bgt.n	8004cc6 <__kernel_rem_pio2+0xde>
 8004c5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f1a3 0908 	sub.w	r9, r3, #8
 8004c62:	2300      	movs	r3, #0
 8004c64:	462f      	mov	r7, r5
 8004c66:	2600      	movs	r6, #0
 8004c68:	e9cd 2300 	strd	r2, r3, [sp]
 8004c6c:	e01f      	b.n	8004cae <__kernel_rem_pio2+0xc6>
 8004c6e:	42ef      	cmn	r7, r5
 8004c70:	d40b      	bmi.n	8004c8a <__kernel_rem_pio2+0xa2>
 8004c72:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8004c76:	e9cd 2300 	strd	r2, r3, [sp]
 8004c7a:	f7fb fbbb 	bl	80003f4 <__aeabi_i2d>
 8004c7e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004c82:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004c86:	3501      	adds	r5, #1
 8004c88:	e7da      	b.n	8004c40 <__kernel_rem_pio2+0x58>
 8004c8a:	4610      	mov	r0, r2
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	e7f8      	b.n	8004c82 <__kernel_rem_pio2+0x9a>
 8004c90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c94:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8004c98:	f7fb fc16 	bl	80004c8 <__aeabi_dmul>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	460b      	mov	r3, r1
 8004ca0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004ca4:	f7fb fa5a 	bl	800015c <__adddf3>
 8004ca8:	e9cd 0100 	strd	r0, r1, [sp]
 8004cac:	3601      	adds	r6, #1
 8004cae:	9b07      	ldr	r3, [sp, #28]
 8004cb0:	3f08      	subs	r7, #8
 8004cb2:	429e      	cmp	r6, r3
 8004cb4:	ddec      	ble.n	8004c90 <__kernel_rem_pio2+0xa8>
 8004cb6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004cba:	f108 0801 	add.w	r8, r8, #1
 8004cbe:	e8ea 2302 	strd	r2, r3, [sl], #8
 8004cc2:	3508      	adds	r5, #8
 8004cc4:	e7c6      	b.n	8004c54 <__kernel_rem_pio2+0x6c>
 8004cc6:	9b02      	ldr	r3, [sp, #8]
 8004cc8:	aa0c      	add	r2, sp, #48	; 0x30
 8004cca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004cce:	930b      	str	r3, [sp, #44]	; 0x2c
 8004cd0:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8004cd2:	9e02      	ldr	r6, [sp, #8]
 8004cd4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8004cd8:	930a      	str	r3, [sp, #40]	; 0x28
 8004cda:	ab98      	add	r3, sp, #608	; 0x260
 8004cdc:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004ce0:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 8004ce4:	ab70      	add	r3, sp, #448	; 0x1c0
 8004ce6:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 8004cea:	46d0      	mov	r8, sl
 8004cec:	46b1      	mov	r9, r6
 8004cee:	af0c      	add	r7, sp, #48	; 0x30
 8004cf0:	9700      	str	r7, [sp, #0]
 8004cf2:	f1b9 0f00 	cmp.w	r9, #0
 8004cf6:	f1a8 0808 	sub.w	r8, r8, #8
 8004cfa:	dc70      	bgt.n	8004dde <__kernel_rem_pio2+0x1f6>
 8004cfc:	465a      	mov	r2, fp
 8004cfe:	4620      	mov	r0, r4
 8004d00:	4629      	mov	r1, r5
 8004d02:	f000 fab1 	bl	8005268 <scalbn>
 8004d06:	2200      	movs	r2, #0
 8004d08:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8004d0c:	4604      	mov	r4, r0
 8004d0e:	460d      	mov	r5, r1
 8004d10:	f7fb fbda 	bl	80004c8 <__aeabi_dmul>
 8004d14:	f000 fb24 	bl	8005360 <floor>
 8004d18:	2200      	movs	r2, #0
 8004d1a:	4b6e      	ldr	r3, [pc, #440]	; (8004ed4 <__kernel_rem_pio2+0x2ec>)
 8004d1c:	f7fb fbd4 	bl	80004c8 <__aeabi_dmul>
 8004d20:	4602      	mov	r2, r0
 8004d22:	460b      	mov	r3, r1
 8004d24:	4620      	mov	r0, r4
 8004d26:	4629      	mov	r1, r5
 8004d28:	f7fb fa16 	bl	8000158 <__aeabi_dsub>
 8004d2c:	460d      	mov	r5, r1
 8004d2e:	4604      	mov	r4, r0
 8004d30:	f7fb fe64 	bl	80009fc <__aeabi_d2iz>
 8004d34:	9004      	str	r0, [sp, #16]
 8004d36:	f7fb fb5d 	bl	80003f4 <__aeabi_i2d>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	4620      	mov	r0, r4
 8004d40:	4629      	mov	r1, r5
 8004d42:	f7fb fa09 	bl	8000158 <__aeabi_dsub>
 8004d46:	f1bb 0f00 	cmp.w	fp, #0
 8004d4a:	4680      	mov	r8, r0
 8004d4c:	4689      	mov	r9, r1
 8004d4e:	dd6f      	ble.n	8004e30 <__kernel_rem_pio2+0x248>
 8004d50:	1e71      	subs	r1, r6, #1
 8004d52:	ab0c      	add	r3, sp, #48	; 0x30
 8004d54:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004d58:	9c04      	ldr	r4, [sp, #16]
 8004d5a:	f1cb 0018 	rsb	r0, fp, #24
 8004d5e:	fa43 f200 	asr.w	r2, r3, r0
 8004d62:	4414      	add	r4, r2
 8004d64:	4082      	lsls	r2, r0
 8004d66:	1a9b      	subs	r3, r3, r2
 8004d68:	aa0c      	add	r2, sp, #48	; 0x30
 8004d6a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8004d6e:	f1cb 0217 	rsb	r2, fp, #23
 8004d72:	9404      	str	r4, [sp, #16]
 8004d74:	4113      	asrs	r3, r2
 8004d76:	9300      	str	r3, [sp, #0]
 8004d78:	9b00      	ldr	r3, [sp, #0]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	dd66      	ble.n	8004e4c <__kernel_rem_pio2+0x264>
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8004d84:	4614      	mov	r4, r2
 8004d86:	9b04      	ldr	r3, [sp, #16]
 8004d88:	3301      	adds	r3, #1
 8004d8a:	9304      	str	r3, [sp, #16]
 8004d8c:	4296      	cmp	r6, r2
 8004d8e:	f300 80ad 	bgt.w	8004eec <__kernel_rem_pio2+0x304>
 8004d92:	f1bb 0f00 	cmp.w	fp, #0
 8004d96:	dd07      	ble.n	8004da8 <__kernel_rem_pio2+0x1c0>
 8004d98:	f1bb 0f01 	cmp.w	fp, #1
 8004d9c:	f000 80b5 	beq.w	8004f0a <__kernel_rem_pio2+0x322>
 8004da0:	f1bb 0f02 	cmp.w	fp, #2
 8004da4:	f000 80bb 	beq.w	8004f1e <__kernel_rem_pio2+0x336>
 8004da8:	9b00      	ldr	r3, [sp, #0]
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d14e      	bne.n	8004e4c <__kernel_rem_pio2+0x264>
 8004dae:	4642      	mov	r2, r8
 8004db0:	464b      	mov	r3, r9
 8004db2:	2000      	movs	r0, #0
 8004db4:	4948      	ldr	r1, [pc, #288]	; (8004ed8 <__kernel_rem_pio2+0x2f0>)
 8004db6:	f7fb f9cf 	bl	8000158 <__aeabi_dsub>
 8004dba:	4680      	mov	r8, r0
 8004dbc:	4689      	mov	r9, r1
 8004dbe:	2c00      	cmp	r4, #0
 8004dc0:	d044      	beq.n	8004e4c <__kernel_rem_pio2+0x264>
 8004dc2:	465a      	mov	r2, fp
 8004dc4:	2000      	movs	r0, #0
 8004dc6:	4944      	ldr	r1, [pc, #272]	; (8004ed8 <__kernel_rem_pio2+0x2f0>)
 8004dc8:	f000 fa4e 	bl	8005268 <scalbn>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	460b      	mov	r3, r1
 8004dd0:	4640      	mov	r0, r8
 8004dd2:	4649      	mov	r1, r9
 8004dd4:	f7fb f9c0 	bl	8000158 <__aeabi_dsub>
 8004dd8:	4680      	mov	r8, r0
 8004dda:	4689      	mov	r9, r1
 8004ddc:	e036      	b.n	8004e4c <__kernel_rem_pio2+0x264>
 8004dde:	2200      	movs	r2, #0
 8004de0:	4b3e      	ldr	r3, [pc, #248]	; (8004edc <__kernel_rem_pio2+0x2f4>)
 8004de2:	4620      	mov	r0, r4
 8004de4:	4629      	mov	r1, r5
 8004de6:	f7fb fb6f 	bl	80004c8 <__aeabi_dmul>
 8004dea:	f7fb fe07 	bl	80009fc <__aeabi_d2iz>
 8004dee:	f7fb fb01 	bl	80003f4 <__aeabi_i2d>
 8004df2:	4602      	mov	r2, r0
 8004df4:	460b      	mov	r3, r1
 8004df6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	4b38      	ldr	r3, [pc, #224]	; (8004ee0 <__kernel_rem_pio2+0x2f8>)
 8004dfe:	f7fb fb63 	bl	80004c8 <__aeabi_dmul>
 8004e02:	4602      	mov	r2, r0
 8004e04:	460b      	mov	r3, r1
 8004e06:	4620      	mov	r0, r4
 8004e08:	4629      	mov	r1, r5
 8004e0a:	f7fb f9a5 	bl	8000158 <__aeabi_dsub>
 8004e0e:	f7fb fdf5 	bl	80009fc <__aeabi_d2iz>
 8004e12:	9b00      	ldr	r3, [sp, #0]
 8004e14:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8004e18:	f843 0b04 	str.w	r0, [r3], #4
 8004e1c:	9300      	str	r3, [sp, #0]
 8004e1e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004e22:	e9d8 2300 	ldrd	r2, r3, [r8]
 8004e26:	f7fb f999 	bl	800015c <__adddf3>
 8004e2a:	4604      	mov	r4, r0
 8004e2c:	460d      	mov	r5, r1
 8004e2e:	e760      	b.n	8004cf2 <__kernel_rem_pio2+0x10a>
 8004e30:	d105      	bne.n	8004e3e <__kernel_rem_pio2+0x256>
 8004e32:	1e73      	subs	r3, r6, #1
 8004e34:	aa0c      	add	r2, sp, #48	; 0x30
 8004e36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e3a:	15db      	asrs	r3, r3, #23
 8004e3c:	e79b      	b.n	8004d76 <__kernel_rem_pio2+0x18e>
 8004e3e:	2200      	movs	r2, #0
 8004e40:	4b28      	ldr	r3, [pc, #160]	; (8004ee4 <__kernel_rem_pio2+0x2fc>)
 8004e42:	f7fb fdc7 	bl	80009d4 <__aeabi_dcmpge>
 8004e46:	2800      	cmp	r0, #0
 8004e48:	d13e      	bne.n	8004ec8 <__kernel_rem_pio2+0x2e0>
 8004e4a:	9000      	str	r0, [sp, #0]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	2300      	movs	r3, #0
 8004e50:	4640      	mov	r0, r8
 8004e52:	4649      	mov	r1, r9
 8004e54:	f7fb fda0 	bl	8000998 <__aeabi_dcmpeq>
 8004e58:	2800      	cmp	r0, #0
 8004e5a:	f000 80b2 	beq.w	8004fc2 <__kernel_rem_pio2+0x3da>
 8004e5e:	1e74      	subs	r4, r6, #1
 8004e60:	4623      	mov	r3, r4
 8004e62:	2200      	movs	r2, #0
 8004e64:	9902      	ldr	r1, [sp, #8]
 8004e66:	428b      	cmp	r3, r1
 8004e68:	da60      	bge.n	8004f2c <__kernel_rem_pio2+0x344>
 8004e6a:	2a00      	cmp	r2, #0
 8004e6c:	d075      	beq.n	8004f5a <__kernel_rem_pio2+0x372>
 8004e6e:	ab0c      	add	r3, sp, #48	; 0x30
 8004e70:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8004e74:	f1ab 0b18 	sub.w	fp, fp, #24
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	f000 80a0 	beq.w	8004fbe <__kernel_rem_pio2+0x3d6>
 8004e7e:	465a      	mov	r2, fp
 8004e80:	2000      	movs	r0, #0
 8004e82:	4915      	ldr	r1, [pc, #84]	; (8004ed8 <__kernel_rem_pio2+0x2f0>)
 8004e84:	f000 f9f0 	bl	8005268 <scalbn>
 8004e88:	46a2      	mov	sl, r4
 8004e8a:	4606      	mov	r6, r0
 8004e8c:	460f      	mov	r7, r1
 8004e8e:	f04f 0800 	mov.w	r8, #0
 8004e92:	ab70      	add	r3, sp, #448	; 0x1c0
 8004e94:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8004edc <__kernel_rem_pio2+0x2f4>
 8004e98:	00e5      	lsls	r5, r4, #3
 8004e9a:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 8004e9e:	f1ba 0f00 	cmp.w	sl, #0
 8004ea2:	f280 80c4 	bge.w	800502e <__kernel_rem_pio2+0x446>
 8004ea6:	4626      	mov	r6, r4
 8004ea8:	2e00      	cmp	r6, #0
 8004eaa:	f2c0 80f6 	blt.w	800509a <__kernel_rem_pio2+0x4b2>
 8004eae:	4b0e      	ldr	r3, [pc, #56]	; (8004ee8 <__kernel_rem_pio2+0x300>)
 8004eb0:	f04f 0a00 	mov.w	sl, #0
 8004eb4:	9307      	str	r3, [sp, #28]
 8004eb6:	ab70      	add	r3, sp, #448	; 0x1c0
 8004eb8:	f04f 0b00 	mov.w	fp, #0
 8004ebc:	f04f 0800 	mov.w	r8, #0
 8004ec0:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8004ec4:	1ba7      	subs	r7, r4, r6
 8004ec6:	e0dc      	b.n	8005082 <__kernel_rem_pio2+0x49a>
 8004ec8:	2302      	movs	r3, #2
 8004eca:	9300      	str	r3, [sp, #0]
 8004ecc:	e757      	b.n	8004d7e <__kernel_rem_pio2+0x196>
 8004ece:	bf00      	nop
 8004ed0:	08005670 	.word	0x08005670
 8004ed4:	40200000 	.word	0x40200000
 8004ed8:	3ff00000 	.word	0x3ff00000
 8004edc:	3e700000 	.word	0x3e700000
 8004ee0:	41700000 	.word	0x41700000
 8004ee4:	3fe00000 	.word	0x3fe00000
 8004ee8:	08005630 	.word	0x08005630
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	b944      	cbnz	r4, 8004f02 <__kernel_rem_pio2+0x31a>
 8004ef0:	b11b      	cbz	r3, 8004efa <__kernel_rem_pio2+0x312>
 8004ef2:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8004ef6:	603b      	str	r3, [r7, #0]
 8004ef8:	2301      	movs	r3, #1
 8004efa:	461c      	mov	r4, r3
 8004efc:	3201      	adds	r2, #1
 8004efe:	3704      	adds	r7, #4
 8004f00:	e744      	b.n	8004d8c <__kernel_rem_pio2+0x1a4>
 8004f02:	1acb      	subs	r3, r1, r3
 8004f04:	603b      	str	r3, [r7, #0]
 8004f06:	4623      	mov	r3, r4
 8004f08:	e7f7      	b.n	8004efa <__kernel_rem_pio2+0x312>
 8004f0a:	1e72      	subs	r2, r6, #1
 8004f0c:	ab0c      	add	r3, sp, #48	; 0x30
 8004f0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f12:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8004f16:	a90c      	add	r1, sp, #48	; 0x30
 8004f18:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8004f1c:	e744      	b.n	8004da8 <__kernel_rem_pio2+0x1c0>
 8004f1e:	1e72      	subs	r2, r6, #1
 8004f20:	ab0c      	add	r3, sp, #48	; 0x30
 8004f22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f26:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004f2a:	e7f4      	b.n	8004f16 <__kernel_rem_pio2+0x32e>
 8004f2c:	a90c      	add	r1, sp, #48	; 0x30
 8004f2e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8004f32:	3b01      	subs	r3, #1
 8004f34:	430a      	orrs	r2, r1
 8004f36:	e795      	b.n	8004e64 <__kernel_rem_pio2+0x27c>
 8004f38:	3301      	adds	r3, #1
 8004f3a:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8004f3e:	2900      	cmp	r1, #0
 8004f40:	d0fa      	beq.n	8004f38 <__kernel_rem_pio2+0x350>
 8004f42:	9a08      	ldr	r2, [sp, #32]
 8004f44:	a920      	add	r1, sp, #128	; 0x80
 8004f46:	18b2      	adds	r2, r6, r2
 8004f48:	f106 0801 	add.w	r8, r6, #1
 8004f4c:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8004f50:	18f4      	adds	r4, r6, r3
 8004f52:	4544      	cmp	r4, r8
 8004f54:	da04      	bge.n	8004f60 <__kernel_rem_pio2+0x378>
 8004f56:	4626      	mov	r6, r4
 8004f58:	e6bf      	b.n	8004cda <__kernel_rem_pio2+0xf2>
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004f5e:	e7ec      	b.n	8004f3a <__kernel_rem_pio2+0x352>
 8004f60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f62:	f04f 0900 	mov.w	r9, #0
 8004f66:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8004f6a:	f7fb fa43 	bl	80003f4 <__aeabi_i2d>
 8004f6e:	2600      	movs	r6, #0
 8004f70:	2700      	movs	r7, #0
 8004f72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f74:	e9c5 0100 	strd	r0, r1, [r5]
 8004f78:	3b08      	subs	r3, #8
 8004f7a:	9300      	str	r3, [sp, #0]
 8004f7c:	9504      	str	r5, [sp, #16]
 8004f7e:	9b07      	ldr	r3, [sp, #28]
 8004f80:	4599      	cmp	r9, r3
 8004f82:	dd05      	ble.n	8004f90 <__kernel_rem_pio2+0x3a8>
 8004f84:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 8004f88:	f108 0801 	add.w	r8, r8, #1
 8004f8c:	3508      	adds	r5, #8
 8004f8e:	e7e0      	b.n	8004f52 <__kernel_rem_pio2+0x36a>
 8004f90:	f8dd c010 	ldr.w	ip, [sp, #16]
 8004f94:	9900      	ldr	r1, [sp, #0]
 8004f96:	f109 0901 	add.w	r9, r9, #1
 8004f9a:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 8004f9e:	9100      	str	r1, [sp, #0]
 8004fa0:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 8004fa4:	f8cd c010 	str.w	ip, [sp, #16]
 8004fa8:	f7fb fa8e 	bl	80004c8 <__aeabi_dmul>
 8004fac:	4602      	mov	r2, r0
 8004fae:	460b      	mov	r3, r1
 8004fb0:	4630      	mov	r0, r6
 8004fb2:	4639      	mov	r1, r7
 8004fb4:	f7fb f8d2 	bl	800015c <__adddf3>
 8004fb8:	4606      	mov	r6, r0
 8004fba:	460f      	mov	r7, r1
 8004fbc:	e7df      	b.n	8004f7e <__kernel_rem_pio2+0x396>
 8004fbe:	3c01      	subs	r4, #1
 8004fc0:	e755      	b.n	8004e6e <__kernel_rem_pio2+0x286>
 8004fc2:	f1cb 0200 	rsb	r2, fp, #0
 8004fc6:	4640      	mov	r0, r8
 8004fc8:	4649      	mov	r1, r9
 8004fca:	f000 f94d 	bl	8005268 <scalbn>
 8004fce:	2200      	movs	r2, #0
 8004fd0:	4ba3      	ldr	r3, [pc, #652]	; (8005260 <__kernel_rem_pio2+0x678>)
 8004fd2:	4604      	mov	r4, r0
 8004fd4:	460d      	mov	r5, r1
 8004fd6:	f7fb fcfd 	bl	80009d4 <__aeabi_dcmpge>
 8004fda:	b1f8      	cbz	r0, 800501c <__kernel_rem_pio2+0x434>
 8004fdc:	2200      	movs	r2, #0
 8004fde:	4ba1      	ldr	r3, [pc, #644]	; (8005264 <__kernel_rem_pio2+0x67c>)
 8004fe0:	4620      	mov	r0, r4
 8004fe2:	4629      	mov	r1, r5
 8004fe4:	f7fb fa70 	bl	80004c8 <__aeabi_dmul>
 8004fe8:	f7fb fd08 	bl	80009fc <__aeabi_d2iz>
 8004fec:	4607      	mov	r7, r0
 8004fee:	f7fb fa01 	bl	80003f4 <__aeabi_i2d>
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	4b9a      	ldr	r3, [pc, #616]	; (8005260 <__kernel_rem_pio2+0x678>)
 8004ff6:	f7fb fa67 	bl	80004c8 <__aeabi_dmul>
 8004ffa:	460b      	mov	r3, r1
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	4629      	mov	r1, r5
 8005000:	4620      	mov	r0, r4
 8005002:	f7fb f8a9 	bl	8000158 <__aeabi_dsub>
 8005006:	f7fb fcf9 	bl	80009fc <__aeabi_d2iz>
 800500a:	1c74      	adds	r4, r6, #1
 800500c:	ab0c      	add	r3, sp, #48	; 0x30
 800500e:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8005012:	f10b 0b18 	add.w	fp, fp, #24
 8005016:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 800501a:	e730      	b.n	8004e7e <__kernel_rem_pio2+0x296>
 800501c:	4620      	mov	r0, r4
 800501e:	4629      	mov	r1, r5
 8005020:	f7fb fcec 	bl	80009fc <__aeabi_d2iz>
 8005024:	ab0c      	add	r3, sp, #48	; 0x30
 8005026:	4634      	mov	r4, r6
 8005028:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800502c:	e727      	b.n	8004e7e <__kernel_rem_pio2+0x296>
 800502e:	ab0c      	add	r3, sp, #48	; 0x30
 8005030:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8005034:	f7fb f9de 	bl	80003f4 <__aeabi_i2d>
 8005038:	4632      	mov	r2, r6
 800503a:	463b      	mov	r3, r7
 800503c:	f7fb fa44 	bl	80004c8 <__aeabi_dmul>
 8005040:	4642      	mov	r2, r8
 8005042:	e86b 0102 	strd	r0, r1, [fp], #-8
 8005046:	464b      	mov	r3, r9
 8005048:	4630      	mov	r0, r6
 800504a:	4639      	mov	r1, r7
 800504c:	f7fb fa3c 	bl	80004c8 <__aeabi_dmul>
 8005050:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005054:	4606      	mov	r6, r0
 8005056:	460f      	mov	r7, r1
 8005058:	e721      	b.n	8004e9e <__kernel_rem_pio2+0x2b6>
 800505a:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800505e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8005062:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 8005066:	f8cd c01c 	str.w	ip, [sp, #28]
 800506a:	f7fb fa2d 	bl	80004c8 <__aeabi_dmul>
 800506e:	4602      	mov	r2, r0
 8005070:	460b      	mov	r3, r1
 8005072:	4650      	mov	r0, sl
 8005074:	4659      	mov	r1, fp
 8005076:	f7fb f871 	bl	800015c <__adddf3>
 800507a:	4682      	mov	sl, r0
 800507c:	468b      	mov	fp, r1
 800507e:	f108 0801 	add.w	r8, r8, #1
 8005082:	9b02      	ldr	r3, [sp, #8]
 8005084:	4598      	cmp	r8, r3
 8005086:	dc01      	bgt.n	800508c <__kernel_rem_pio2+0x4a4>
 8005088:	45b8      	cmp	r8, r7
 800508a:	dde6      	ble.n	800505a <__kernel_rem_pio2+0x472>
 800508c:	ab48      	add	r3, sp, #288	; 0x120
 800508e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8005092:	e9c7 ab00 	strd	sl, fp, [r7]
 8005096:	3e01      	subs	r6, #1
 8005098:	e706      	b.n	8004ea8 <__kernel_rem_pio2+0x2c0>
 800509a:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800509c:	2b02      	cmp	r3, #2
 800509e:	dc09      	bgt.n	80050b4 <__kernel_rem_pio2+0x4cc>
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	dc32      	bgt.n	800510a <__kernel_rem_pio2+0x522>
 80050a4:	d058      	beq.n	8005158 <__kernel_rem_pio2+0x570>
 80050a6:	9b04      	ldr	r3, [sp, #16]
 80050a8:	f003 0007 	and.w	r0, r3, #7
 80050ac:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80050b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050b4:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80050b6:	2b03      	cmp	r3, #3
 80050b8:	d1f5      	bne.n	80050a6 <__kernel_rem_pio2+0x4be>
 80050ba:	ab48      	add	r3, sp, #288	; 0x120
 80050bc:	441d      	add	r5, r3
 80050be:	46aa      	mov	sl, r5
 80050c0:	46a3      	mov	fp, r4
 80050c2:	f1bb 0f00 	cmp.w	fp, #0
 80050c6:	dc74      	bgt.n	80051b2 <__kernel_rem_pio2+0x5ca>
 80050c8:	46aa      	mov	sl, r5
 80050ca:	46a3      	mov	fp, r4
 80050cc:	f1bb 0f01 	cmp.w	fp, #1
 80050d0:	f300 808e 	bgt.w	80051f0 <__kernel_rem_pio2+0x608>
 80050d4:	2700      	movs	r7, #0
 80050d6:	463e      	mov	r6, r7
 80050d8:	2c01      	cmp	r4, #1
 80050da:	f300 80a8 	bgt.w	800522e <__kernel_rem_pio2+0x646>
 80050de:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 80050e2:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 80050e6:	9b00      	ldr	r3, [sp, #0]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	f040 80aa 	bne.w	8005242 <__kernel_rem_pio2+0x65a>
 80050ee:	4603      	mov	r3, r0
 80050f0:	462a      	mov	r2, r5
 80050f2:	9806      	ldr	r0, [sp, #24]
 80050f4:	e9c0 2300 	strd	r2, r3, [r0]
 80050f8:	4622      	mov	r2, r4
 80050fa:	460b      	mov	r3, r1
 80050fc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8005100:	463a      	mov	r2, r7
 8005102:	4633      	mov	r3, r6
 8005104:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8005108:	e7cd      	b.n	80050a6 <__kernel_rem_pio2+0x4be>
 800510a:	2000      	movs	r0, #0
 800510c:	46a0      	mov	r8, r4
 800510e:	4601      	mov	r1, r0
 8005110:	ab48      	add	r3, sp, #288	; 0x120
 8005112:	441d      	add	r5, r3
 8005114:	f1b8 0f00 	cmp.w	r8, #0
 8005118:	da38      	bge.n	800518c <__kernel_rem_pio2+0x5a4>
 800511a:	9b00      	ldr	r3, [sp, #0]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d03c      	beq.n	800519a <__kernel_rem_pio2+0x5b2>
 8005120:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 8005124:	4602      	mov	r2, r0
 8005126:	462b      	mov	r3, r5
 8005128:	9d06      	ldr	r5, [sp, #24]
 800512a:	2601      	movs	r6, #1
 800512c:	e9c5 2300 	strd	r2, r3, [r5]
 8005130:	460b      	mov	r3, r1
 8005132:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8005136:	f7fb f80f 	bl	8000158 <__aeabi_dsub>
 800513a:	4684      	mov	ip, r0
 800513c:	460f      	mov	r7, r1
 800513e:	ad48      	add	r5, sp, #288	; 0x120
 8005140:	42b4      	cmp	r4, r6
 8005142:	da2c      	bge.n	800519e <__kernel_rem_pio2+0x5b6>
 8005144:	9b00      	ldr	r3, [sp, #0]
 8005146:	b10b      	cbz	r3, 800514c <__kernel_rem_pio2+0x564>
 8005148:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800514c:	4662      	mov	r2, ip
 800514e:	463b      	mov	r3, r7
 8005150:	9906      	ldr	r1, [sp, #24]
 8005152:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8005156:	e7a6      	b.n	80050a6 <__kernel_rem_pio2+0x4be>
 8005158:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 800515a:	ab48      	add	r3, sp, #288	; 0x120
 800515c:	4637      	mov	r7, r6
 800515e:	441d      	add	r5, r3
 8005160:	2c00      	cmp	r4, #0
 8005162:	da09      	bge.n	8005178 <__kernel_rem_pio2+0x590>
 8005164:	9b00      	ldr	r3, [sp, #0]
 8005166:	b10b      	cbz	r3, 800516c <__kernel_rem_pio2+0x584>
 8005168:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800516c:	4632      	mov	r2, r6
 800516e:	463b      	mov	r3, r7
 8005170:	9906      	ldr	r1, [sp, #24]
 8005172:	e9c1 2300 	strd	r2, r3, [r1]
 8005176:	e796      	b.n	80050a6 <__kernel_rem_pio2+0x4be>
 8005178:	4630      	mov	r0, r6
 800517a:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800517e:	4639      	mov	r1, r7
 8005180:	f7fa ffec 	bl	800015c <__adddf3>
 8005184:	3c01      	subs	r4, #1
 8005186:	4606      	mov	r6, r0
 8005188:	460f      	mov	r7, r1
 800518a:	e7e9      	b.n	8005160 <__kernel_rem_pio2+0x578>
 800518c:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8005190:	f7fa ffe4 	bl	800015c <__adddf3>
 8005194:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8005198:	e7bc      	b.n	8005114 <__kernel_rem_pio2+0x52c>
 800519a:	460d      	mov	r5, r1
 800519c:	e7c2      	b.n	8005124 <__kernel_rem_pio2+0x53c>
 800519e:	4660      	mov	r0, ip
 80051a0:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 80051a4:	4639      	mov	r1, r7
 80051a6:	f7fa ffd9 	bl	800015c <__adddf3>
 80051aa:	3601      	adds	r6, #1
 80051ac:	4684      	mov	ip, r0
 80051ae:	460f      	mov	r7, r1
 80051b0:	e7c6      	b.n	8005140 <__kernel_rem_pio2+0x558>
 80051b2:	e9da 6700 	ldrd	r6, r7, [sl]
 80051b6:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 80051ba:	4632      	mov	r2, r6
 80051bc:	463b      	mov	r3, r7
 80051be:	4640      	mov	r0, r8
 80051c0:	4649      	mov	r1, r9
 80051c2:	f7fa ffcb 	bl	800015c <__adddf3>
 80051c6:	4602      	mov	r2, r0
 80051c8:	460b      	mov	r3, r1
 80051ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80051ce:	4640      	mov	r0, r8
 80051d0:	4649      	mov	r1, r9
 80051d2:	f7fa ffc1 	bl	8000158 <__aeabi_dsub>
 80051d6:	4632      	mov	r2, r6
 80051d8:	463b      	mov	r3, r7
 80051da:	f7fa ffbf 	bl	800015c <__adddf3>
 80051de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80051e2:	e86a 0102 	strd	r0, r1, [sl], #-8
 80051e6:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80051ea:	e9ca 2300 	strd	r2, r3, [sl]
 80051ee:	e768      	b.n	80050c2 <__kernel_rem_pio2+0x4da>
 80051f0:	e9da 8900 	ldrd	r8, r9, [sl]
 80051f4:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 80051f8:	4642      	mov	r2, r8
 80051fa:	464b      	mov	r3, r9
 80051fc:	4630      	mov	r0, r6
 80051fe:	4639      	mov	r1, r7
 8005200:	f7fa ffac 	bl	800015c <__adddf3>
 8005204:	4602      	mov	r2, r0
 8005206:	460b      	mov	r3, r1
 8005208:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800520c:	4630      	mov	r0, r6
 800520e:	4639      	mov	r1, r7
 8005210:	f7fa ffa2 	bl	8000158 <__aeabi_dsub>
 8005214:	4642      	mov	r2, r8
 8005216:	464b      	mov	r3, r9
 8005218:	f7fa ffa0 	bl	800015c <__adddf3>
 800521c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005220:	e86a 0102 	strd	r0, r1, [sl], #-8
 8005224:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8005228:	e9ca 2300 	strd	r2, r3, [sl]
 800522c:	e74e      	b.n	80050cc <__kernel_rem_pio2+0x4e4>
 800522e:	4638      	mov	r0, r7
 8005230:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8005234:	4631      	mov	r1, r6
 8005236:	f7fa ff91 	bl	800015c <__adddf3>
 800523a:	3c01      	subs	r4, #1
 800523c:	4607      	mov	r7, r0
 800523e:	460e      	mov	r6, r1
 8005240:	e74a      	b.n	80050d8 <__kernel_rem_pio2+0x4f0>
 8005242:	9b06      	ldr	r3, [sp, #24]
 8005244:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8005248:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800524c:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8005250:	e9c3 0401 	strd	r0, r4, [r3, #4]
 8005254:	e9c3 1703 	strd	r1, r7, [r3, #12]
 8005258:	601d      	str	r5, [r3, #0]
 800525a:	615e      	str	r6, [r3, #20]
 800525c:	e723      	b.n	80050a6 <__kernel_rem_pio2+0x4be>
 800525e:	bf00      	nop
 8005260:	41700000 	.word	0x41700000
 8005264:	3e700000 	.word	0x3e700000

08005268 <scalbn>:
 8005268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800526a:	4616      	mov	r6, r2
 800526c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005270:	4604      	mov	r4, r0
 8005272:	460d      	mov	r5, r1
 8005274:	460b      	mov	r3, r1
 8005276:	b992      	cbnz	r2, 800529e <scalbn+0x36>
 8005278:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800527c:	4303      	orrs	r3, r0
 800527e:	d03c      	beq.n	80052fa <scalbn+0x92>
 8005280:	4b31      	ldr	r3, [pc, #196]	; (8005348 <scalbn+0xe0>)
 8005282:	2200      	movs	r2, #0
 8005284:	f7fb f920 	bl	80004c8 <__aeabi_dmul>
 8005288:	4b30      	ldr	r3, [pc, #192]	; (800534c <scalbn+0xe4>)
 800528a:	4604      	mov	r4, r0
 800528c:	429e      	cmp	r6, r3
 800528e:	460d      	mov	r5, r1
 8005290:	da0f      	bge.n	80052b2 <scalbn+0x4a>
 8005292:	a329      	add	r3, pc, #164	; (adr r3, 8005338 <scalbn+0xd0>)
 8005294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005298:	f7fb f916 	bl	80004c8 <__aeabi_dmul>
 800529c:	e006      	b.n	80052ac <scalbn+0x44>
 800529e:	f240 77ff 	movw	r7, #2047	; 0x7ff
 80052a2:	42ba      	cmp	r2, r7
 80052a4:	d109      	bne.n	80052ba <scalbn+0x52>
 80052a6:	4602      	mov	r2, r0
 80052a8:	f7fa ff58 	bl	800015c <__adddf3>
 80052ac:	4604      	mov	r4, r0
 80052ae:	460d      	mov	r5, r1
 80052b0:	e023      	b.n	80052fa <scalbn+0x92>
 80052b2:	460b      	mov	r3, r1
 80052b4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80052b8:	3a36      	subs	r2, #54	; 0x36
 80052ba:	f24c 3150 	movw	r1, #50000	; 0xc350
 80052be:	428e      	cmp	r6, r1
 80052c0:	dd0e      	ble.n	80052e0 <scalbn+0x78>
 80052c2:	a31f      	add	r3, pc, #124	; (adr r3, 8005340 <scalbn+0xd8>)
 80052c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c8:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 80052cc:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 80052d0:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 80052d4:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 80052d8:	481d      	ldr	r0, [pc, #116]	; (8005350 <scalbn+0xe8>)
 80052da:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 80052de:	e7db      	b.n	8005298 <scalbn+0x30>
 80052e0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80052e4:	4432      	add	r2, r6
 80052e6:	428a      	cmp	r2, r1
 80052e8:	dceb      	bgt.n	80052c2 <scalbn+0x5a>
 80052ea:	2a00      	cmp	r2, #0
 80052ec:	dd08      	ble.n	8005300 <scalbn+0x98>
 80052ee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80052f2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80052f6:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80052fa:	4620      	mov	r0, r4
 80052fc:	4629      	mov	r1, r5
 80052fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005300:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005304:	da0c      	bge.n	8005320 <scalbn+0xb8>
 8005306:	a30c      	add	r3, pc, #48	; (adr r3, 8005338 <scalbn+0xd0>)
 8005308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800530c:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8005310:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8005314:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8005318:	480e      	ldr	r0, [pc, #56]	; (8005354 <scalbn+0xec>)
 800531a:	f041 011f 	orr.w	r1, r1, #31
 800531e:	e7bb      	b.n	8005298 <scalbn+0x30>
 8005320:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005324:	3236      	adds	r2, #54	; 0x36
 8005326:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800532a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800532e:	4620      	mov	r0, r4
 8005330:	4629      	mov	r1, r5
 8005332:	2200      	movs	r2, #0
 8005334:	4b08      	ldr	r3, [pc, #32]	; (8005358 <scalbn+0xf0>)
 8005336:	e7af      	b.n	8005298 <scalbn+0x30>
 8005338:	c2f8f359 	.word	0xc2f8f359
 800533c:	01a56e1f 	.word	0x01a56e1f
 8005340:	8800759c 	.word	0x8800759c
 8005344:	7e37e43c 	.word	0x7e37e43c
 8005348:	43500000 	.word	0x43500000
 800534c:	ffff3cb0 	.word	0xffff3cb0
 8005350:	8800759c 	.word	0x8800759c
 8005354:	c2f8f359 	.word	0xc2f8f359
 8005358:	3c900000 	.word	0x3c900000
 800535c:	00000000 	.word	0x00000000

08005360 <floor>:
 8005360:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005364:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005368:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800536c:	2e13      	cmp	r6, #19
 800536e:	460b      	mov	r3, r1
 8005370:	4607      	mov	r7, r0
 8005372:	460c      	mov	r4, r1
 8005374:	4605      	mov	r5, r0
 8005376:	dc32      	bgt.n	80053de <floor+0x7e>
 8005378:	2e00      	cmp	r6, #0
 800537a:	da14      	bge.n	80053a6 <floor+0x46>
 800537c:	a334      	add	r3, pc, #208	; (adr r3, 8005450 <floor+0xf0>)
 800537e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005382:	f7fa feeb 	bl	800015c <__adddf3>
 8005386:	2200      	movs	r2, #0
 8005388:	2300      	movs	r3, #0
 800538a:	f7fb fb2d 	bl	80009e8 <__aeabi_dcmpgt>
 800538e:	b138      	cbz	r0, 80053a0 <floor+0x40>
 8005390:	2c00      	cmp	r4, #0
 8005392:	da56      	bge.n	8005442 <floor+0xe2>
 8005394:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8005398:	4325      	orrs	r5, r4
 800539a:	d055      	beq.n	8005448 <floor+0xe8>
 800539c:	2500      	movs	r5, #0
 800539e:	4c2e      	ldr	r4, [pc, #184]	; (8005458 <floor+0xf8>)
 80053a0:	4623      	mov	r3, r4
 80053a2:	462f      	mov	r7, r5
 80053a4:	e025      	b.n	80053f2 <floor+0x92>
 80053a6:	4a2d      	ldr	r2, [pc, #180]	; (800545c <floor+0xfc>)
 80053a8:	fa42 f806 	asr.w	r8, r2, r6
 80053ac:	ea01 0208 	and.w	r2, r1, r8
 80053b0:	4302      	orrs	r2, r0
 80053b2:	d01e      	beq.n	80053f2 <floor+0x92>
 80053b4:	a326      	add	r3, pc, #152	; (adr r3, 8005450 <floor+0xf0>)
 80053b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ba:	f7fa fecf 	bl	800015c <__adddf3>
 80053be:	2200      	movs	r2, #0
 80053c0:	2300      	movs	r3, #0
 80053c2:	f7fb fb11 	bl	80009e8 <__aeabi_dcmpgt>
 80053c6:	2800      	cmp	r0, #0
 80053c8:	d0ea      	beq.n	80053a0 <floor+0x40>
 80053ca:	2c00      	cmp	r4, #0
 80053cc:	bfbe      	ittt	lt
 80053ce:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80053d2:	4133      	asrlt	r3, r6
 80053d4:	18e4      	addlt	r4, r4, r3
 80053d6:	2500      	movs	r5, #0
 80053d8:	ea24 0408 	bic.w	r4, r4, r8
 80053dc:	e7e0      	b.n	80053a0 <floor+0x40>
 80053de:	2e33      	cmp	r6, #51	; 0x33
 80053e0:	dd0b      	ble.n	80053fa <floor+0x9a>
 80053e2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80053e6:	d104      	bne.n	80053f2 <floor+0x92>
 80053e8:	4602      	mov	r2, r0
 80053ea:	f7fa feb7 	bl	800015c <__adddf3>
 80053ee:	4607      	mov	r7, r0
 80053f0:	460b      	mov	r3, r1
 80053f2:	4638      	mov	r0, r7
 80053f4:	4619      	mov	r1, r3
 80053f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053fa:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80053fe:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8005402:	fa28 f802 	lsr.w	r8, r8, r2
 8005406:	ea10 0f08 	tst.w	r0, r8
 800540a:	d0f2      	beq.n	80053f2 <floor+0x92>
 800540c:	a310      	add	r3, pc, #64	; (adr r3, 8005450 <floor+0xf0>)
 800540e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005412:	f7fa fea3 	bl	800015c <__adddf3>
 8005416:	2200      	movs	r2, #0
 8005418:	2300      	movs	r3, #0
 800541a:	f7fb fae5 	bl	80009e8 <__aeabi_dcmpgt>
 800541e:	2800      	cmp	r0, #0
 8005420:	d0be      	beq.n	80053a0 <floor+0x40>
 8005422:	2c00      	cmp	r4, #0
 8005424:	da0a      	bge.n	800543c <floor+0xdc>
 8005426:	2e14      	cmp	r6, #20
 8005428:	d101      	bne.n	800542e <floor+0xce>
 800542a:	3401      	adds	r4, #1
 800542c:	e006      	b.n	800543c <floor+0xdc>
 800542e:	2301      	movs	r3, #1
 8005430:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8005434:	40b3      	lsls	r3, r6
 8005436:	441d      	add	r5, r3
 8005438:	42af      	cmp	r7, r5
 800543a:	d8f6      	bhi.n	800542a <floor+0xca>
 800543c:	ea25 0508 	bic.w	r5, r5, r8
 8005440:	e7ae      	b.n	80053a0 <floor+0x40>
 8005442:	2500      	movs	r5, #0
 8005444:	462c      	mov	r4, r5
 8005446:	e7ab      	b.n	80053a0 <floor+0x40>
 8005448:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800544c:	e7a8      	b.n	80053a0 <floor+0x40>
 800544e:	bf00      	nop
 8005450:	8800759c 	.word	0x8800759c
 8005454:	7e37e43c 	.word	0x7e37e43c
 8005458:	bff00000 	.word	0xbff00000
 800545c:	000fffff 	.word	0x000fffff

08005460 <_init>:
 8005460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005462:	bf00      	nop
 8005464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005466:	bc08      	pop	{r3}
 8005468:	469e      	mov	lr, r3
 800546a:	4770      	bx	lr

0800546c <_fini>:
 800546c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800546e:	bf00      	nop
 8005470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005472:	bc08      	pop	{r3}
 8005474:	469e      	mov	lr, r3
 8005476:	4770      	bx	lr
