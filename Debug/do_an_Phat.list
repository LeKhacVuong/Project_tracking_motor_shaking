
do_an_Phat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000263c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002748  08002748  00012748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800276c  0800276c  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  0800276c  0800276c  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800276c  0800276c  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800276c  0800276c  0001276c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002770  08002770  00012770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08002774  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  20000018  0800278c  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  0800278c  000200c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006270  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a8a  00000000  00000000  000262f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000650  00000000  00000000  00027d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000004a3  00000000  00000000  000283d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016807  00000000  00000000  00028873  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000087bf  00000000  00000000  0003f07a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00081294  00000000  00000000  00047839  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000178c  00000000  00000000  000c8ad0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000ca25c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	08002730 	.word	0x08002730

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	08002730 	.word	0x08002730

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800060e:	4b0e      	ldr	r3, [pc, #56]	; (8000648 <HAL_MspInit+0x40>)
 8000610:	699b      	ldr	r3, [r3, #24]
 8000612:	4a0d      	ldr	r2, [pc, #52]	; (8000648 <HAL_MspInit+0x40>)
 8000614:	f043 0301 	orr.w	r3, r3, #1
 8000618:	6193      	str	r3, [r2, #24]
 800061a:	4b0b      	ldr	r3, [pc, #44]	; (8000648 <HAL_MspInit+0x40>)
 800061c:	699b      	ldr	r3, [r3, #24]
 800061e:	f003 0301 	and.w	r3, r3, #1
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000626:	4b08      	ldr	r3, [pc, #32]	; (8000648 <HAL_MspInit+0x40>)
 8000628:	69db      	ldr	r3, [r3, #28]
 800062a:	4a07      	ldr	r2, [pc, #28]	; (8000648 <HAL_MspInit+0x40>)
 800062c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000630:	61d3      	str	r3, [r2, #28]
 8000632:	4b05      	ldr	r3, [pc, #20]	; (8000648 <HAL_MspInit+0x40>)
 8000634:	69db      	ldr	r3, [r3, #28]
 8000636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800063a:	603b      	str	r3, [r7, #0]
 800063c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800063e:	bf00      	nop
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	bc80      	pop	{r7}
 8000646:	4770      	bx	lr
 8000648:	40021000 	.word	0x40021000

0800064c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b088      	sub	sp, #32
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000654:	f107 0310 	add.w	r3, r7, #16
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	4a2c      	ldr	r2, [pc, #176]	; (8000718 <HAL_ADC_MspInit+0xcc>)
 8000668:	4293      	cmp	r3, r2
 800066a:	d151      	bne.n	8000710 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800066c:	4b2b      	ldr	r3, [pc, #172]	; (800071c <HAL_ADC_MspInit+0xd0>)
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	4a2a      	ldr	r2, [pc, #168]	; (800071c <HAL_ADC_MspInit+0xd0>)
 8000672:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000676:	6193      	str	r3, [r2, #24]
 8000678:	4b28      	ldr	r3, [pc, #160]	; (800071c <HAL_ADC_MspInit+0xd0>)
 800067a:	699b      	ldr	r3, [r3, #24]
 800067c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000680:	60fb      	str	r3, [r7, #12]
 8000682:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000684:	4b25      	ldr	r3, [pc, #148]	; (800071c <HAL_ADC_MspInit+0xd0>)
 8000686:	699b      	ldr	r3, [r3, #24]
 8000688:	4a24      	ldr	r2, [pc, #144]	; (800071c <HAL_ADC_MspInit+0xd0>)
 800068a:	f043 0304 	orr.w	r3, r3, #4
 800068e:	6193      	str	r3, [r2, #24]
 8000690:	4b22      	ldr	r3, [pc, #136]	; (800071c <HAL_ADC_MspInit+0xd0>)
 8000692:	699b      	ldr	r3, [r3, #24]
 8000694:	f003 0304 	and.w	r3, r3, #4
 8000698:	60bb      	str	r3, [r7, #8]
 800069a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800069c:	2307      	movs	r3, #7
 800069e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006a0:	2303      	movs	r3, #3
 80006a2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a4:	f107 0310 	add.w	r3, r7, #16
 80006a8:	4619      	mov	r1, r3
 80006aa:	481d      	ldr	r0, [pc, #116]	; (8000720 <HAL_ADC_MspInit+0xd4>)
 80006ac:	f001 f89a 	bl	80017e4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80006b0:	4b1c      	ldr	r3, [pc, #112]	; (8000724 <HAL_ADC_MspInit+0xd8>)
 80006b2:	4a1d      	ldr	r2, [pc, #116]	; (8000728 <HAL_ADC_MspInit+0xdc>)
 80006b4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006b6:	4b1b      	ldr	r3, [pc, #108]	; (8000724 <HAL_ADC_MspInit+0xd8>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006bc:	4b19      	ldr	r3, [pc, #100]	; (8000724 <HAL_ADC_MspInit+0xd8>)
 80006be:	2200      	movs	r2, #0
 80006c0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006c2:	4b18      	ldr	r3, [pc, #96]	; (8000724 <HAL_ADC_MspInit+0xd8>)
 80006c4:	2280      	movs	r2, #128	; 0x80
 80006c6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006c8:	4b16      	ldr	r3, [pc, #88]	; (8000724 <HAL_ADC_MspInit+0xd8>)
 80006ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006ce:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006d0:	4b14      	ldr	r3, [pc, #80]	; (8000724 <HAL_ADC_MspInit+0xd8>)
 80006d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006d6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80006d8:	4b12      	ldr	r3, [pc, #72]	; (8000724 <HAL_ADC_MspInit+0xd8>)
 80006da:	2220      	movs	r2, #32
 80006dc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80006de:	4b11      	ldr	r3, [pc, #68]	; (8000724 <HAL_ADC_MspInit+0xd8>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006e4:	480f      	ldr	r0, [pc, #60]	; (8000724 <HAL_ADC_MspInit+0xd8>)
 80006e6:	f000 fe8f 	bl	8001408 <HAL_DMA_Init>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80006f0:	f001 ffa0 	bl	8002634 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	4a0b      	ldr	r2, [pc, #44]	; (8000724 <HAL_ADC_MspInit+0xd8>)
 80006f8:	621a      	str	r2, [r3, #32]
 80006fa:	4a0a      	ldr	r2, [pc, #40]	; (8000724 <HAL_ADC_MspInit+0xd8>)
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 8000700:	2200      	movs	r2, #0
 8000702:	2102      	movs	r1, #2
 8000704:	2012      	movs	r0, #18
 8000706:	f000 fe48 	bl	800139a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800070a:	2012      	movs	r0, #18
 800070c:	f000 fe61 	bl	80013d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000710:	bf00      	nop
 8000712:	3720      	adds	r7, #32
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40012400 	.word	0x40012400
 800071c:	40021000 	.word	0x40021000
 8000720:	40010800 	.word	0x40010800
 8000724:	20000068 	.word	0x20000068
 8000728:	40020008 	.word	0x40020008

0800072c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000730:	e7fe      	b.n	8000730 <NMI_Handler+0x4>

08000732 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000732:	b480      	push	{r7}
 8000734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000736:	e7fe      	b.n	8000736 <HardFault_Handler+0x4>

08000738 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800073c:	e7fe      	b.n	800073c <MemManage_Handler+0x4>

0800073e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800073e:	b480      	push	{r7}
 8000740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000742:	e7fe      	b.n	8000742 <BusFault_Handler+0x4>

08000744 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000748:	e7fe      	b.n	8000748 <UsageFault_Handler+0x4>

0800074a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800074a:	b480      	push	{r7}
 800074c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800074e:	bf00      	nop
 8000750:	46bd      	mov	sp, r7
 8000752:	bc80      	pop	{r7}
 8000754:	4770      	bx	lr

08000756 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000756:	b480      	push	{r7}
 8000758:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800075a:	bf00      	nop
 800075c:	46bd      	mov	sp, r7
 800075e:	bc80      	pop	{r7}
 8000760:	4770      	bx	lr

08000762 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000762:	b480      	push	{r7}
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000766:	bf00      	nop
 8000768:	46bd      	mov	sp, r7
 800076a:	bc80      	pop	{r7}
 800076c:	4770      	bx	lr
	...

08000770 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000774:	4802      	ldr	r0, [pc, #8]	; (8000780 <DMA1_Channel1_IRQHandler+0x10>)
 8000776:	f000 ff01 	bl	800157c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	20000068 	.word	0x20000068

08000784 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000788:	4802      	ldr	r0, [pc, #8]	; (8000794 <ADC1_2_IRQHandler+0x10>)
 800078a:	f000 fa49 	bl	8000c20 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000038 	.word	0x20000038

08000798 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800079c:	bf00      	nop
 800079e:	46bd      	mov	sp, r7
 80007a0:	bc80      	pop	{r7}
 80007a2:	4770      	bx	lr

080007a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007a4:	f7ff fff8 	bl	8000798 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007a8:	480b      	ldr	r0, [pc, #44]	; (80007d8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80007aa:	490c      	ldr	r1, [pc, #48]	; (80007dc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80007ac:	4a0c      	ldr	r2, [pc, #48]	; (80007e0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80007ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007b0:	e002      	b.n	80007b8 <LoopCopyDataInit>

080007b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007b6:	3304      	adds	r3, #4

080007b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007bc:	d3f9      	bcc.n	80007b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007be:	4a09      	ldr	r2, [pc, #36]	; (80007e4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80007c0:	4c09      	ldr	r4, [pc, #36]	; (80007e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007c4:	e001      	b.n	80007ca <LoopFillZerobss>

080007c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007c8:	3204      	adds	r2, #4

080007ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007cc:	d3fb      	bcc.n	80007c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007ce:	f001 ff8b 	bl	80026e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007d2:	f001 ff34 	bl	800263e <main>
  bx lr
 80007d6:	4770      	bx	lr
  ldr r0, =_sdata
 80007d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007dc:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80007e0:	08002774 	.word	0x08002774
  ldr r2, =_sbss
 80007e4:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80007e8:	200000c4 	.word	0x200000c4

080007ec <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007ec:	e7fe      	b.n	80007ec <CAN1_RX1_IRQHandler>
	...

080007f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007f4:	4b08      	ldr	r3, [pc, #32]	; (8000818 <HAL_Init+0x28>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a07      	ldr	r2, [pc, #28]	; (8000818 <HAL_Init+0x28>)
 80007fa:	f043 0310 	orr.w	r3, r3, #16
 80007fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000800:	2003      	movs	r0, #3
 8000802:	f000 fdbf 	bl	8001384 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000806:	200f      	movs	r0, #15
 8000808:	f000 f808 	bl	800081c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800080c:	f7ff fefc 	bl	8000608 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000810:	2300      	movs	r3, #0
}
 8000812:	4618      	mov	r0, r3
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	40022000 	.word	0x40022000

0800081c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000824:	4b12      	ldr	r3, [pc, #72]	; (8000870 <HAL_InitTick+0x54>)
 8000826:	681a      	ldr	r2, [r3, #0]
 8000828:	4b12      	ldr	r3, [pc, #72]	; (8000874 <HAL_InitTick+0x58>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	4619      	mov	r1, r3
 800082e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000832:	fbb3 f3f1 	udiv	r3, r3, r1
 8000836:	fbb2 f3f3 	udiv	r3, r2, r3
 800083a:	4618      	mov	r0, r3
 800083c:	f000 fdd7 	bl	80013ee <HAL_SYSTICK_Config>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000846:	2301      	movs	r3, #1
 8000848:	e00e      	b.n	8000868 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	2b0f      	cmp	r3, #15
 800084e:	d80a      	bhi.n	8000866 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000850:	2200      	movs	r2, #0
 8000852:	6879      	ldr	r1, [r7, #4]
 8000854:	f04f 30ff 	mov.w	r0, #4294967295
 8000858:	f000 fd9f 	bl	800139a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800085c:	4a06      	ldr	r2, [pc, #24]	; (8000878 <HAL_InitTick+0x5c>)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000862:	2300      	movs	r3, #0
 8000864:	e000      	b.n	8000868 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000866:	2301      	movs	r3, #1
}
 8000868:	4618      	mov	r0, r3
 800086a:	3708      	adds	r7, #8
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	20000000 	.word	0x20000000
 8000874:	20000008 	.word	0x20000008
 8000878:	20000004 	.word	0x20000004

0800087c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000880:	4b05      	ldr	r3, [pc, #20]	; (8000898 <HAL_IncTick+0x1c>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	461a      	mov	r2, r3
 8000886:	4b05      	ldr	r3, [pc, #20]	; (800089c <HAL_IncTick+0x20>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4413      	add	r3, r2
 800088c:	4a03      	ldr	r2, [pc, #12]	; (800089c <HAL_IncTick+0x20>)
 800088e:	6013      	str	r3, [r2, #0]
}
 8000890:	bf00      	nop
 8000892:	46bd      	mov	sp, r7
 8000894:	bc80      	pop	{r7}
 8000896:	4770      	bx	lr
 8000898:	20000008 	.word	0x20000008
 800089c:	20000034 	.word	0x20000034

080008a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  return uwTick;
 80008a4:	4b02      	ldr	r3, [pc, #8]	; (80008b0 <HAL_GetTick+0x10>)
 80008a6:	681b      	ldr	r3, [r3, #0]
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bc80      	pop	{r7}
 80008ae:	4770      	bx	lr
 80008b0:	20000034 	.word	0x20000034

080008b4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b086      	sub	sp, #24
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80008bc:	2300      	movs	r3, #0
 80008be:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80008c0:	2300      	movs	r3, #0
 80008c2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80008c4:	2300      	movs	r3, #0
 80008c6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80008c8:	2300      	movs	r3, #0
 80008ca:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d101      	bne.n	80008d6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80008d2:	2301      	movs	r3, #1
 80008d4:	e0be      	b.n	8000a54 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	689b      	ldr	r3, [r3, #8]
 80008da:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d109      	bne.n	80008f8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	2200      	movs	r2, #0
 80008e8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	2200      	movs	r2, #0
 80008ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80008f2:	6878      	ldr	r0, [r7, #4]
 80008f4:	f7ff feaa 	bl	800064c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80008f8:	6878      	ldr	r0, [r7, #4]
 80008fa:	f000 fbc7 	bl	800108c <ADC_ConversionStop_Disable>
 80008fe:	4603      	mov	r3, r0
 8000900:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000906:	f003 0310 	and.w	r3, r3, #16
 800090a:	2b00      	cmp	r3, #0
 800090c:	f040 8099 	bne.w	8000a42 <HAL_ADC_Init+0x18e>
 8000910:	7dfb      	ldrb	r3, [r7, #23]
 8000912:	2b00      	cmp	r3, #0
 8000914:	f040 8095 	bne.w	8000a42 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800091c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000920:	f023 0302 	bic.w	r3, r3, #2
 8000924:	f043 0202 	orr.w	r2, r3, #2
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000934:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	7b1b      	ldrb	r3, [r3, #12]
 800093a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800093c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800093e:	68ba      	ldr	r2, [r7, #8]
 8000940:	4313      	orrs	r3, r2
 8000942:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	689b      	ldr	r3, [r3, #8]
 8000948:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800094c:	d003      	beq.n	8000956 <HAL_ADC_Init+0xa2>
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	689b      	ldr	r3, [r3, #8]
 8000952:	2b01      	cmp	r3, #1
 8000954:	d102      	bne.n	800095c <HAL_ADC_Init+0xa8>
 8000956:	f44f 7380 	mov.w	r3, #256	; 0x100
 800095a:	e000      	b.n	800095e <HAL_ADC_Init+0xaa>
 800095c:	2300      	movs	r3, #0
 800095e:	693a      	ldr	r2, [r7, #16]
 8000960:	4313      	orrs	r3, r2
 8000962:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	7d1b      	ldrb	r3, [r3, #20]
 8000968:	2b01      	cmp	r3, #1
 800096a:	d119      	bne.n	80009a0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	7b1b      	ldrb	r3, [r3, #12]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d109      	bne.n	8000988 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	699b      	ldr	r3, [r3, #24]
 8000978:	3b01      	subs	r3, #1
 800097a:	035a      	lsls	r2, r3, #13
 800097c:	693b      	ldr	r3, [r7, #16]
 800097e:	4313      	orrs	r3, r2
 8000980:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000984:	613b      	str	r3, [r7, #16]
 8000986:	e00b      	b.n	80009a0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800098c:	f043 0220 	orr.w	r2, r3, #32
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000998:	f043 0201 	orr.w	r2, r3, #1
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	685b      	ldr	r3, [r3, #4]
 80009a6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	693a      	ldr	r2, [r7, #16]
 80009b0:	430a      	orrs	r2, r1
 80009b2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	689a      	ldr	r2, [r3, #8]
 80009ba:	4b28      	ldr	r3, [pc, #160]	; (8000a5c <HAL_ADC_Init+0x1a8>)
 80009bc:	4013      	ands	r3, r2
 80009be:	687a      	ldr	r2, [r7, #4]
 80009c0:	6812      	ldr	r2, [r2, #0]
 80009c2:	68b9      	ldr	r1, [r7, #8]
 80009c4:	430b      	orrs	r3, r1
 80009c6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	689b      	ldr	r3, [r3, #8]
 80009cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80009d0:	d003      	beq.n	80009da <HAL_ADC_Init+0x126>
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	689b      	ldr	r3, [r3, #8]
 80009d6:	2b01      	cmp	r3, #1
 80009d8:	d104      	bne.n	80009e4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	691b      	ldr	r3, [r3, #16]
 80009de:	3b01      	subs	r3, #1
 80009e0:	051b      	lsls	r3, r3, #20
 80009e2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009ea:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	68fa      	ldr	r2, [r7, #12]
 80009f4:	430a      	orrs	r2, r1
 80009f6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	689a      	ldr	r2, [r3, #8]
 80009fe:	4b18      	ldr	r3, [pc, #96]	; (8000a60 <HAL_ADC_Init+0x1ac>)
 8000a00:	4013      	ands	r3, r2
 8000a02:	68ba      	ldr	r2, [r7, #8]
 8000a04:	429a      	cmp	r2, r3
 8000a06:	d10b      	bne.n	8000a20 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a12:	f023 0303 	bic.w	r3, r3, #3
 8000a16:	f043 0201 	orr.w	r2, r3, #1
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000a1e:	e018      	b.n	8000a52 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a24:	f023 0312 	bic.w	r3, r3, #18
 8000a28:	f043 0210 	orr.w	r2, r3, #16
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a34:	f043 0201 	orr.w	r2, r3, #1
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000a40:	e007      	b.n	8000a52 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a46:	f043 0210 	orr.w	r2, r3, #16
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000a52:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	3718      	adds	r7, #24
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	ffe1f7fd 	.word	0xffe1f7fd
 8000a60:	ff1f0efe 	.word	0xff1f0efe

08000a64 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b086      	sub	sp, #24
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	60f8      	str	r0, [r7, #12]
 8000a6c:	60b9      	str	r1, [r7, #8]
 8000a6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a70:	2300      	movs	r3, #0
 8000a72:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a64      	ldr	r2, [pc, #400]	; (8000c0c <HAL_ADC_Start_DMA+0x1a8>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d004      	beq.n	8000a88 <HAL_ADC_Start_DMA+0x24>
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4a63      	ldr	r2, [pc, #396]	; (8000c10 <HAL_ADC_Start_DMA+0x1ac>)
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d106      	bne.n	8000a96 <HAL_ADC_Start_DMA+0x32>
 8000a88:	4b60      	ldr	r3, [pc, #384]	; (8000c0c <HAL_ADC_Start_DMA+0x1a8>)
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	f040 80b3 	bne.w	8000bfc <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	d101      	bne.n	8000aa4 <HAL_ADC_Start_DMA+0x40>
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	e0ae      	b.n	8000c02 <HAL_ADC_Start_DMA+0x19e>
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000aac:	68f8      	ldr	r0, [r7, #12]
 8000aae:	f000 fa93 	bl	8000fd8 <ADC_Enable>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000ab6:	7dfb      	ldrb	r3, [r7, #23]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	f040 809a 	bne.w	8000bf2 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ac2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000ac6:	f023 0301 	bic.w	r3, r3, #1
 8000aca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4a4e      	ldr	r2, [pc, #312]	; (8000c10 <HAL_ADC_Start_DMA+0x1ac>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d105      	bne.n	8000ae8 <HAL_ADC_Start_DMA+0x84>
 8000adc:	4b4b      	ldr	r3, [pc, #300]	; (8000c0c <HAL_ADC_Start_DMA+0x1a8>)
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d115      	bne.n	8000b14 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aec:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	685b      	ldr	r3, [r3, #4]
 8000afa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d026      	beq.n	8000b50 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b06:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000b0a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000b12:	e01d      	b.n	8000b50 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b18:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a39      	ldr	r2, [pc, #228]	; (8000c0c <HAL_ADC_Start_DMA+0x1a8>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d004      	beq.n	8000b34 <HAL_ADC_Start_DMA+0xd0>
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4a38      	ldr	r2, [pc, #224]	; (8000c10 <HAL_ADC_Start_DMA+0x1ac>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d10d      	bne.n	8000b50 <HAL_ADC_Start_DMA+0xec>
 8000b34:	4b35      	ldr	r3, [pc, #212]	; (8000c0c <HAL_ADC_Start_DMA+0x1a8>)
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d007      	beq.n	8000b50 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b44:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000b48:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d006      	beq.n	8000b6a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b60:	f023 0206 	bic.w	r2, r3, #6
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b68:	e002      	b.n	8000b70 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	2200      	movs	r2, #0
 8000b74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	6a1b      	ldr	r3, [r3, #32]
 8000b7c:	4a25      	ldr	r2, [pc, #148]	; (8000c14 <HAL_ADC_Start_DMA+0x1b0>)
 8000b7e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	6a1b      	ldr	r3, [r3, #32]
 8000b84:	4a24      	ldr	r2, [pc, #144]	; (8000c18 <HAL_ADC_Start_DMA+0x1b4>)
 8000b86:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	6a1b      	ldr	r3, [r3, #32]
 8000b8c:	4a23      	ldr	r2, [pc, #140]	; (8000c1c <HAL_ADC_Start_DMA+0x1b8>)
 8000b8e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f06f 0202 	mvn.w	r2, #2
 8000b98:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	689a      	ldr	r2, [r3, #8]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000ba8:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	6a18      	ldr	r0, [r3, #32]
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	334c      	adds	r3, #76	; 0x4c
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	68ba      	ldr	r2, [r7, #8]
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	f000 fc7f 	bl	80014bc <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	689b      	ldr	r3, [r3, #8]
 8000bc4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000bc8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000bcc:	d108      	bne.n	8000be0 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	689a      	ldr	r2, [r3, #8]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000bdc:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000bde:	e00f      	b.n	8000c00 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	689a      	ldr	r2, [r3, #8]
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000bee:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000bf0:	e006      	b.n	8000c00 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8000bfa:	e001      	b.n	8000c00 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000c00:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3718      	adds	r7, #24
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40012400 	.word	0x40012400
 8000c10:	40012800 	.word	0x40012800
 8000c14:	0800110f 	.word	0x0800110f
 8000c18:	0800118b 	.word	0x0800118b
 8000c1c:	080011a7 	.word	0x080011a7

08000c20 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	f003 0320 	and.w	r3, r3, #32
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d03e      	beq.n	8000cc0 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	f003 0302 	and.w	r3, r3, #2
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d039      	beq.n	8000cc0 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c50:	f003 0310 	and.w	r3, r3, #16
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d105      	bne.n	8000c64 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c5c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	689b      	ldr	r3, [r3, #8]
 8000c6a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000c6e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000c72:	d11d      	bne.n	8000cb0 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d119      	bne.n	8000cb0 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	685a      	ldr	r2, [r3, #4]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f022 0220 	bic.w	r2, r2, #32
 8000c8a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c90:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d105      	bne.n	8000cb0 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ca8:	f043 0201 	orr.w	r2, r3, #1
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8000cb0:	6878      	ldr	r0, [r7, #4]
 8000cb2:	f000 f874 	bl	8000d9e <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f06f 0212 	mvn.w	r2, #18
 8000cbe:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d04d      	beq.n	8000d66 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	f003 0304 	and.w	r3, r3, #4
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d048      	beq.n	8000d66 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cd8:	f003 0310 	and.w	r3, r3, #16
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d105      	bne.n	8000cec <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ce4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	689b      	ldr	r3, [r3, #8]
 8000cf2:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8000cf6:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8000cfa:	d012      	beq.n	8000d22 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d125      	bne.n	8000d56 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	689b      	ldr	r3, [r3, #8]
 8000d10:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000d14:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000d18:	d11d      	bne.n	8000d56 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d119      	bne.n	8000d56 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	685a      	ldr	r2, [r3, #4]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d30:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d105      	bne.n	8000d56 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d4e:	f043 0201 	orr.w	r2, r3, #1
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000d56:	6878      	ldr	r0, [r7, #4]
 8000d58:	f000 fa3f 	bl	80011da <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f06f 020c 	mvn.w	r2, #12
 8000d64:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8000d66:	68bb      	ldr	r3, [r7, #8]
 8000d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d012      	beq.n	8000d96 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d00d      	beq.n	8000d96 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d7e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f000 f81b 	bl	8000dc2 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f06f 0201 	mvn.w	r2, #1
 8000d94:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8000d96:	bf00      	nop
 8000d98:	3710      	adds	r7, #16
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	b083      	sub	sp, #12
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000da6:	bf00      	nop
 8000da8:	370c      	adds	r7, #12
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bc80      	pop	{r7}
 8000dae:	4770      	bx	lr

08000db0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000db8:	bf00      	nop
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bc80      	pop	{r7}
 8000dc0:	4770      	bx	lr

08000dc2 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	b083      	sub	sp, #12
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8000dca:	bf00      	nop
 8000dcc:	370c      	adds	r7, #12
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bc80      	pop	{r7}
 8000dd2:	4770      	bx	lr

08000dd4 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000ddc:	bf00      	nop
 8000dde:	370c      	adds	r7, #12
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bc80      	pop	{r7}
 8000de4:	4770      	bx	lr
	...

08000de8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000de8:	b480      	push	{r7}
 8000dea:	b085      	sub	sp, #20
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000df2:	2300      	movs	r3, #0
 8000df4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000df6:	2300      	movs	r3, #0
 8000df8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d101      	bne.n	8000e08 <HAL_ADC_ConfigChannel+0x20>
 8000e04:	2302      	movs	r3, #2
 8000e06:	e0dc      	b.n	8000fc2 <HAL_ADC_ConfigChannel+0x1da>
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	2b06      	cmp	r3, #6
 8000e16:	d81c      	bhi.n	8000e52 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685a      	ldr	r2, [r3, #4]
 8000e22:	4613      	mov	r3, r2
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	4413      	add	r3, r2
 8000e28:	3b05      	subs	r3, #5
 8000e2a:	221f      	movs	r2, #31
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	43db      	mvns	r3, r3
 8000e32:	4019      	ands	r1, r3
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	6818      	ldr	r0, [r3, #0]
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685a      	ldr	r2, [r3, #4]
 8000e3c:	4613      	mov	r3, r2
 8000e3e:	009b      	lsls	r3, r3, #2
 8000e40:	4413      	add	r3, r2
 8000e42:	3b05      	subs	r3, #5
 8000e44:	fa00 f203 	lsl.w	r2, r0, r3
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	430a      	orrs	r2, r1
 8000e4e:	635a      	str	r2, [r3, #52]	; 0x34
 8000e50:	e03c      	b.n	8000ecc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	2b0c      	cmp	r3, #12
 8000e58:	d81c      	bhi.n	8000e94 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685a      	ldr	r2, [r3, #4]
 8000e64:	4613      	mov	r3, r2
 8000e66:	009b      	lsls	r3, r3, #2
 8000e68:	4413      	add	r3, r2
 8000e6a:	3b23      	subs	r3, #35	; 0x23
 8000e6c:	221f      	movs	r2, #31
 8000e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e72:	43db      	mvns	r3, r3
 8000e74:	4019      	ands	r1, r3
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	6818      	ldr	r0, [r3, #0]
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	685a      	ldr	r2, [r3, #4]
 8000e7e:	4613      	mov	r3, r2
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	4413      	add	r3, r2
 8000e84:	3b23      	subs	r3, #35	; 0x23
 8000e86:	fa00 f203 	lsl.w	r2, r0, r3
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	430a      	orrs	r2, r1
 8000e90:	631a      	str	r2, [r3, #48]	; 0x30
 8000e92:	e01b      	b.n	8000ecc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	685a      	ldr	r2, [r3, #4]
 8000e9e:	4613      	mov	r3, r2
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	4413      	add	r3, r2
 8000ea4:	3b41      	subs	r3, #65	; 0x41
 8000ea6:	221f      	movs	r2, #31
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	43db      	mvns	r3, r3
 8000eae:	4019      	ands	r1, r3
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	6818      	ldr	r0, [r3, #0]
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685a      	ldr	r2, [r3, #4]
 8000eb8:	4613      	mov	r3, r2
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	4413      	add	r3, r2
 8000ebe:	3b41      	subs	r3, #65	; 0x41
 8000ec0:	fa00 f203 	lsl.w	r2, r0, r3
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	430a      	orrs	r2, r1
 8000eca:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2b09      	cmp	r3, #9
 8000ed2:	d91c      	bls.n	8000f0e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	68d9      	ldr	r1, [r3, #12]
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	4613      	mov	r3, r2
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	4413      	add	r3, r2
 8000ee4:	3b1e      	subs	r3, #30
 8000ee6:	2207      	movs	r2, #7
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	43db      	mvns	r3, r3
 8000eee:	4019      	ands	r1, r3
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	6898      	ldr	r0, [r3, #8]
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	4613      	mov	r3, r2
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	4413      	add	r3, r2
 8000efe:	3b1e      	subs	r3, #30
 8000f00:	fa00 f203 	lsl.w	r2, r0, r3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	430a      	orrs	r2, r1
 8000f0a:	60da      	str	r2, [r3, #12]
 8000f0c:	e019      	b.n	8000f42 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	6919      	ldr	r1, [r3, #16]
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	4613      	mov	r3, r2
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	4413      	add	r3, r2
 8000f1e:	2207      	movs	r2, #7
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	43db      	mvns	r3, r3
 8000f26:	4019      	ands	r1, r3
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	6898      	ldr	r0, [r3, #8]
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	4613      	mov	r3, r2
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	4413      	add	r3, r2
 8000f36:	fa00 f203 	lsl.w	r2, r0, r3
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	430a      	orrs	r2, r1
 8000f40:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	2b10      	cmp	r3, #16
 8000f48:	d003      	beq.n	8000f52 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000f4e:	2b11      	cmp	r3, #17
 8000f50:	d132      	bne.n	8000fb8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a1d      	ldr	r2, [pc, #116]	; (8000fcc <HAL_ADC_ConfigChannel+0x1e4>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d125      	bne.n	8000fa8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d126      	bne.n	8000fb8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	689a      	ldr	r2, [r3, #8]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000f78:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	2b10      	cmp	r3, #16
 8000f80:	d11a      	bne.n	8000fb8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000f82:	4b13      	ldr	r3, [pc, #76]	; (8000fd0 <HAL_ADC_ConfigChannel+0x1e8>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a13      	ldr	r2, [pc, #76]	; (8000fd4 <HAL_ADC_ConfigChannel+0x1ec>)
 8000f88:	fba2 2303 	umull	r2, r3, r2, r3
 8000f8c:	0c9a      	lsrs	r2, r3, #18
 8000f8e:	4613      	mov	r3, r2
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	4413      	add	r3, r2
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f98:	e002      	b.n	8000fa0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	3b01      	subs	r3, #1
 8000f9e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d1f9      	bne.n	8000f9a <HAL_ADC_ConfigChannel+0x1b2>
 8000fa6:	e007      	b.n	8000fb8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fac:	f043 0220 	orr.w	r2, r3, #32
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3714      	adds	r7, #20
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bc80      	pop	{r7}
 8000fca:	4770      	bx	lr
 8000fcc:	40012400 	.word	0x40012400
 8000fd0:	20000000 	.word	0x20000000
 8000fd4:	431bde83 	.word	0x431bde83

08000fd8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	689b      	ldr	r3, [r3, #8]
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d040      	beq.n	8001078 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	689a      	ldr	r2, [r3, #8]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f042 0201 	orr.w	r2, r2, #1
 8001004:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001006:	4b1f      	ldr	r3, [pc, #124]	; (8001084 <ADC_Enable+0xac>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a1f      	ldr	r2, [pc, #124]	; (8001088 <ADC_Enable+0xb0>)
 800100c:	fba2 2303 	umull	r2, r3, r2, r3
 8001010:	0c9b      	lsrs	r3, r3, #18
 8001012:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001014:	e002      	b.n	800101c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	3b01      	subs	r3, #1
 800101a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d1f9      	bne.n	8001016 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001022:	f7ff fc3d 	bl	80008a0 <HAL_GetTick>
 8001026:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001028:	e01f      	b.n	800106a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800102a:	f7ff fc39 	bl	80008a0 <HAL_GetTick>
 800102e:	4602      	mov	r2, r0
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	1ad3      	subs	r3, r2, r3
 8001034:	2b02      	cmp	r3, #2
 8001036:	d918      	bls.n	800106a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	f003 0301 	and.w	r3, r3, #1
 8001042:	2b01      	cmp	r3, #1
 8001044:	d011      	beq.n	800106a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800104a:	f043 0210 	orr.w	r2, r3, #16
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001056:	f043 0201 	orr.w	r2, r3, #1
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2200      	movs	r2, #0
 8001062:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e007      	b.n	800107a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	689b      	ldr	r3, [r3, #8]
 8001070:	f003 0301 	and.w	r3, r3, #1
 8001074:	2b01      	cmp	r3, #1
 8001076:	d1d8      	bne.n	800102a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001078:	2300      	movs	r3, #0
}
 800107a:	4618      	mov	r0, r3
 800107c:	3710      	adds	r7, #16
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	20000000 	.word	0x20000000
 8001088:	431bde83 	.word	0x431bde83

0800108c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001094:	2300      	movs	r3, #0
 8001096:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d12e      	bne.n	8001104 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	689a      	ldr	r2, [r3, #8]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f022 0201 	bic.w	r2, r2, #1
 80010b4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80010b6:	f7ff fbf3 	bl	80008a0 <HAL_GetTick>
 80010ba:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80010bc:	e01b      	b.n	80010f6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80010be:	f7ff fbef 	bl	80008a0 <HAL_GetTick>
 80010c2:	4602      	mov	r2, r0
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	1ad3      	subs	r3, r2, r3
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d914      	bls.n	80010f6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d10d      	bne.n	80010f6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010de:	f043 0210 	orr.w	r2, r3, #16
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ea:	f043 0201 	orr.w	r2, r3, #1
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e007      	b.n	8001106 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	689b      	ldr	r3, [r3, #8]
 80010fc:	f003 0301 	and.w	r3, r3, #1
 8001100:	2b01      	cmp	r3, #1
 8001102:	d0dc      	beq.n	80010be <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001104:	2300      	movs	r3, #0
}
 8001106:	4618      	mov	r0, r3
 8001108:	3710      	adds	r7, #16
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	b084      	sub	sp, #16
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800111a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001120:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001124:	2b00      	cmp	r3, #0
 8001126:	d127      	bne.n	8001178 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800112c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800113e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001142:	d115      	bne.n	8001170 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001148:	2b00      	cmp	r3, #0
 800114a:	d111      	bne.n	8001170 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001150:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800115c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001160:	2b00      	cmp	r3, #0
 8001162:	d105      	bne.n	8001170 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001168:	f043 0201 	orr.w	r2, r3, #1
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001170:	68f8      	ldr	r0, [r7, #12]
 8001172:	f7ff fe14 	bl	8000d9e <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001176:	e004      	b.n	8001182 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	6a1b      	ldr	r3, [r3, #32]
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	4798      	blx	r3
}
 8001182:	bf00      	nop
 8001184:	3710      	adds	r7, #16
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b084      	sub	sp, #16
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001196:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001198:	68f8      	ldr	r0, [r7, #12]
 800119a:	f7ff fe09 	bl	8000db0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800119e:	bf00      	nop
 80011a0:	3710      	adds	r7, #16
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b084      	sub	sp, #16
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011b8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011c4:	f043 0204 	orr.w	r2, r3, #4
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80011cc:	68f8      	ldr	r0, [r7, #12]
 80011ce:	f7ff fe01 	bl	8000dd4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80011d2:	bf00      	nop
 80011d4:	3710      	adds	r7, #16
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80011da:	b480      	push	{r7}
 80011dc:	b083      	sub	sp, #12
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80011e2:	bf00      	nop
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bc80      	pop	{r7}
 80011ea:	4770      	bx	lr

080011ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b085      	sub	sp, #20
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f003 0307 	and.w	r3, r3, #7
 80011fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011fc:	4b0c      	ldr	r3, [pc, #48]	; (8001230 <__NVIC_SetPriorityGrouping+0x44>)
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001202:	68ba      	ldr	r2, [r7, #8]
 8001204:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001208:	4013      	ands	r3, r2
 800120a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001214:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001218:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800121c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800121e:	4a04      	ldr	r2, [pc, #16]	; (8001230 <__NVIC_SetPriorityGrouping+0x44>)
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	60d3      	str	r3, [r2, #12]
}
 8001224:	bf00      	nop
 8001226:	3714      	adds	r7, #20
 8001228:	46bd      	mov	sp, r7
 800122a:	bc80      	pop	{r7}
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	e000ed00 	.word	0xe000ed00

08001234 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001238:	4b04      	ldr	r3, [pc, #16]	; (800124c <__NVIC_GetPriorityGrouping+0x18>)
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	0a1b      	lsrs	r3, r3, #8
 800123e:	f003 0307 	and.w	r3, r3, #7
}
 8001242:	4618      	mov	r0, r3
 8001244:	46bd      	mov	sp, r7
 8001246:	bc80      	pop	{r7}
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	e000ed00 	.word	0xe000ed00

08001250 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800125a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125e:	2b00      	cmp	r3, #0
 8001260:	db0b      	blt.n	800127a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001262:	79fb      	ldrb	r3, [r7, #7]
 8001264:	f003 021f 	and.w	r2, r3, #31
 8001268:	4906      	ldr	r1, [pc, #24]	; (8001284 <__NVIC_EnableIRQ+0x34>)
 800126a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126e:	095b      	lsrs	r3, r3, #5
 8001270:	2001      	movs	r0, #1
 8001272:	fa00 f202 	lsl.w	r2, r0, r2
 8001276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	bc80      	pop	{r7}
 8001282:	4770      	bx	lr
 8001284:	e000e100 	.word	0xe000e100

08001288 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	6039      	str	r1, [r7, #0]
 8001292:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001298:	2b00      	cmp	r3, #0
 800129a:	db0a      	blt.n	80012b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	b2da      	uxtb	r2, r3
 80012a0:	490c      	ldr	r1, [pc, #48]	; (80012d4 <__NVIC_SetPriority+0x4c>)
 80012a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a6:	0112      	lsls	r2, r2, #4
 80012a8:	b2d2      	uxtb	r2, r2
 80012aa:	440b      	add	r3, r1
 80012ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012b0:	e00a      	b.n	80012c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	b2da      	uxtb	r2, r3
 80012b6:	4908      	ldr	r1, [pc, #32]	; (80012d8 <__NVIC_SetPriority+0x50>)
 80012b8:	79fb      	ldrb	r3, [r7, #7]
 80012ba:	f003 030f 	and.w	r3, r3, #15
 80012be:	3b04      	subs	r3, #4
 80012c0:	0112      	lsls	r2, r2, #4
 80012c2:	b2d2      	uxtb	r2, r2
 80012c4:	440b      	add	r3, r1
 80012c6:	761a      	strb	r2, [r3, #24]
}
 80012c8:	bf00      	nop
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bc80      	pop	{r7}
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	e000e100 	.word	0xe000e100
 80012d8:	e000ed00 	.word	0xe000ed00

080012dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012dc:	b480      	push	{r7}
 80012de:	b089      	sub	sp, #36	; 0x24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	f003 0307 	and.w	r3, r3, #7
 80012ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	f1c3 0307 	rsb	r3, r3, #7
 80012f6:	2b04      	cmp	r3, #4
 80012f8:	bf28      	it	cs
 80012fa:	2304      	movcs	r3, #4
 80012fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	3304      	adds	r3, #4
 8001302:	2b06      	cmp	r3, #6
 8001304:	d902      	bls.n	800130c <NVIC_EncodePriority+0x30>
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	3b03      	subs	r3, #3
 800130a:	e000      	b.n	800130e <NVIC_EncodePriority+0x32>
 800130c:	2300      	movs	r3, #0
 800130e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001310:	f04f 32ff 	mov.w	r2, #4294967295
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	fa02 f303 	lsl.w	r3, r2, r3
 800131a:	43da      	mvns	r2, r3
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	401a      	ands	r2, r3
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001324:	f04f 31ff 	mov.w	r1, #4294967295
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	fa01 f303 	lsl.w	r3, r1, r3
 800132e:	43d9      	mvns	r1, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001334:	4313      	orrs	r3, r2
         );
}
 8001336:	4618      	mov	r0, r3
 8001338:	3724      	adds	r7, #36	; 0x24
 800133a:	46bd      	mov	sp, r7
 800133c:	bc80      	pop	{r7}
 800133e:	4770      	bx	lr

08001340 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	3b01      	subs	r3, #1
 800134c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001350:	d301      	bcc.n	8001356 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001352:	2301      	movs	r3, #1
 8001354:	e00f      	b.n	8001376 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001356:	4a0a      	ldr	r2, [pc, #40]	; (8001380 <SysTick_Config+0x40>)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	3b01      	subs	r3, #1
 800135c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800135e:	210f      	movs	r1, #15
 8001360:	f04f 30ff 	mov.w	r0, #4294967295
 8001364:	f7ff ff90 	bl	8001288 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001368:	4b05      	ldr	r3, [pc, #20]	; (8001380 <SysTick_Config+0x40>)
 800136a:	2200      	movs	r2, #0
 800136c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800136e:	4b04      	ldr	r3, [pc, #16]	; (8001380 <SysTick_Config+0x40>)
 8001370:	2207      	movs	r2, #7
 8001372:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001374:	2300      	movs	r3, #0
}
 8001376:	4618      	mov	r0, r3
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	e000e010 	.word	0xe000e010

08001384 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f7ff ff2d 	bl	80011ec <__NVIC_SetPriorityGrouping>
}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800139a:	b580      	push	{r7, lr}
 800139c:	b086      	sub	sp, #24
 800139e:	af00      	add	r7, sp, #0
 80013a0:	4603      	mov	r3, r0
 80013a2:	60b9      	str	r1, [r7, #8]
 80013a4:	607a      	str	r2, [r7, #4]
 80013a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013a8:	2300      	movs	r3, #0
 80013aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013ac:	f7ff ff42 	bl	8001234 <__NVIC_GetPriorityGrouping>
 80013b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	68b9      	ldr	r1, [r7, #8]
 80013b6:	6978      	ldr	r0, [r7, #20]
 80013b8:	f7ff ff90 	bl	80012dc <NVIC_EncodePriority>
 80013bc:	4602      	mov	r2, r0
 80013be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013c2:	4611      	mov	r1, r2
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff ff5f 	bl	8001288 <__NVIC_SetPriority>
}
 80013ca:	bf00      	nop
 80013cc:	3718      	adds	r7, #24
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b082      	sub	sp, #8
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	4603      	mov	r3, r0
 80013da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff ff35 	bl	8001250 <__NVIC_EnableIRQ>
}
 80013e6:	bf00      	nop
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b082      	sub	sp, #8
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f7ff ffa2 	bl	8001340 <SysTick_Config>
 80013fc:	4603      	mov	r3, r0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
	...

08001408 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001410:	2300      	movs	r3, #0
 8001412:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d101      	bne.n	800141e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e043      	b.n	80014a6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	461a      	mov	r2, r3
 8001424:	4b22      	ldr	r3, [pc, #136]	; (80014b0 <HAL_DMA_Init+0xa8>)
 8001426:	4413      	add	r3, r2
 8001428:	4a22      	ldr	r2, [pc, #136]	; (80014b4 <HAL_DMA_Init+0xac>)
 800142a:	fba2 2303 	umull	r2, r3, r2, r3
 800142e:	091b      	lsrs	r3, r3, #4
 8001430:	009a      	lsls	r2, r3, #2
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a1f      	ldr	r2, [pc, #124]	; (80014b8 <HAL_DMA_Init+0xb0>)
 800143a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2202      	movs	r2, #2
 8001440:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001452:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001456:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001460:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	68db      	ldr	r3, [r3, #12]
 8001466:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800146c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	695b      	ldr	r3, [r3, #20]
 8001472:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001478:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	69db      	ldr	r3, [r3, #28]
 800147e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001480:	68fa      	ldr	r2, [r7, #12]
 8001482:	4313      	orrs	r3, r2
 8001484:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	68fa      	ldr	r2, [r7, #12]
 800148c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2200      	movs	r2, #0
 8001492:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2201      	movs	r2, #1
 8001498:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2200      	movs	r2, #0
 80014a0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80014a4:	2300      	movs	r3, #0
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3714      	adds	r7, #20
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bc80      	pop	{r7}
 80014ae:	4770      	bx	lr
 80014b0:	bffdfff8 	.word	0xbffdfff8
 80014b4:	cccccccd 	.word	0xcccccccd
 80014b8:	40020000 	.word	0x40020000

080014bc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b086      	sub	sp, #24
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	60f8      	str	r0, [r7, #12]
 80014c4:	60b9      	str	r1, [r7, #8]
 80014c6:	607a      	str	r2, [r7, #4]
 80014c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80014ca:	2300      	movs	r3, #0
 80014cc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d101      	bne.n	80014dc <HAL_DMA_Start_IT+0x20>
 80014d8:	2302      	movs	r3, #2
 80014da:	e04b      	b.n	8001574 <HAL_DMA_Start_IT+0xb8>
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	2201      	movs	r2, #1
 80014e0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d13a      	bne.n	8001566 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	2202      	movs	r2, #2
 80014f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	2200      	movs	r2, #0
 80014fc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f022 0201 	bic.w	r2, r2, #1
 800150c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	68b9      	ldr	r1, [r7, #8]
 8001514:	68f8      	ldr	r0, [r7, #12]
 8001516:	f000 f937 	bl	8001788 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800151e:	2b00      	cmp	r3, #0
 8001520:	d008      	beq.n	8001534 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f042 020e 	orr.w	r2, r2, #14
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	e00f      	b.n	8001554 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f022 0204 	bic.w	r2, r2, #4
 8001542:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f042 020a 	orr.w	r2, r2, #10
 8001552:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f042 0201 	orr.w	r2, r2, #1
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	e005      	b.n	8001572 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	2200      	movs	r2, #0
 800156a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800156e:	2302      	movs	r3, #2
 8001570:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001572:	7dfb      	ldrb	r3, [r7, #23]
}
 8001574:	4618      	mov	r0, r3
 8001576:	3718      	adds	r7, #24
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}

0800157c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001598:	2204      	movs	r2, #4
 800159a:	409a      	lsls	r2, r3
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	4013      	ands	r3, r2
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d04f      	beq.n	8001644 <HAL_DMA_IRQHandler+0xc8>
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	f003 0304 	and.w	r3, r3, #4
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d04a      	beq.n	8001644 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0320 	and.w	r3, r3, #32
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d107      	bne.n	80015cc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f022 0204 	bic.w	r2, r2, #4
 80015ca:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a66      	ldr	r2, [pc, #408]	; (800176c <HAL_DMA_IRQHandler+0x1f0>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d029      	beq.n	800162a <HAL_DMA_IRQHandler+0xae>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a65      	ldr	r2, [pc, #404]	; (8001770 <HAL_DMA_IRQHandler+0x1f4>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d022      	beq.n	8001626 <HAL_DMA_IRQHandler+0xaa>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a63      	ldr	r2, [pc, #396]	; (8001774 <HAL_DMA_IRQHandler+0x1f8>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d01a      	beq.n	8001620 <HAL_DMA_IRQHandler+0xa4>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a62      	ldr	r2, [pc, #392]	; (8001778 <HAL_DMA_IRQHandler+0x1fc>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d012      	beq.n	800161a <HAL_DMA_IRQHandler+0x9e>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a60      	ldr	r2, [pc, #384]	; (800177c <HAL_DMA_IRQHandler+0x200>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d00a      	beq.n	8001614 <HAL_DMA_IRQHandler+0x98>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a5f      	ldr	r2, [pc, #380]	; (8001780 <HAL_DMA_IRQHandler+0x204>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d102      	bne.n	800160e <HAL_DMA_IRQHandler+0x92>
 8001608:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800160c:	e00e      	b.n	800162c <HAL_DMA_IRQHandler+0xb0>
 800160e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001612:	e00b      	b.n	800162c <HAL_DMA_IRQHandler+0xb0>
 8001614:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001618:	e008      	b.n	800162c <HAL_DMA_IRQHandler+0xb0>
 800161a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800161e:	e005      	b.n	800162c <HAL_DMA_IRQHandler+0xb0>
 8001620:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001624:	e002      	b.n	800162c <HAL_DMA_IRQHandler+0xb0>
 8001626:	2340      	movs	r3, #64	; 0x40
 8001628:	e000      	b.n	800162c <HAL_DMA_IRQHandler+0xb0>
 800162a:	2304      	movs	r3, #4
 800162c:	4a55      	ldr	r2, [pc, #340]	; (8001784 <HAL_DMA_IRQHandler+0x208>)
 800162e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001634:	2b00      	cmp	r3, #0
 8001636:	f000 8094 	beq.w	8001762 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001642:	e08e      	b.n	8001762 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001648:	2202      	movs	r2, #2
 800164a:	409a      	lsls	r2, r3
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	4013      	ands	r3, r2
 8001650:	2b00      	cmp	r3, #0
 8001652:	d056      	beq.n	8001702 <HAL_DMA_IRQHandler+0x186>
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	2b00      	cmp	r3, #0
 800165c:	d051      	beq.n	8001702 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 0320 	and.w	r3, r3, #32
 8001668:	2b00      	cmp	r3, #0
 800166a:	d10b      	bne.n	8001684 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f022 020a 	bic.w	r2, r2, #10
 800167a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2201      	movs	r2, #1
 8001680:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a38      	ldr	r2, [pc, #224]	; (800176c <HAL_DMA_IRQHandler+0x1f0>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d029      	beq.n	80016e2 <HAL_DMA_IRQHandler+0x166>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a37      	ldr	r2, [pc, #220]	; (8001770 <HAL_DMA_IRQHandler+0x1f4>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d022      	beq.n	80016de <HAL_DMA_IRQHandler+0x162>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a35      	ldr	r2, [pc, #212]	; (8001774 <HAL_DMA_IRQHandler+0x1f8>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d01a      	beq.n	80016d8 <HAL_DMA_IRQHandler+0x15c>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a34      	ldr	r2, [pc, #208]	; (8001778 <HAL_DMA_IRQHandler+0x1fc>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d012      	beq.n	80016d2 <HAL_DMA_IRQHandler+0x156>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a32      	ldr	r2, [pc, #200]	; (800177c <HAL_DMA_IRQHandler+0x200>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d00a      	beq.n	80016cc <HAL_DMA_IRQHandler+0x150>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a31      	ldr	r2, [pc, #196]	; (8001780 <HAL_DMA_IRQHandler+0x204>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d102      	bne.n	80016c6 <HAL_DMA_IRQHandler+0x14a>
 80016c0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80016c4:	e00e      	b.n	80016e4 <HAL_DMA_IRQHandler+0x168>
 80016c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016ca:	e00b      	b.n	80016e4 <HAL_DMA_IRQHandler+0x168>
 80016cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016d0:	e008      	b.n	80016e4 <HAL_DMA_IRQHandler+0x168>
 80016d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016d6:	e005      	b.n	80016e4 <HAL_DMA_IRQHandler+0x168>
 80016d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016dc:	e002      	b.n	80016e4 <HAL_DMA_IRQHandler+0x168>
 80016de:	2320      	movs	r3, #32
 80016e0:	e000      	b.n	80016e4 <HAL_DMA_IRQHandler+0x168>
 80016e2:	2302      	movs	r3, #2
 80016e4:	4a27      	ldr	r2, [pc, #156]	; (8001784 <HAL_DMA_IRQHandler+0x208>)
 80016e6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2200      	movs	r2, #0
 80016ec:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d034      	beq.n	8001762 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001700:	e02f      	b.n	8001762 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001706:	2208      	movs	r2, #8
 8001708:	409a      	lsls	r2, r3
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	4013      	ands	r3, r2
 800170e:	2b00      	cmp	r3, #0
 8001710:	d028      	beq.n	8001764 <HAL_DMA_IRQHandler+0x1e8>
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	f003 0308 	and.w	r3, r3, #8
 8001718:	2b00      	cmp	r3, #0
 800171a:	d023      	beq.n	8001764 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f022 020e 	bic.w	r2, r2, #14
 800172a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001734:	2101      	movs	r1, #1
 8001736:	fa01 f202 	lsl.w	r2, r1, r2
 800173a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2201      	movs	r2, #1
 8001740:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2201      	movs	r2, #1
 8001746:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	2b00      	cmp	r3, #0
 8001758:	d004      	beq.n	8001764 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	4798      	blx	r3
    }
  }
  return;
 8001762:	bf00      	nop
 8001764:	bf00      	nop
}
 8001766:	3710      	adds	r7, #16
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	40020008 	.word	0x40020008
 8001770:	4002001c 	.word	0x4002001c
 8001774:	40020030 	.word	0x40020030
 8001778:	40020044 	.word	0x40020044
 800177c:	40020058 	.word	0x40020058
 8001780:	4002006c 	.word	0x4002006c
 8001784:	40020000 	.word	0x40020000

08001788 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	60b9      	str	r1, [r7, #8]
 8001792:	607a      	str	r2, [r7, #4]
 8001794:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800179e:	2101      	movs	r1, #1
 80017a0:	fa01 f202 	lsl.w	r2, r1, r2
 80017a4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	683a      	ldr	r2, [r7, #0]
 80017ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	2b10      	cmp	r3, #16
 80017b4:	d108      	bne.n	80017c8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	68ba      	ldr	r2, [r7, #8]
 80017c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80017c6:	e007      	b.n	80017d8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	68ba      	ldr	r2, [r7, #8]
 80017ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	60da      	str	r2, [r3, #12]
}
 80017d8:	bf00      	nop
 80017da:	3714      	adds	r7, #20
 80017dc:	46bd      	mov	sp, r7
 80017de:	bc80      	pop	{r7}
 80017e0:	4770      	bx	lr
	...

080017e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b08b      	sub	sp, #44	; 0x2c
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017ee:	2300      	movs	r3, #0
 80017f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017f2:	2300      	movs	r3, #0
 80017f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017f6:	e169      	b.n	8001acc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017f8:	2201      	movs	r2, #1
 80017fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	69fa      	ldr	r2, [r7, #28]
 8001808:	4013      	ands	r3, r2
 800180a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	429a      	cmp	r2, r3
 8001812:	f040 8158 	bne.w	8001ac6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	4a9a      	ldr	r2, [pc, #616]	; (8001a84 <HAL_GPIO_Init+0x2a0>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d05e      	beq.n	80018de <HAL_GPIO_Init+0xfa>
 8001820:	4a98      	ldr	r2, [pc, #608]	; (8001a84 <HAL_GPIO_Init+0x2a0>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d875      	bhi.n	8001912 <HAL_GPIO_Init+0x12e>
 8001826:	4a98      	ldr	r2, [pc, #608]	; (8001a88 <HAL_GPIO_Init+0x2a4>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d058      	beq.n	80018de <HAL_GPIO_Init+0xfa>
 800182c:	4a96      	ldr	r2, [pc, #600]	; (8001a88 <HAL_GPIO_Init+0x2a4>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d86f      	bhi.n	8001912 <HAL_GPIO_Init+0x12e>
 8001832:	4a96      	ldr	r2, [pc, #600]	; (8001a8c <HAL_GPIO_Init+0x2a8>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d052      	beq.n	80018de <HAL_GPIO_Init+0xfa>
 8001838:	4a94      	ldr	r2, [pc, #592]	; (8001a8c <HAL_GPIO_Init+0x2a8>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d869      	bhi.n	8001912 <HAL_GPIO_Init+0x12e>
 800183e:	4a94      	ldr	r2, [pc, #592]	; (8001a90 <HAL_GPIO_Init+0x2ac>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d04c      	beq.n	80018de <HAL_GPIO_Init+0xfa>
 8001844:	4a92      	ldr	r2, [pc, #584]	; (8001a90 <HAL_GPIO_Init+0x2ac>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d863      	bhi.n	8001912 <HAL_GPIO_Init+0x12e>
 800184a:	4a92      	ldr	r2, [pc, #584]	; (8001a94 <HAL_GPIO_Init+0x2b0>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d046      	beq.n	80018de <HAL_GPIO_Init+0xfa>
 8001850:	4a90      	ldr	r2, [pc, #576]	; (8001a94 <HAL_GPIO_Init+0x2b0>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d85d      	bhi.n	8001912 <HAL_GPIO_Init+0x12e>
 8001856:	2b12      	cmp	r3, #18
 8001858:	d82a      	bhi.n	80018b0 <HAL_GPIO_Init+0xcc>
 800185a:	2b12      	cmp	r3, #18
 800185c:	d859      	bhi.n	8001912 <HAL_GPIO_Init+0x12e>
 800185e:	a201      	add	r2, pc, #4	; (adr r2, 8001864 <HAL_GPIO_Init+0x80>)
 8001860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001864:	080018df 	.word	0x080018df
 8001868:	080018b9 	.word	0x080018b9
 800186c:	080018cb 	.word	0x080018cb
 8001870:	0800190d 	.word	0x0800190d
 8001874:	08001913 	.word	0x08001913
 8001878:	08001913 	.word	0x08001913
 800187c:	08001913 	.word	0x08001913
 8001880:	08001913 	.word	0x08001913
 8001884:	08001913 	.word	0x08001913
 8001888:	08001913 	.word	0x08001913
 800188c:	08001913 	.word	0x08001913
 8001890:	08001913 	.word	0x08001913
 8001894:	08001913 	.word	0x08001913
 8001898:	08001913 	.word	0x08001913
 800189c:	08001913 	.word	0x08001913
 80018a0:	08001913 	.word	0x08001913
 80018a4:	08001913 	.word	0x08001913
 80018a8:	080018c1 	.word	0x080018c1
 80018ac:	080018d5 	.word	0x080018d5
 80018b0:	4a79      	ldr	r2, [pc, #484]	; (8001a98 <HAL_GPIO_Init+0x2b4>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d013      	beq.n	80018de <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80018b6:	e02c      	b.n	8001912 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	623b      	str	r3, [r7, #32]
          break;
 80018be:	e029      	b.n	8001914 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	3304      	adds	r3, #4
 80018c6:	623b      	str	r3, [r7, #32]
          break;
 80018c8:	e024      	b.n	8001914 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	68db      	ldr	r3, [r3, #12]
 80018ce:	3308      	adds	r3, #8
 80018d0:	623b      	str	r3, [r7, #32]
          break;
 80018d2:	e01f      	b.n	8001914 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	330c      	adds	r3, #12
 80018da:	623b      	str	r3, [r7, #32]
          break;
 80018dc:	e01a      	b.n	8001914 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d102      	bne.n	80018ec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018e6:	2304      	movs	r3, #4
 80018e8:	623b      	str	r3, [r7, #32]
          break;
 80018ea:	e013      	b.n	8001914 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d105      	bne.n	8001900 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018f4:	2308      	movs	r3, #8
 80018f6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	69fa      	ldr	r2, [r7, #28]
 80018fc:	611a      	str	r2, [r3, #16]
          break;
 80018fe:	e009      	b.n	8001914 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001900:	2308      	movs	r3, #8
 8001902:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	69fa      	ldr	r2, [r7, #28]
 8001908:	615a      	str	r2, [r3, #20]
          break;
 800190a:	e003      	b.n	8001914 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800190c:	2300      	movs	r3, #0
 800190e:	623b      	str	r3, [r7, #32]
          break;
 8001910:	e000      	b.n	8001914 <HAL_GPIO_Init+0x130>
          break;
 8001912:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	2bff      	cmp	r3, #255	; 0xff
 8001918:	d801      	bhi.n	800191e <HAL_GPIO_Init+0x13a>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	e001      	b.n	8001922 <HAL_GPIO_Init+0x13e>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	3304      	adds	r3, #4
 8001922:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	2bff      	cmp	r3, #255	; 0xff
 8001928:	d802      	bhi.n	8001930 <HAL_GPIO_Init+0x14c>
 800192a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	e002      	b.n	8001936 <HAL_GPIO_Init+0x152>
 8001930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001932:	3b08      	subs	r3, #8
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	210f      	movs	r1, #15
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	fa01 f303 	lsl.w	r3, r1, r3
 8001944:	43db      	mvns	r3, r3
 8001946:	401a      	ands	r2, r3
 8001948:	6a39      	ldr	r1, [r7, #32]
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	fa01 f303 	lsl.w	r3, r1, r3
 8001950:	431a      	orrs	r2, r3
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800195e:	2b00      	cmp	r3, #0
 8001960:	f000 80b1 	beq.w	8001ac6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001964:	4b4d      	ldr	r3, [pc, #308]	; (8001a9c <HAL_GPIO_Init+0x2b8>)
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	4a4c      	ldr	r2, [pc, #304]	; (8001a9c <HAL_GPIO_Init+0x2b8>)
 800196a:	f043 0301 	orr.w	r3, r3, #1
 800196e:	6193      	str	r3, [r2, #24]
 8001970:	4b4a      	ldr	r3, [pc, #296]	; (8001a9c <HAL_GPIO_Init+0x2b8>)
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	f003 0301 	and.w	r3, r3, #1
 8001978:	60bb      	str	r3, [r7, #8]
 800197a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800197c:	4a48      	ldr	r2, [pc, #288]	; (8001aa0 <HAL_GPIO_Init+0x2bc>)
 800197e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001980:	089b      	lsrs	r3, r3, #2
 8001982:	3302      	adds	r3, #2
 8001984:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001988:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800198a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198c:	f003 0303 	and.w	r3, r3, #3
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	220f      	movs	r2, #15
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	43db      	mvns	r3, r3
 800199a:	68fa      	ldr	r2, [r7, #12]
 800199c:	4013      	ands	r3, r2
 800199e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	4a40      	ldr	r2, [pc, #256]	; (8001aa4 <HAL_GPIO_Init+0x2c0>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d013      	beq.n	80019d0 <HAL_GPIO_Init+0x1ec>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	4a3f      	ldr	r2, [pc, #252]	; (8001aa8 <HAL_GPIO_Init+0x2c4>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d00d      	beq.n	80019cc <HAL_GPIO_Init+0x1e8>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	4a3e      	ldr	r2, [pc, #248]	; (8001aac <HAL_GPIO_Init+0x2c8>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d007      	beq.n	80019c8 <HAL_GPIO_Init+0x1e4>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	4a3d      	ldr	r2, [pc, #244]	; (8001ab0 <HAL_GPIO_Init+0x2cc>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d101      	bne.n	80019c4 <HAL_GPIO_Init+0x1e0>
 80019c0:	2303      	movs	r3, #3
 80019c2:	e006      	b.n	80019d2 <HAL_GPIO_Init+0x1ee>
 80019c4:	2304      	movs	r3, #4
 80019c6:	e004      	b.n	80019d2 <HAL_GPIO_Init+0x1ee>
 80019c8:	2302      	movs	r3, #2
 80019ca:	e002      	b.n	80019d2 <HAL_GPIO_Init+0x1ee>
 80019cc:	2301      	movs	r3, #1
 80019ce:	e000      	b.n	80019d2 <HAL_GPIO_Init+0x1ee>
 80019d0:	2300      	movs	r3, #0
 80019d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019d4:	f002 0203 	and.w	r2, r2, #3
 80019d8:	0092      	lsls	r2, r2, #2
 80019da:	4093      	lsls	r3, r2
 80019dc:	68fa      	ldr	r2, [r7, #12]
 80019de:	4313      	orrs	r3, r2
 80019e0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019e2:	492f      	ldr	r1, [pc, #188]	; (8001aa0 <HAL_GPIO_Init+0x2bc>)
 80019e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e6:	089b      	lsrs	r3, r3, #2
 80019e8:	3302      	adds	r3, #2
 80019ea:	68fa      	ldr	r2, [r7, #12]
 80019ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d006      	beq.n	8001a0a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019fc:	4b2d      	ldr	r3, [pc, #180]	; (8001ab4 <HAL_GPIO_Init+0x2d0>)
 80019fe:	689a      	ldr	r2, [r3, #8]
 8001a00:	492c      	ldr	r1, [pc, #176]	; (8001ab4 <HAL_GPIO_Init+0x2d0>)
 8001a02:	69bb      	ldr	r3, [r7, #24]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	608b      	str	r3, [r1, #8]
 8001a08:	e006      	b.n	8001a18 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a0a:	4b2a      	ldr	r3, [pc, #168]	; (8001ab4 <HAL_GPIO_Init+0x2d0>)
 8001a0c:	689a      	ldr	r2, [r3, #8]
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	43db      	mvns	r3, r3
 8001a12:	4928      	ldr	r1, [pc, #160]	; (8001ab4 <HAL_GPIO_Init+0x2d0>)
 8001a14:	4013      	ands	r3, r2
 8001a16:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d006      	beq.n	8001a32 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a24:	4b23      	ldr	r3, [pc, #140]	; (8001ab4 <HAL_GPIO_Init+0x2d0>)
 8001a26:	68da      	ldr	r2, [r3, #12]
 8001a28:	4922      	ldr	r1, [pc, #136]	; (8001ab4 <HAL_GPIO_Init+0x2d0>)
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	60cb      	str	r3, [r1, #12]
 8001a30:	e006      	b.n	8001a40 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a32:	4b20      	ldr	r3, [pc, #128]	; (8001ab4 <HAL_GPIO_Init+0x2d0>)
 8001a34:	68da      	ldr	r2, [r3, #12]
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	43db      	mvns	r3, r3
 8001a3a:	491e      	ldr	r1, [pc, #120]	; (8001ab4 <HAL_GPIO_Init+0x2d0>)
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d006      	beq.n	8001a5a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a4c:	4b19      	ldr	r3, [pc, #100]	; (8001ab4 <HAL_GPIO_Init+0x2d0>)
 8001a4e:	685a      	ldr	r2, [r3, #4]
 8001a50:	4918      	ldr	r1, [pc, #96]	; (8001ab4 <HAL_GPIO_Init+0x2d0>)
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	604b      	str	r3, [r1, #4]
 8001a58:	e006      	b.n	8001a68 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a5a:	4b16      	ldr	r3, [pc, #88]	; (8001ab4 <HAL_GPIO_Init+0x2d0>)
 8001a5c:	685a      	ldr	r2, [r3, #4]
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	43db      	mvns	r3, r3
 8001a62:	4914      	ldr	r1, [pc, #80]	; (8001ab4 <HAL_GPIO_Init+0x2d0>)
 8001a64:	4013      	ands	r3, r2
 8001a66:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d021      	beq.n	8001ab8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a74:	4b0f      	ldr	r3, [pc, #60]	; (8001ab4 <HAL_GPIO_Init+0x2d0>)
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	490e      	ldr	r1, [pc, #56]	; (8001ab4 <HAL_GPIO_Init+0x2d0>)
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	600b      	str	r3, [r1, #0]
 8001a80:	e021      	b.n	8001ac6 <HAL_GPIO_Init+0x2e2>
 8001a82:	bf00      	nop
 8001a84:	10320000 	.word	0x10320000
 8001a88:	10310000 	.word	0x10310000
 8001a8c:	10220000 	.word	0x10220000
 8001a90:	10210000 	.word	0x10210000
 8001a94:	10120000 	.word	0x10120000
 8001a98:	10110000 	.word	0x10110000
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	40010000 	.word	0x40010000
 8001aa4:	40010800 	.word	0x40010800
 8001aa8:	40010c00 	.word	0x40010c00
 8001aac:	40011000 	.word	0x40011000
 8001ab0:	40011400 	.word	0x40011400
 8001ab4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ab8:	4b0b      	ldr	r3, [pc, #44]	; (8001ae8 <HAL_GPIO_Init+0x304>)
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	43db      	mvns	r3, r3
 8001ac0:	4909      	ldr	r1, [pc, #36]	; (8001ae8 <HAL_GPIO_Init+0x304>)
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac8:	3301      	adds	r3, #1
 8001aca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	f47f ae8e 	bne.w	80017f8 <HAL_GPIO_Init+0x14>
  }
}
 8001adc:	bf00      	nop
 8001ade:	bf00      	nop
 8001ae0:	372c      	adds	r7, #44	; 0x2c
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bc80      	pop	{r7}
 8001ae6:	4770      	bx	lr
 8001ae8:	40010400 	.word	0x40010400

08001aec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b086      	sub	sp, #24
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d101      	bne.n	8001afe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e272      	b.n	8001fe4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	f000 8087 	beq.w	8001c1a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b0c:	4b92      	ldr	r3, [pc, #584]	; (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f003 030c 	and.w	r3, r3, #12
 8001b14:	2b04      	cmp	r3, #4
 8001b16:	d00c      	beq.n	8001b32 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b18:	4b8f      	ldr	r3, [pc, #572]	; (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f003 030c 	and.w	r3, r3, #12
 8001b20:	2b08      	cmp	r3, #8
 8001b22:	d112      	bne.n	8001b4a <HAL_RCC_OscConfig+0x5e>
 8001b24:	4b8c      	ldr	r3, [pc, #560]	; (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b30:	d10b      	bne.n	8001b4a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b32:	4b89      	ldr	r3, [pc, #548]	; (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d06c      	beq.n	8001c18 <HAL_RCC_OscConfig+0x12c>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d168      	bne.n	8001c18 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e24c      	b.n	8001fe4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b52:	d106      	bne.n	8001b62 <HAL_RCC_OscConfig+0x76>
 8001b54:	4b80      	ldr	r3, [pc, #512]	; (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a7f      	ldr	r2, [pc, #508]	; (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001b5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b5e:	6013      	str	r3, [r2, #0]
 8001b60:	e02e      	b.n	8001bc0 <HAL_RCC_OscConfig+0xd4>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d10c      	bne.n	8001b84 <HAL_RCC_OscConfig+0x98>
 8001b6a:	4b7b      	ldr	r3, [pc, #492]	; (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a7a      	ldr	r2, [pc, #488]	; (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001b70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b74:	6013      	str	r3, [r2, #0]
 8001b76:	4b78      	ldr	r3, [pc, #480]	; (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a77      	ldr	r2, [pc, #476]	; (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001b7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b80:	6013      	str	r3, [r2, #0]
 8001b82:	e01d      	b.n	8001bc0 <HAL_RCC_OscConfig+0xd4>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b8c:	d10c      	bne.n	8001ba8 <HAL_RCC_OscConfig+0xbc>
 8001b8e:	4b72      	ldr	r3, [pc, #456]	; (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a71      	ldr	r2, [pc, #452]	; (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001b94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b98:	6013      	str	r3, [r2, #0]
 8001b9a:	4b6f      	ldr	r3, [pc, #444]	; (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a6e      	ldr	r2, [pc, #440]	; (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001ba0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ba4:	6013      	str	r3, [r2, #0]
 8001ba6:	e00b      	b.n	8001bc0 <HAL_RCC_OscConfig+0xd4>
 8001ba8:	4b6b      	ldr	r3, [pc, #428]	; (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a6a      	ldr	r2, [pc, #424]	; (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001bae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bb2:	6013      	str	r3, [r2, #0]
 8001bb4:	4b68      	ldr	r3, [pc, #416]	; (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a67      	ldr	r2, [pc, #412]	; (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001bba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bbe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d013      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc8:	f7fe fe6a 	bl	80008a0 <HAL_GetTick>
 8001bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bce:	e008      	b.n	8001be2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bd0:	f7fe fe66 	bl	80008a0 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	2b64      	cmp	r3, #100	; 0x64
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e200      	b.n	8001fe4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001be2:	4b5d      	ldr	r3, [pc, #372]	; (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d0f0      	beq.n	8001bd0 <HAL_RCC_OscConfig+0xe4>
 8001bee:	e014      	b.n	8001c1a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf0:	f7fe fe56 	bl	80008a0 <HAL_GetTick>
 8001bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bf6:	e008      	b.n	8001c0a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bf8:	f7fe fe52 	bl	80008a0 <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	2b64      	cmp	r3, #100	; 0x64
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e1ec      	b.n	8001fe4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c0a:	4b53      	ldr	r3, [pc, #332]	; (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d1f0      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x10c>
 8001c16:	e000      	b.n	8001c1a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d063      	beq.n	8001cee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c26:	4b4c      	ldr	r3, [pc, #304]	; (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f003 030c 	and.w	r3, r3, #12
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d00b      	beq.n	8001c4a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c32:	4b49      	ldr	r3, [pc, #292]	; (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f003 030c 	and.w	r3, r3, #12
 8001c3a:	2b08      	cmp	r3, #8
 8001c3c:	d11c      	bne.n	8001c78 <HAL_RCC_OscConfig+0x18c>
 8001c3e:	4b46      	ldr	r3, [pc, #280]	; (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d116      	bne.n	8001c78 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c4a:	4b43      	ldr	r3, [pc, #268]	; (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d005      	beq.n	8001c62 <HAL_RCC_OscConfig+0x176>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	691b      	ldr	r3, [r3, #16]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d001      	beq.n	8001c62 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e1c0      	b.n	8001fe4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c62:	4b3d      	ldr	r3, [pc, #244]	; (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	695b      	ldr	r3, [r3, #20]
 8001c6e:	00db      	lsls	r3, r3, #3
 8001c70:	4939      	ldr	r1, [pc, #228]	; (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001c72:	4313      	orrs	r3, r2
 8001c74:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c76:	e03a      	b.n	8001cee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	691b      	ldr	r3, [r3, #16]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d020      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c80:	4b36      	ldr	r3, [pc, #216]	; (8001d5c <HAL_RCC_OscConfig+0x270>)
 8001c82:	2201      	movs	r2, #1
 8001c84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c86:	f7fe fe0b 	bl	80008a0 <HAL_GetTick>
 8001c8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c8c:	e008      	b.n	8001ca0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c8e:	f7fe fe07 	bl	80008a0 <HAL_GetTick>
 8001c92:	4602      	mov	r2, r0
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d901      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e1a1      	b.n	8001fe4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ca0:	4b2d      	ldr	r3, [pc, #180]	; (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0302 	and.w	r3, r3, #2
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d0f0      	beq.n	8001c8e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cac:	4b2a      	ldr	r3, [pc, #168]	; (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	695b      	ldr	r3, [r3, #20]
 8001cb8:	00db      	lsls	r3, r3, #3
 8001cba:	4927      	ldr	r1, [pc, #156]	; (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	600b      	str	r3, [r1, #0]
 8001cc0:	e015      	b.n	8001cee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cc2:	4b26      	ldr	r3, [pc, #152]	; (8001d5c <HAL_RCC_OscConfig+0x270>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc8:	f7fe fdea 	bl	80008a0 <HAL_GetTick>
 8001ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cce:	e008      	b.n	8001ce2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cd0:	f7fe fde6 	bl	80008a0 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e180      	b.n	8001fe4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ce2:	4b1d      	ldr	r3, [pc, #116]	; (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0302 	and.w	r3, r3, #2
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d1f0      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0308 	and.w	r3, r3, #8
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d03a      	beq.n	8001d70 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	699b      	ldr	r3, [r3, #24]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d019      	beq.n	8001d36 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d02:	4b17      	ldr	r3, [pc, #92]	; (8001d60 <HAL_RCC_OscConfig+0x274>)
 8001d04:	2201      	movs	r2, #1
 8001d06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d08:	f7fe fdca 	bl	80008a0 <HAL_GetTick>
 8001d0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d0e:	e008      	b.n	8001d22 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d10:	f7fe fdc6 	bl	80008a0 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e160      	b.n	8001fe4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d22:	4b0d      	ldr	r3, [pc, #52]	; (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d0f0      	beq.n	8001d10 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d2e:	2001      	movs	r0, #1
 8001d30:	f000 fa9c 	bl	800226c <RCC_Delay>
 8001d34:	e01c      	b.n	8001d70 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d36:	4b0a      	ldr	r3, [pc, #40]	; (8001d60 <HAL_RCC_OscConfig+0x274>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d3c:	f7fe fdb0 	bl	80008a0 <HAL_GetTick>
 8001d40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d42:	e00f      	b.n	8001d64 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d44:	f7fe fdac 	bl	80008a0 <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d908      	bls.n	8001d64 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e146      	b.n	8001fe4 <HAL_RCC_OscConfig+0x4f8>
 8001d56:	bf00      	nop
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	42420000 	.word	0x42420000
 8001d60:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d64:	4b92      	ldr	r3, [pc, #584]	; (8001fb0 <HAL_RCC_OscConfig+0x4c4>)
 8001d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d68:	f003 0302 	and.w	r3, r3, #2
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d1e9      	bne.n	8001d44 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0304 	and.w	r3, r3, #4
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	f000 80a6 	beq.w	8001eca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d82:	4b8b      	ldr	r3, [pc, #556]	; (8001fb0 <HAL_RCC_OscConfig+0x4c4>)
 8001d84:	69db      	ldr	r3, [r3, #28]
 8001d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d10d      	bne.n	8001daa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d8e:	4b88      	ldr	r3, [pc, #544]	; (8001fb0 <HAL_RCC_OscConfig+0x4c4>)
 8001d90:	69db      	ldr	r3, [r3, #28]
 8001d92:	4a87      	ldr	r2, [pc, #540]	; (8001fb0 <HAL_RCC_OscConfig+0x4c4>)
 8001d94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d98:	61d3      	str	r3, [r2, #28]
 8001d9a:	4b85      	ldr	r3, [pc, #532]	; (8001fb0 <HAL_RCC_OscConfig+0x4c4>)
 8001d9c:	69db      	ldr	r3, [r3, #28]
 8001d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da2:	60bb      	str	r3, [r7, #8]
 8001da4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001da6:	2301      	movs	r3, #1
 8001da8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001daa:	4b82      	ldr	r3, [pc, #520]	; (8001fb4 <HAL_RCC_OscConfig+0x4c8>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d118      	bne.n	8001de8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001db6:	4b7f      	ldr	r3, [pc, #508]	; (8001fb4 <HAL_RCC_OscConfig+0x4c8>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a7e      	ldr	r2, [pc, #504]	; (8001fb4 <HAL_RCC_OscConfig+0x4c8>)
 8001dbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dc2:	f7fe fd6d 	bl	80008a0 <HAL_GetTick>
 8001dc6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dc8:	e008      	b.n	8001ddc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dca:	f7fe fd69 	bl	80008a0 <HAL_GetTick>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	2b64      	cmp	r3, #100	; 0x64
 8001dd6:	d901      	bls.n	8001ddc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e103      	b.n	8001fe4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ddc:	4b75      	ldr	r3, [pc, #468]	; (8001fb4 <HAL_RCC_OscConfig+0x4c8>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d0f0      	beq.n	8001dca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d106      	bne.n	8001dfe <HAL_RCC_OscConfig+0x312>
 8001df0:	4b6f      	ldr	r3, [pc, #444]	; (8001fb0 <HAL_RCC_OscConfig+0x4c4>)
 8001df2:	6a1b      	ldr	r3, [r3, #32]
 8001df4:	4a6e      	ldr	r2, [pc, #440]	; (8001fb0 <HAL_RCC_OscConfig+0x4c4>)
 8001df6:	f043 0301 	orr.w	r3, r3, #1
 8001dfa:	6213      	str	r3, [r2, #32]
 8001dfc:	e02d      	b.n	8001e5a <HAL_RCC_OscConfig+0x36e>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d10c      	bne.n	8001e20 <HAL_RCC_OscConfig+0x334>
 8001e06:	4b6a      	ldr	r3, [pc, #424]	; (8001fb0 <HAL_RCC_OscConfig+0x4c4>)
 8001e08:	6a1b      	ldr	r3, [r3, #32]
 8001e0a:	4a69      	ldr	r2, [pc, #420]	; (8001fb0 <HAL_RCC_OscConfig+0x4c4>)
 8001e0c:	f023 0301 	bic.w	r3, r3, #1
 8001e10:	6213      	str	r3, [r2, #32]
 8001e12:	4b67      	ldr	r3, [pc, #412]	; (8001fb0 <HAL_RCC_OscConfig+0x4c4>)
 8001e14:	6a1b      	ldr	r3, [r3, #32]
 8001e16:	4a66      	ldr	r2, [pc, #408]	; (8001fb0 <HAL_RCC_OscConfig+0x4c4>)
 8001e18:	f023 0304 	bic.w	r3, r3, #4
 8001e1c:	6213      	str	r3, [r2, #32]
 8001e1e:	e01c      	b.n	8001e5a <HAL_RCC_OscConfig+0x36e>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	2b05      	cmp	r3, #5
 8001e26:	d10c      	bne.n	8001e42 <HAL_RCC_OscConfig+0x356>
 8001e28:	4b61      	ldr	r3, [pc, #388]	; (8001fb0 <HAL_RCC_OscConfig+0x4c4>)
 8001e2a:	6a1b      	ldr	r3, [r3, #32]
 8001e2c:	4a60      	ldr	r2, [pc, #384]	; (8001fb0 <HAL_RCC_OscConfig+0x4c4>)
 8001e2e:	f043 0304 	orr.w	r3, r3, #4
 8001e32:	6213      	str	r3, [r2, #32]
 8001e34:	4b5e      	ldr	r3, [pc, #376]	; (8001fb0 <HAL_RCC_OscConfig+0x4c4>)
 8001e36:	6a1b      	ldr	r3, [r3, #32]
 8001e38:	4a5d      	ldr	r2, [pc, #372]	; (8001fb0 <HAL_RCC_OscConfig+0x4c4>)
 8001e3a:	f043 0301 	orr.w	r3, r3, #1
 8001e3e:	6213      	str	r3, [r2, #32]
 8001e40:	e00b      	b.n	8001e5a <HAL_RCC_OscConfig+0x36e>
 8001e42:	4b5b      	ldr	r3, [pc, #364]	; (8001fb0 <HAL_RCC_OscConfig+0x4c4>)
 8001e44:	6a1b      	ldr	r3, [r3, #32]
 8001e46:	4a5a      	ldr	r2, [pc, #360]	; (8001fb0 <HAL_RCC_OscConfig+0x4c4>)
 8001e48:	f023 0301 	bic.w	r3, r3, #1
 8001e4c:	6213      	str	r3, [r2, #32]
 8001e4e:	4b58      	ldr	r3, [pc, #352]	; (8001fb0 <HAL_RCC_OscConfig+0x4c4>)
 8001e50:	6a1b      	ldr	r3, [r3, #32]
 8001e52:	4a57      	ldr	r2, [pc, #348]	; (8001fb0 <HAL_RCC_OscConfig+0x4c4>)
 8001e54:	f023 0304 	bic.w	r3, r3, #4
 8001e58:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	68db      	ldr	r3, [r3, #12]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d015      	beq.n	8001e8e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e62:	f7fe fd1d 	bl	80008a0 <HAL_GetTick>
 8001e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e68:	e00a      	b.n	8001e80 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e6a:	f7fe fd19 	bl	80008a0 <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d901      	bls.n	8001e80 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e0b1      	b.n	8001fe4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e80:	4b4b      	ldr	r3, [pc, #300]	; (8001fb0 <HAL_RCC_OscConfig+0x4c4>)
 8001e82:	6a1b      	ldr	r3, [r3, #32]
 8001e84:	f003 0302 	and.w	r3, r3, #2
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d0ee      	beq.n	8001e6a <HAL_RCC_OscConfig+0x37e>
 8001e8c:	e014      	b.n	8001eb8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e8e:	f7fe fd07 	bl	80008a0 <HAL_GetTick>
 8001e92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e94:	e00a      	b.n	8001eac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e96:	f7fe fd03 	bl	80008a0 <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d901      	bls.n	8001eac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e09b      	b.n	8001fe4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eac:	4b40      	ldr	r3, [pc, #256]	; (8001fb0 <HAL_RCC_OscConfig+0x4c4>)
 8001eae:	6a1b      	ldr	r3, [r3, #32]
 8001eb0:	f003 0302 	and.w	r3, r3, #2
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d1ee      	bne.n	8001e96 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001eb8:	7dfb      	ldrb	r3, [r7, #23]
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d105      	bne.n	8001eca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ebe:	4b3c      	ldr	r3, [pc, #240]	; (8001fb0 <HAL_RCC_OscConfig+0x4c4>)
 8001ec0:	69db      	ldr	r3, [r3, #28]
 8001ec2:	4a3b      	ldr	r2, [pc, #236]	; (8001fb0 <HAL_RCC_OscConfig+0x4c4>)
 8001ec4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ec8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	69db      	ldr	r3, [r3, #28]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	f000 8087 	beq.w	8001fe2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ed4:	4b36      	ldr	r3, [pc, #216]	; (8001fb0 <HAL_RCC_OscConfig+0x4c4>)
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f003 030c 	and.w	r3, r3, #12
 8001edc:	2b08      	cmp	r3, #8
 8001ede:	d061      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	69db      	ldr	r3, [r3, #28]
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d146      	bne.n	8001f76 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ee8:	4b33      	ldr	r3, [pc, #204]	; (8001fb8 <HAL_RCC_OscConfig+0x4cc>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eee:	f7fe fcd7 	bl	80008a0 <HAL_GetTick>
 8001ef2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ef4:	e008      	b.n	8001f08 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ef6:	f7fe fcd3 	bl	80008a0 <HAL_GetTick>
 8001efa:	4602      	mov	r2, r0
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d901      	bls.n	8001f08 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	e06d      	b.n	8001fe4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f08:	4b29      	ldr	r3, [pc, #164]	; (8001fb0 <HAL_RCC_OscConfig+0x4c4>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d1f0      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a1b      	ldr	r3, [r3, #32]
 8001f18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f1c:	d108      	bne.n	8001f30 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f1e:	4b24      	ldr	r3, [pc, #144]	; (8001fb0 <HAL_RCC_OscConfig+0x4c4>)
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	4921      	ldr	r1, [pc, #132]	; (8001fb0 <HAL_RCC_OscConfig+0x4c4>)
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f30:	4b1f      	ldr	r3, [pc, #124]	; (8001fb0 <HAL_RCC_OscConfig+0x4c4>)
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6a19      	ldr	r1, [r3, #32]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f40:	430b      	orrs	r3, r1
 8001f42:	491b      	ldr	r1, [pc, #108]	; (8001fb0 <HAL_RCC_OscConfig+0x4c4>)
 8001f44:	4313      	orrs	r3, r2
 8001f46:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f48:	4b1b      	ldr	r3, [pc, #108]	; (8001fb8 <HAL_RCC_OscConfig+0x4cc>)
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f4e:	f7fe fca7 	bl	80008a0 <HAL_GetTick>
 8001f52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f54:	e008      	b.n	8001f68 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f56:	f7fe fca3 	bl	80008a0 <HAL_GetTick>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d901      	bls.n	8001f68 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e03d      	b.n	8001fe4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f68:	4b11      	ldr	r3, [pc, #68]	; (8001fb0 <HAL_RCC_OscConfig+0x4c4>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d0f0      	beq.n	8001f56 <HAL_RCC_OscConfig+0x46a>
 8001f74:	e035      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f76:	4b10      	ldr	r3, [pc, #64]	; (8001fb8 <HAL_RCC_OscConfig+0x4cc>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f7c:	f7fe fc90 	bl	80008a0 <HAL_GetTick>
 8001f80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f82:	e008      	b.n	8001f96 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f84:	f7fe fc8c 	bl	80008a0 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e026      	b.n	8001fe4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f96:	4b06      	ldr	r3, [pc, #24]	; (8001fb0 <HAL_RCC_OscConfig+0x4c4>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1f0      	bne.n	8001f84 <HAL_RCC_OscConfig+0x498>
 8001fa2:	e01e      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	69db      	ldr	r3, [r3, #28]
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d107      	bne.n	8001fbc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e019      	b.n	8001fe4 <HAL_RCC_OscConfig+0x4f8>
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	40007000 	.word	0x40007000
 8001fb8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fbc:	4b0b      	ldr	r3, [pc, #44]	; (8001fec <HAL_RCC_OscConfig+0x500>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a1b      	ldr	r3, [r3, #32]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d106      	bne.n	8001fde <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d001      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e000      	b.n	8001fe4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001fe2:	2300      	movs	r3, #0
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3718      	adds	r7, #24
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	40021000 	.word	0x40021000

08001ff0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d101      	bne.n	8002004 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e0d0      	b.n	80021a6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002004:	4b6a      	ldr	r3, [pc, #424]	; (80021b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0307 	and.w	r3, r3, #7
 800200c:	683a      	ldr	r2, [r7, #0]
 800200e:	429a      	cmp	r2, r3
 8002010:	d910      	bls.n	8002034 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002012:	4b67      	ldr	r3, [pc, #412]	; (80021b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f023 0207 	bic.w	r2, r3, #7
 800201a:	4965      	ldr	r1, [pc, #404]	; (80021b0 <HAL_RCC_ClockConfig+0x1c0>)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	4313      	orrs	r3, r2
 8002020:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002022:	4b63      	ldr	r3, [pc, #396]	; (80021b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0307 	and.w	r3, r3, #7
 800202a:	683a      	ldr	r2, [r7, #0]
 800202c:	429a      	cmp	r2, r3
 800202e:	d001      	beq.n	8002034 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e0b8      	b.n	80021a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0302 	and.w	r3, r3, #2
 800203c:	2b00      	cmp	r3, #0
 800203e:	d020      	beq.n	8002082 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0304 	and.w	r3, r3, #4
 8002048:	2b00      	cmp	r3, #0
 800204a:	d005      	beq.n	8002058 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800204c:	4b59      	ldr	r3, [pc, #356]	; (80021b4 <HAL_RCC_ClockConfig+0x1c4>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	4a58      	ldr	r2, [pc, #352]	; (80021b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002052:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002056:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0308 	and.w	r3, r3, #8
 8002060:	2b00      	cmp	r3, #0
 8002062:	d005      	beq.n	8002070 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002064:	4b53      	ldr	r3, [pc, #332]	; (80021b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	4a52      	ldr	r2, [pc, #328]	; (80021b4 <HAL_RCC_ClockConfig+0x1c4>)
 800206a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800206e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002070:	4b50      	ldr	r3, [pc, #320]	; (80021b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	494d      	ldr	r1, [pc, #308]	; (80021b4 <HAL_RCC_ClockConfig+0x1c4>)
 800207e:	4313      	orrs	r3, r2
 8002080:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	2b00      	cmp	r3, #0
 800208c:	d040      	beq.n	8002110 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	2b01      	cmp	r3, #1
 8002094:	d107      	bne.n	80020a6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002096:	4b47      	ldr	r3, [pc, #284]	; (80021b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d115      	bne.n	80020ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e07f      	b.n	80021a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d107      	bne.n	80020be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020ae:	4b41      	ldr	r3, [pc, #260]	; (80021b4 <HAL_RCC_ClockConfig+0x1c4>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d109      	bne.n	80020ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e073      	b.n	80021a6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020be:	4b3d      	ldr	r3, [pc, #244]	; (80021b4 <HAL_RCC_ClockConfig+0x1c4>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d101      	bne.n	80020ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e06b      	b.n	80021a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020ce:	4b39      	ldr	r3, [pc, #228]	; (80021b4 <HAL_RCC_ClockConfig+0x1c4>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f023 0203 	bic.w	r2, r3, #3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	4936      	ldr	r1, [pc, #216]	; (80021b4 <HAL_RCC_ClockConfig+0x1c4>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020e0:	f7fe fbde 	bl	80008a0 <HAL_GetTick>
 80020e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020e6:	e00a      	b.n	80020fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020e8:	f7fe fbda 	bl	80008a0 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e053      	b.n	80021a6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020fe:	4b2d      	ldr	r3, [pc, #180]	; (80021b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f003 020c 	and.w	r2, r3, #12
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	429a      	cmp	r2, r3
 800210e:	d1eb      	bne.n	80020e8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002110:	4b27      	ldr	r3, [pc, #156]	; (80021b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0307 	and.w	r3, r3, #7
 8002118:	683a      	ldr	r2, [r7, #0]
 800211a:	429a      	cmp	r2, r3
 800211c:	d210      	bcs.n	8002140 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800211e:	4b24      	ldr	r3, [pc, #144]	; (80021b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f023 0207 	bic.w	r2, r3, #7
 8002126:	4922      	ldr	r1, [pc, #136]	; (80021b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	4313      	orrs	r3, r2
 800212c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800212e:	4b20      	ldr	r3, [pc, #128]	; (80021b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0307 	and.w	r3, r3, #7
 8002136:	683a      	ldr	r2, [r7, #0]
 8002138:	429a      	cmp	r2, r3
 800213a:	d001      	beq.n	8002140 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e032      	b.n	80021a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0304 	and.w	r3, r3, #4
 8002148:	2b00      	cmp	r3, #0
 800214a:	d008      	beq.n	800215e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800214c:	4b19      	ldr	r3, [pc, #100]	; (80021b4 <HAL_RCC_ClockConfig+0x1c4>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	4916      	ldr	r1, [pc, #88]	; (80021b4 <HAL_RCC_ClockConfig+0x1c4>)
 800215a:	4313      	orrs	r3, r2
 800215c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0308 	and.w	r3, r3, #8
 8002166:	2b00      	cmp	r3, #0
 8002168:	d009      	beq.n	800217e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800216a:	4b12      	ldr	r3, [pc, #72]	; (80021b4 <HAL_RCC_ClockConfig+0x1c4>)
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	691b      	ldr	r3, [r3, #16]
 8002176:	00db      	lsls	r3, r3, #3
 8002178:	490e      	ldr	r1, [pc, #56]	; (80021b4 <HAL_RCC_ClockConfig+0x1c4>)
 800217a:	4313      	orrs	r3, r2
 800217c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800217e:	f000 f821 	bl	80021c4 <HAL_RCC_GetSysClockFreq>
 8002182:	4602      	mov	r2, r0
 8002184:	4b0b      	ldr	r3, [pc, #44]	; (80021b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	091b      	lsrs	r3, r3, #4
 800218a:	f003 030f 	and.w	r3, r3, #15
 800218e:	490a      	ldr	r1, [pc, #40]	; (80021b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002190:	5ccb      	ldrb	r3, [r1, r3]
 8002192:	fa22 f303 	lsr.w	r3, r2, r3
 8002196:	4a09      	ldr	r2, [pc, #36]	; (80021bc <HAL_RCC_ClockConfig+0x1cc>)
 8002198:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800219a:	4b09      	ldr	r3, [pc, #36]	; (80021c0 <HAL_RCC_ClockConfig+0x1d0>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4618      	mov	r0, r3
 80021a0:	f7fe fb3c 	bl	800081c <HAL_InitTick>

  return HAL_OK;
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3710      	adds	r7, #16
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	40022000 	.word	0x40022000
 80021b4:	40021000 	.word	0x40021000
 80021b8:	08002748 	.word	0x08002748
 80021bc:	20000000 	.word	0x20000000
 80021c0:	20000004 	.word	0x20000004

080021c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b087      	sub	sp, #28
 80021c8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021ca:	2300      	movs	r3, #0
 80021cc:	60fb      	str	r3, [r7, #12]
 80021ce:	2300      	movs	r3, #0
 80021d0:	60bb      	str	r3, [r7, #8]
 80021d2:	2300      	movs	r3, #0
 80021d4:	617b      	str	r3, [r7, #20]
 80021d6:	2300      	movs	r3, #0
 80021d8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80021da:	2300      	movs	r3, #0
 80021dc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80021de:	4b1e      	ldr	r3, [pc, #120]	; (8002258 <HAL_RCC_GetSysClockFreq+0x94>)
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f003 030c 	and.w	r3, r3, #12
 80021ea:	2b04      	cmp	r3, #4
 80021ec:	d002      	beq.n	80021f4 <HAL_RCC_GetSysClockFreq+0x30>
 80021ee:	2b08      	cmp	r3, #8
 80021f0:	d003      	beq.n	80021fa <HAL_RCC_GetSysClockFreq+0x36>
 80021f2:	e027      	b.n	8002244 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021f4:	4b19      	ldr	r3, [pc, #100]	; (800225c <HAL_RCC_GetSysClockFreq+0x98>)
 80021f6:	613b      	str	r3, [r7, #16]
      break;
 80021f8:	e027      	b.n	800224a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	0c9b      	lsrs	r3, r3, #18
 80021fe:	f003 030f 	and.w	r3, r3, #15
 8002202:	4a17      	ldr	r2, [pc, #92]	; (8002260 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002204:	5cd3      	ldrb	r3, [r2, r3]
 8002206:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d010      	beq.n	8002234 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002212:	4b11      	ldr	r3, [pc, #68]	; (8002258 <HAL_RCC_GetSysClockFreq+0x94>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	0c5b      	lsrs	r3, r3, #17
 8002218:	f003 0301 	and.w	r3, r3, #1
 800221c:	4a11      	ldr	r2, [pc, #68]	; (8002264 <HAL_RCC_GetSysClockFreq+0xa0>)
 800221e:	5cd3      	ldrb	r3, [r2, r3]
 8002220:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a0d      	ldr	r2, [pc, #52]	; (800225c <HAL_RCC_GetSysClockFreq+0x98>)
 8002226:	fb03 f202 	mul.w	r2, r3, r2
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002230:	617b      	str	r3, [r7, #20]
 8002232:	e004      	b.n	800223e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4a0c      	ldr	r2, [pc, #48]	; (8002268 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002238:	fb02 f303 	mul.w	r3, r2, r3
 800223c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	613b      	str	r3, [r7, #16]
      break;
 8002242:	e002      	b.n	800224a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002244:	4b05      	ldr	r3, [pc, #20]	; (800225c <HAL_RCC_GetSysClockFreq+0x98>)
 8002246:	613b      	str	r3, [r7, #16]
      break;
 8002248:	bf00      	nop
    }
  }
  return sysclockfreq;
 800224a:	693b      	ldr	r3, [r7, #16]
}
 800224c:	4618      	mov	r0, r3
 800224e:	371c      	adds	r7, #28
 8002250:	46bd      	mov	sp, r7
 8002252:	bc80      	pop	{r7}
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	40021000 	.word	0x40021000
 800225c:	007a1200 	.word	0x007a1200
 8002260:	08002758 	.word	0x08002758
 8002264:	08002768 	.word	0x08002768
 8002268:	003d0900 	.word	0x003d0900

0800226c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002274:	4b0a      	ldr	r3, [pc, #40]	; (80022a0 <RCC_Delay+0x34>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a0a      	ldr	r2, [pc, #40]	; (80022a4 <RCC_Delay+0x38>)
 800227a:	fba2 2303 	umull	r2, r3, r2, r3
 800227e:	0a5b      	lsrs	r3, r3, #9
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	fb02 f303 	mul.w	r3, r2, r3
 8002286:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002288:	bf00      	nop
  }
  while (Delay --);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	1e5a      	subs	r2, r3, #1
 800228e:	60fa      	str	r2, [r7, #12]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d1f9      	bne.n	8002288 <RCC_Delay+0x1c>
}
 8002294:	bf00      	nop
 8002296:	bf00      	nop
 8002298:	3714      	adds	r7, #20
 800229a:	46bd      	mov	sp, r7
 800229c:	bc80      	pop	{r7}
 800229e:	4770      	bx	lr
 80022a0:	20000000 	.word	0x20000000
 80022a4:	10624dd3 	.word	0x10624dd3

080022a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b086      	sub	sp, #24
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80022b0:	2300      	movs	r3, #0
 80022b2:	613b      	str	r3, [r7, #16]
 80022b4:	2300      	movs	r3, #0
 80022b6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0301 	and.w	r3, r3, #1
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d07d      	beq.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80022c4:	2300      	movs	r3, #0
 80022c6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022c8:	4b4f      	ldr	r3, [pc, #316]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022ca:	69db      	ldr	r3, [r3, #28]
 80022cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d10d      	bne.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022d4:	4b4c      	ldr	r3, [pc, #304]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022d6:	69db      	ldr	r3, [r3, #28]
 80022d8:	4a4b      	ldr	r2, [pc, #300]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022de:	61d3      	str	r3, [r2, #28]
 80022e0:	4b49      	ldr	r3, [pc, #292]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022e2:	69db      	ldr	r3, [r3, #28]
 80022e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e8:	60bb      	str	r3, [r7, #8]
 80022ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022ec:	2301      	movs	r3, #1
 80022ee:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022f0:	4b46      	ldr	r3, [pc, #280]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d118      	bne.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022fc:	4b43      	ldr	r3, [pc, #268]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a42      	ldr	r2, [pc, #264]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002302:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002306:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002308:	f7fe faca 	bl	80008a0 <HAL_GetTick>
 800230c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800230e:	e008      	b.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002310:	f7fe fac6 	bl	80008a0 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b64      	cmp	r3, #100	; 0x64
 800231c:	d901      	bls.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e06d      	b.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002322:	4b3a      	ldr	r3, [pc, #232]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800232a:	2b00      	cmp	r3, #0
 800232c:	d0f0      	beq.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800232e:	4b36      	ldr	r3, [pc, #216]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002330:	6a1b      	ldr	r3, [r3, #32]
 8002332:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002336:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d02e      	beq.n	800239c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	429a      	cmp	r2, r3
 800234a:	d027      	beq.n	800239c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800234c:	4b2e      	ldr	r3, [pc, #184]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800234e:	6a1b      	ldr	r3, [r3, #32]
 8002350:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002354:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002356:	4b2e      	ldr	r3, [pc, #184]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002358:	2201      	movs	r2, #1
 800235a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800235c:	4b2c      	ldr	r3, [pc, #176]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800235e:	2200      	movs	r2, #0
 8002360:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002362:	4a29      	ldr	r2, [pc, #164]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	2b00      	cmp	r3, #0
 8002370:	d014      	beq.n	800239c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002372:	f7fe fa95 	bl	80008a0 <HAL_GetTick>
 8002376:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002378:	e00a      	b.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800237a:	f7fe fa91 	bl	80008a0 <HAL_GetTick>
 800237e:	4602      	mov	r2, r0
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	f241 3288 	movw	r2, #5000	; 0x1388
 8002388:	4293      	cmp	r3, r2
 800238a:	d901      	bls.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e036      	b.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002390:	4b1d      	ldr	r3, [pc, #116]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002392:	6a1b      	ldr	r3, [r3, #32]
 8002394:	f003 0302 	and.w	r3, r3, #2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d0ee      	beq.n	800237a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800239c:	4b1a      	ldr	r3, [pc, #104]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800239e:	6a1b      	ldr	r3, [r3, #32]
 80023a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	4917      	ldr	r1, [pc, #92]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80023ae:	7dfb      	ldrb	r3, [r7, #23]
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d105      	bne.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023b4:	4b14      	ldr	r3, [pc, #80]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023b6:	69db      	ldr	r3, [r3, #28]
 80023b8:	4a13      	ldr	r2, [pc, #76]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023be:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0302 	and.w	r3, r3, #2
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d008      	beq.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80023cc:	4b0e      	ldr	r3, [pc, #56]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	490b      	ldr	r1, [pc, #44]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0310 	and.w	r3, r3, #16
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d008      	beq.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023ea:	4b07      	ldr	r3, [pc, #28]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	4904      	ldr	r1, [pc, #16]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3718      	adds	r7, #24
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	40021000 	.word	0x40021000
 800240c:	40007000 	.word	0x40007000
 8002410:	42420440 	.word	0x42420440

08002414 <board_init>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_ADC1_Init(void);

void board_init(void){
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
	  HAL_Init();
 8002418:	f7fe f9ea 	bl	80007f0 <HAL_Init>
	  SystemClock_Config();
 800241c:	f000 f812 	bl	8002444 <SystemClock_Config>
	  MX_GPIO_Init();
 8002420:	f000 f8e6 	bl	80025f0 <MX_GPIO_Init>
	  MX_DMA_Init();
 8002424:	f000 f8c6 	bl	80025b4 <MX_DMA_Init>
	  MX_ADC1_Init();
 8002428:	f000 f868 	bl	80024fc <MX_ADC1_Init>
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)sensor_value, 3);
 800242c:	2203      	movs	r2, #3
 800242e:	4903      	ldr	r1, [pc, #12]	; (800243c <board_init+0x28>)
 8002430:	4803      	ldr	r0, [pc, #12]	; (8002440 <board_init+0x2c>)
 8002432:	f7fe fb17 	bl	8000a64 <HAL_ADC_Start_DMA>

}
 8002436:	bf00      	nop
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	200000ac 	.word	0x200000ac
 8002440:	20000038 	.word	0x20000038

08002444 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b094      	sub	sp, #80	; 0x50
 8002448:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800244a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800244e:	2228      	movs	r2, #40	; 0x28
 8002450:	2100      	movs	r1, #0
 8002452:	4618      	mov	r0, r3
 8002454:	f000 f940 	bl	80026d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002458:	f107 0314 	add.w	r3, r7, #20
 800245c:	2200      	movs	r2, #0
 800245e:	601a      	str	r2, [r3, #0]
 8002460:	605a      	str	r2, [r3, #4]
 8002462:	609a      	str	r2, [r3, #8]
 8002464:	60da      	str	r2, [r3, #12]
 8002466:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002468:	1d3b      	adds	r3, r7, #4
 800246a:	2200      	movs	r2, #0
 800246c:	601a      	str	r2, [r3, #0]
 800246e:	605a      	str	r2, [r3, #4]
 8002470:	609a      	str	r2, [r3, #8]
 8002472:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002474:	2301      	movs	r3, #1
 8002476:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002478:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800247c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800247e:	2300      	movs	r3, #0
 8002480:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002482:	2301      	movs	r3, #1
 8002484:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002486:	2302      	movs	r3, #2
 8002488:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800248a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800248e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002490:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002494:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002496:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800249a:	4618      	mov	r0, r3
 800249c:	f7ff fb26 	bl	8001aec <HAL_RCC_OscConfig>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <SystemClock_Config+0x66>
  {
    Error_Handler();
 80024a6:	f000 f8c5 	bl	8002634 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024aa:	230f      	movs	r3, #15
 80024ac:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024ae:	2302      	movs	r3, #2
 80024b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024b2:	2300      	movs	r3, #0
 80024b4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80024b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024ba:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80024bc:	2300      	movs	r3, #0
 80024be:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80024c0:	f107 0314 	add.w	r3, r7, #20
 80024c4:	2102      	movs	r1, #2
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7ff fd92 	bl	8001ff0 <HAL_RCC_ClockConfig>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80024d2:	f000 f8af 	bl	8002634 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80024d6:	2302      	movs	r3, #2
 80024d8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80024da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024de:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024e0:	1d3b      	adds	r3, r7, #4
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7ff fee0 	bl	80022a8 <HAL_RCCEx_PeriphCLKConfig>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80024ee:	f000 f8a1 	bl	8002634 <Error_Handler>
  }
}
 80024f2:	bf00      	nop
 80024f4:	3750      	adds	r7, #80	; 0x50
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
	...

080024fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002502:	1d3b      	adds	r3, r7, #4
 8002504:	2200      	movs	r2, #0
 8002506:	601a      	str	r2, [r3, #0]
 8002508:	605a      	str	r2, [r3, #4]
 800250a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800250c:	4b27      	ldr	r3, [pc, #156]	; (80025ac <MX_ADC1_Init+0xb0>)
 800250e:	4a28      	ldr	r2, [pc, #160]	; (80025b0 <MX_ADC1_Init+0xb4>)
 8002510:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002512:	4b26      	ldr	r3, [pc, #152]	; (80025ac <MX_ADC1_Init+0xb0>)
 8002514:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002518:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800251a:	4b24      	ldr	r3, [pc, #144]	; (80025ac <MX_ADC1_Init+0xb0>)
 800251c:	2201      	movs	r2, #1
 800251e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002520:	4b22      	ldr	r3, [pc, #136]	; (80025ac <MX_ADC1_Init+0xb0>)
 8002522:	2200      	movs	r2, #0
 8002524:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002526:	4b21      	ldr	r3, [pc, #132]	; (80025ac <MX_ADC1_Init+0xb0>)
 8002528:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800252c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800252e:	4b1f      	ldr	r3, [pc, #124]	; (80025ac <MX_ADC1_Init+0xb0>)
 8002530:	2200      	movs	r2, #0
 8002532:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8002534:	4b1d      	ldr	r3, [pc, #116]	; (80025ac <MX_ADC1_Init+0xb0>)
 8002536:	2203      	movs	r2, #3
 8002538:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800253a:	481c      	ldr	r0, [pc, #112]	; (80025ac <MX_ADC1_Init+0xb0>)
 800253c:	f7fe f9ba 	bl	80008b4 <HAL_ADC_Init>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8002546:	f000 f875 	bl	8002634 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800254a:	2300      	movs	r3, #0
 800254c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800254e:	2301      	movs	r3, #1
 8002550:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8002552:	2307      	movs	r3, #7
 8002554:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002556:	1d3b      	adds	r3, r7, #4
 8002558:	4619      	mov	r1, r3
 800255a:	4814      	ldr	r0, [pc, #80]	; (80025ac <MX_ADC1_Init+0xb0>)
 800255c:	f7fe fc44 	bl	8000de8 <HAL_ADC_ConfigChannel>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8002566:	f000 f865 	bl	8002634 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800256a:	2301      	movs	r3, #1
 800256c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800256e:	2302      	movs	r3, #2
 8002570:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002572:	1d3b      	adds	r3, r7, #4
 8002574:	4619      	mov	r1, r3
 8002576:	480d      	ldr	r0, [pc, #52]	; (80025ac <MX_ADC1_Init+0xb0>)
 8002578:	f7fe fc36 	bl	8000de8 <HAL_ADC_ConfigChannel>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d001      	beq.n	8002586 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8002582:	f000 f857 	bl	8002634 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002586:	2302      	movs	r3, #2
 8002588:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800258a:	2303      	movs	r3, #3
 800258c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800258e:	1d3b      	adds	r3, r7, #4
 8002590:	4619      	mov	r1, r3
 8002592:	4806      	ldr	r0, [pc, #24]	; (80025ac <MX_ADC1_Init+0xb0>)
 8002594:	f7fe fc28 	bl	8000de8 <HAL_ADC_ConfigChannel>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800259e:	f000 f849 	bl	8002634 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80025a2:	bf00      	nop
 80025a4:	3710      	adds	r7, #16
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	20000038 	.word	0x20000038
 80025b0:	40012400 	.word	0x40012400

080025b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80025ba:	4b0c      	ldr	r3, [pc, #48]	; (80025ec <MX_DMA_Init+0x38>)
 80025bc:	695b      	ldr	r3, [r3, #20]
 80025be:	4a0b      	ldr	r2, [pc, #44]	; (80025ec <MX_DMA_Init+0x38>)
 80025c0:	f043 0301 	orr.w	r3, r3, #1
 80025c4:	6153      	str	r3, [r2, #20]
 80025c6:	4b09      	ldr	r3, [pc, #36]	; (80025ec <MX_DMA_Init+0x38>)
 80025c8:	695b      	ldr	r3, [r3, #20]
 80025ca:	f003 0301 	and.w	r3, r3, #1
 80025ce:	607b      	str	r3, [r7, #4]
 80025d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80025d2:	2200      	movs	r2, #0
 80025d4:	2100      	movs	r1, #0
 80025d6:	200b      	movs	r0, #11
 80025d8:	f7fe fedf 	bl	800139a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80025dc:	200b      	movs	r0, #11
 80025de:	f7fe fef8 	bl	80013d2 <HAL_NVIC_EnableIRQ>

}
 80025e2:	bf00      	nop
 80025e4:	3708      	adds	r7, #8
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	40021000 	.word	0x40021000

080025f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80025f6:	4b0e      	ldr	r3, [pc, #56]	; (8002630 <MX_GPIO_Init+0x40>)
 80025f8:	699b      	ldr	r3, [r3, #24]
 80025fa:	4a0d      	ldr	r2, [pc, #52]	; (8002630 <MX_GPIO_Init+0x40>)
 80025fc:	f043 0320 	orr.w	r3, r3, #32
 8002600:	6193      	str	r3, [r2, #24]
 8002602:	4b0b      	ldr	r3, [pc, #44]	; (8002630 <MX_GPIO_Init+0x40>)
 8002604:	699b      	ldr	r3, [r3, #24]
 8002606:	f003 0320 	and.w	r3, r3, #32
 800260a:	607b      	str	r3, [r7, #4]
 800260c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800260e:	4b08      	ldr	r3, [pc, #32]	; (8002630 <MX_GPIO_Init+0x40>)
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	4a07      	ldr	r2, [pc, #28]	; (8002630 <MX_GPIO_Init+0x40>)
 8002614:	f043 0304 	orr.w	r3, r3, #4
 8002618:	6193      	str	r3, [r2, #24]
 800261a:	4b05      	ldr	r3, [pc, #20]	; (8002630 <MX_GPIO_Init+0x40>)
 800261c:	699b      	ldr	r3, [r3, #24]
 800261e:	f003 0304 	and.w	r3, r3, #4
 8002622:	603b      	str	r3, [r7, #0]
 8002624:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002626:	bf00      	nop
 8002628:	370c      	adds	r7, #12
 800262a:	46bd      	mov	sp, r7
 800262c:	bc80      	pop	{r7}
 800262e:	4770      	bx	lr
 8002630:	40021000 	.word	0x40021000

08002634 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002638:	b672      	cpsid	i
}
 800263a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800263c:	e7fe      	b.n	800263c <Error_Handler+0x8>

0800263e <main>:

void adc_value_to_vol(uint16_t *_adcValue, uint16_t *_volValue, uint8_t _numberValue);
void adc_value_to_3_axist(uint16_t* _adcValue, float* _axistValue, uint8_t _numberValue);

int main(void)
{
 800263e:	b580      	push	{r7, lr}
 8002640:	af00      	add	r7, sp, #0
	board_init();
 8002642:	f7ff fee7 	bl	8002414 <board_init>
  while (1)
 8002646:	e7fe      	b.n	8002646 <main+0x8>

08002648 <SysTick_Handler>:
  }
}


void SysTick_Handler(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
  HAL_IncTick();
 800264c:	f7fe f916 	bl	800087c <HAL_IncTick>
  g_sys_time++;
 8002650:	4b05      	ldr	r3, [pc, #20]	; (8002668 <SysTick_Handler+0x20>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	3301      	adds	r3, #1
 8002656:	4a04      	ldr	r2, [pc, #16]	; (8002668 <SysTick_Handler+0x20>)
 8002658:	6013      	str	r3, [r2, #0]
  adc_value_to_3_axist(sensor_value,axit_value,3);
 800265a:	2203      	movs	r2, #3
 800265c:	4903      	ldr	r1, [pc, #12]	; (800266c <SysTick_Handler+0x24>)
 800265e:	4804      	ldr	r0, [pc, #16]	; (8002670 <SysTick_Handler+0x28>)
 8002660:	f000 f808 	bl	8002674 <adc_value_to_3_axist>

}
 8002664:	bf00      	nop
 8002666:	bd80      	pop	{r7, pc}
 8002668:	200000c0 	.word	0x200000c0
 800266c:	200000b4 	.word	0x200000b4
 8002670:	200000ac 	.word	0x200000ac

08002674 <adc_value_to_3_axist>:
	for(int i = 0; i < _numberValue; i ++){
		_volValue[i] = 3300*_adcValue[i]/4095;
	}
}

void adc_value_to_3_axist(uint16_t* _adcValue, float* _axistValue, uint8_t _numberValue){
 8002674:	b590      	push	{r4, r7, lr}
 8002676:	b087      	sub	sp, #28
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	4613      	mov	r3, r2
 8002680:	71fb      	strb	r3, [r7, #7]
	for(int i = 0; i < _numberValue; i ++){
 8002682:	2300      	movs	r3, #0
 8002684:	617b      	str	r3, [r7, #20]
 8002686:	e019      	b.n	80026bc <adc_value_to_3_axist+0x48>
		_axistValue[i] = (float)((int)_adcValue[i] - axist_balance_value[i])/400;
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	68fa      	ldr	r2, [r7, #12]
 800268e:	4413      	add	r3, r2
 8002690:	881b      	ldrh	r3, [r3, #0]
 8002692:	4619      	mov	r1, r3
 8002694:	4a0e      	ldr	r2, [pc, #56]	; (80026d0 <adc_value_to_3_axist+0x5c>)
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800269c:	1acb      	subs	r3, r1, r3
 800269e:	4618      	mov	r0, r3
 80026a0:	f7fd fe0e 	bl	80002c0 <__aeabi_i2f>
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	68ba      	ldr	r2, [r7, #8]
 80026aa:	18d4      	adds	r4, r2, r3
 80026ac:	4909      	ldr	r1, [pc, #36]	; (80026d4 <adc_value_to_3_axist+0x60>)
 80026ae:	f7fd ff0f 	bl	80004d0 <__aeabi_fdiv>
 80026b2:	4603      	mov	r3, r0
 80026b4:	6023      	str	r3, [r4, #0]
	for(int i = 0; i < _numberValue; i ++){
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	3301      	adds	r3, #1
 80026ba:	617b      	str	r3, [r7, #20]
 80026bc:	79fb      	ldrb	r3, [r7, #7]
 80026be:	697a      	ldr	r2, [r7, #20]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	dbe1      	blt.n	8002688 <adc_value_to_3_axist+0x14>
	}
}
 80026c4:	bf00      	nop
 80026c6:	bf00      	nop
 80026c8:	371c      	adds	r7, #28
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd90      	pop	{r4, r7, pc}
 80026ce:	bf00      	nop
 80026d0:	2000000c 	.word	0x2000000c
 80026d4:	43c80000 	.word	0x43c80000

080026d8 <memset>:
 80026d8:	4603      	mov	r3, r0
 80026da:	4402      	add	r2, r0
 80026dc:	4293      	cmp	r3, r2
 80026de:	d100      	bne.n	80026e2 <memset+0xa>
 80026e0:	4770      	bx	lr
 80026e2:	f803 1b01 	strb.w	r1, [r3], #1
 80026e6:	e7f9      	b.n	80026dc <memset+0x4>

080026e8 <__libc_init_array>:
 80026e8:	b570      	push	{r4, r5, r6, lr}
 80026ea:	2600      	movs	r6, #0
 80026ec:	4d0c      	ldr	r5, [pc, #48]	; (8002720 <__libc_init_array+0x38>)
 80026ee:	4c0d      	ldr	r4, [pc, #52]	; (8002724 <__libc_init_array+0x3c>)
 80026f0:	1b64      	subs	r4, r4, r5
 80026f2:	10a4      	asrs	r4, r4, #2
 80026f4:	42a6      	cmp	r6, r4
 80026f6:	d109      	bne.n	800270c <__libc_init_array+0x24>
 80026f8:	f000 f81a 	bl	8002730 <_init>
 80026fc:	2600      	movs	r6, #0
 80026fe:	4d0a      	ldr	r5, [pc, #40]	; (8002728 <__libc_init_array+0x40>)
 8002700:	4c0a      	ldr	r4, [pc, #40]	; (800272c <__libc_init_array+0x44>)
 8002702:	1b64      	subs	r4, r4, r5
 8002704:	10a4      	asrs	r4, r4, #2
 8002706:	42a6      	cmp	r6, r4
 8002708:	d105      	bne.n	8002716 <__libc_init_array+0x2e>
 800270a:	bd70      	pop	{r4, r5, r6, pc}
 800270c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002710:	4798      	blx	r3
 8002712:	3601      	adds	r6, #1
 8002714:	e7ee      	b.n	80026f4 <__libc_init_array+0xc>
 8002716:	f855 3b04 	ldr.w	r3, [r5], #4
 800271a:	4798      	blx	r3
 800271c:	3601      	adds	r6, #1
 800271e:	e7f2      	b.n	8002706 <__libc_init_array+0x1e>
 8002720:	0800276c 	.word	0x0800276c
 8002724:	0800276c 	.word	0x0800276c
 8002728:	0800276c 	.word	0x0800276c
 800272c:	08002770 	.word	0x08002770

08002730 <_init>:
 8002730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002732:	bf00      	nop
 8002734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002736:	bc08      	pop	{r3}
 8002738:	469e      	mov	lr, r3
 800273a:	4770      	bx	lr

0800273c <_fini>:
 800273c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800273e:	bf00      	nop
 8002740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002742:	bc08      	pop	{r3}
 8002744:	469e      	mov	lr, r3
 8002746:	4770      	bx	lr
