
do_an_Phat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040e8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  080041f8  080041f8  000141f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043f8  080043f8  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  080043f8  080043f8  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  080043f8  080043f8  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043f8  080043f8  000143f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080043fc  080043fc  000143fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08004400  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  20000024  08004424  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  08004424  000200f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY
 13 .debug_info   000062e3  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a88  00000000  00000000  00026373  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000650  00000000  00000000  00027e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000004a5  00000000  00000000  00028450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016ab4  00000000  00000000  000288f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008029  00000000  00000000  0003f3a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00084b74  00000000  00000000  000473d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001b58  00000000  00000000  000cbf48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000cdaa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000024 	.word	0x20000024
 800012c:	00000000 	.word	0x00000000
 8000130:	080041e0 	.word	0x080041e0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000028 	.word	0x20000028
 800014c:	080041e0 	.word	0x080041e0

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_frsub>:
 8000aec:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000af0:	e002      	b.n	8000af8 <__addsf3>
 8000af2:	bf00      	nop

08000af4 <__aeabi_fsub>:
 8000af4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000af8 <__addsf3>:
 8000af8:	0042      	lsls	r2, r0, #1
 8000afa:	bf1f      	itttt	ne
 8000afc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b00:	ea92 0f03 	teqne	r2, r3
 8000b04:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b08:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b0c:	d06a      	beq.n	8000be4 <__addsf3+0xec>
 8000b0e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b12:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b16:	bfc1      	itttt	gt
 8000b18:	18d2      	addgt	r2, r2, r3
 8000b1a:	4041      	eorgt	r1, r0
 8000b1c:	4048      	eorgt	r0, r1
 8000b1e:	4041      	eorgt	r1, r0
 8000b20:	bfb8      	it	lt
 8000b22:	425b      	neglt	r3, r3
 8000b24:	2b19      	cmp	r3, #25
 8000b26:	bf88      	it	hi
 8000b28:	4770      	bxhi	lr
 8000b2a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b32:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b36:	bf18      	it	ne
 8000b38:	4240      	negne	r0, r0
 8000b3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b3e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b42:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b46:	bf18      	it	ne
 8000b48:	4249      	negne	r1, r1
 8000b4a:	ea92 0f03 	teq	r2, r3
 8000b4e:	d03f      	beq.n	8000bd0 <__addsf3+0xd8>
 8000b50:	f1a2 0201 	sub.w	r2, r2, #1
 8000b54:	fa41 fc03 	asr.w	ip, r1, r3
 8000b58:	eb10 000c 	adds.w	r0, r0, ip
 8000b5c:	f1c3 0320 	rsb	r3, r3, #32
 8000b60:	fa01 f103 	lsl.w	r1, r1, r3
 8000b64:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b68:	d502      	bpl.n	8000b70 <__addsf3+0x78>
 8000b6a:	4249      	negs	r1, r1
 8000b6c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b70:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b74:	d313      	bcc.n	8000b9e <__addsf3+0xa6>
 8000b76:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b7a:	d306      	bcc.n	8000b8a <__addsf3+0x92>
 8000b7c:	0840      	lsrs	r0, r0, #1
 8000b7e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b82:	f102 0201 	add.w	r2, r2, #1
 8000b86:	2afe      	cmp	r2, #254	; 0xfe
 8000b88:	d251      	bcs.n	8000c2e <__addsf3+0x136>
 8000b8a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b92:	bf08      	it	eq
 8000b94:	f020 0001 	biceq.w	r0, r0, #1
 8000b98:	ea40 0003 	orr.w	r0, r0, r3
 8000b9c:	4770      	bx	lr
 8000b9e:	0049      	lsls	r1, r1, #1
 8000ba0:	eb40 0000 	adc.w	r0, r0, r0
 8000ba4:	3a01      	subs	r2, #1
 8000ba6:	bf28      	it	cs
 8000ba8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bac:	d2ed      	bcs.n	8000b8a <__addsf3+0x92>
 8000bae:	fab0 fc80 	clz	ip, r0
 8000bb2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bb6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bba:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bbe:	bfaa      	itet	ge
 8000bc0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bc4:	4252      	neglt	r2, r2
 8000bc6:	4318      	orrge	r0, r3
 8000bc8:	bfbc      	itt	lt
 8000bca:	40d0      	lsrlt	r0, r2
 8000bcc:	4318      	orrlt	r0, r3
 8000bce:	4770      	bx	lr
 8000bd0:	f092 0f00 	teq	r2, #0
 8000bd4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bd8:	bf06      	itte	eq
 8000bda:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bde:	3201      	addeq	r2, #1
 8000be0:	3b01      	subne	r3, #1
 8000be2:	e7b5      	b.n	8000b50 <__addsf3+0x58>
 8000be4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000be8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bec:	bf18      	it	ne
 8000bee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf2:	d021      	beq.n	8000c38 <__addsf3+0x140>
 8000bf4:	ea92 0f03 	teq	r2, r3
 8000bf8:	d004      	beq.n	8000c04 <__addsf3+0x10c>
 8000bfa:	f092 0f00 	teq	r2, #0
 8000bfe:	bf08      	it	eq
 8000c00:	4608      	moveq	r0, r1
 8000c02:	4770      	bx	lr
 8000c04:	ea90 0f01 	teq	r0, r1
 8000c08:	bf1c      	itt	ne
 8000c0a:	2000      	movne	r0, #0
 8000c0c:	4770      	bxne	lr
 8000c0e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c12:	d104      	bne.n	8000c1e <__addsf3+0x126>
 8000c14:	0040      	lsls	r0, r0, #1
 8000c16:	bf28      	it	cs
 8000c18:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c1c:	4770      	bx	lr
 8000c1e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c22:	bf3c      	itt	cc
 8000c24:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c28:	4770      	bxcc	lr
 8000c2a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c2e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c32:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c36:	4770      	bx	lr
 8000c38:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c3c:	bf16      	itet	ne
 8000c3e:	4608      	movne	r0, r1
 8000c40:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c44:	4601      	movne	r1, r0
 8000c46:	0242      	lsls	r2, r0, #9
 8000c48:	bf06      	itte	eq
 8000c4a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c4e:	ea90 0f01 	teqeq	r0, r1
 8000c52:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_ui2f>:
 8000c58:	f04f 0300 	mov.w	r3, #0
 8000c5c:	e004      	b.n	8000c68 <__aeabi_i2f+0x8>
 8000c5e:	bf00      	nop

08000c60 <__aeabi_i2f>:
 8000c60:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c64:	bf48      	it	mi
 8000c66:	4240      	negmi	r0, r0
 8000c68:	ea5f 0c00 	movs.w	ip, r0
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c74:	4601      	mov	r1, r0
 8000c76:	f04f 0000 	mov.w	r0, #0
 8000c7a:	e01c      	b.n	8000cb6 <__aeabi_l2f+0x2a>

08000c7c <__aeabi_ul2f>:
 8000c7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c80:	bf08      	it	eq
 8000c82:	4770      	bxeq	lr
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e00a      	b.n	8000ca0 <__aeabi_l2f+0x14>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_l2f>:
 8000c8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c90:	bf08      	it	eq
 8000c92:	4770      	bxeq	lr
 8000c94:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c98:	d502      	bpl.n	8000ca0 <__aeabi_l2f+0x14>
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	ea5f 0c01 	movs.w	ip, r1
 8000ca4:	bf02      	ittt	eq
 8000ca6:	4684      	moveq	ip, r0
 8000ca8:	4601      	moveq	r1, r0
 8000caa:	2000      	moveq	r0, #0
 8000cac:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cb0:	bf08      	it	eq
 8000cb2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cb6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cba:	fabc f28c 	clz	r2, ip
 8000cbe:	3a08      	subs	r2, #8
 8000cc0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cc4:	db10      	blt.n	8000ce8 <__aeabi_l2f+0x5c>
 8000cc6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cca:	4463      	add	r3, ip
 8000ccc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cd0:	f1c2 0220 	rsb	r2, r2, #32
 8000cd4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cd8:	fa20 f202 	lsr.w	r2, r0, r2
 8000cdc:	eb43 0002 	adc.w	r0, r3, r2
 8000ce0:	bf08      	it	eq
 8000ce2:	f020 0001 	biceq.w	r0, r0, #1
 8000ce6:	4770      	bx	lr
 8000ce8:	f102 0220 	add.w	r2, r2, #32
 8000cec:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf0:	f1c2 0220 	rsb	r2, r2, #32
 8000cf4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cf8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cfc:	eb43 0002 	adc.w	r0, r3, r2
 8000d00:	bf08      	it	eq
 8000d02:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_fmul>:
 8000d08:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d0c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d10:	bf1e      	ittt	ne
 8000d12:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d16:	ea92 0f0c 	teqne	r2, ip
 8000d1a:	ea93 0f0c 	teqne	r3, ip
 8000d1e:	d06f      	beq.n	8000e00 <__aeabi_fmul+0xf8>
 8000d20:	441a      	add	r2, r3
 8000d22:	ea80 0c01 	eor.w	ip, r0, r1
 8000d26:	0240      	lsls	r0, r0, #9
 8000d28:	bf18      	it	ne
 8000d2a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d2e:	d01e      	beq.n	8000d6e <__aeabi_fmul+0x66>
 8000d30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d34:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d38:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d3c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d44:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d48:	bf3e      	ittt	cc
 8000d4a:	0049      	lslcc	r1, r1, #1
 8000d4c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d50:	005b      	lslcc	r3, r3, #1
 8000d52:	ea40 0001 	orr.w	r0, r0, r1
 8000d56:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d5a:	2afd      	cmp	r2, #253	; 0xfd
 8000d5c:	d81d      	bhi.n	8000d9a <__aeabi_fmul+0x92>
 8000d5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d62:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d66:	bf08      	it	eq
 8000d68:	f020 0001 	biceq.w	r0, r0, #1
 8000d6c:	4770      	bx	lr
 8000d6e:	f090 0f00 	teq	r0, #0
 8000d72:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d76:	bf08      	it	eq
 8000d78:	0249      	lsleq	r1, r1, #9
 8000d7a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d7e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d82:	3a7f      	subs	r2, #127	; 0x7f
 8000d84:	bfc2      	ittt	gt
 8000d86:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d8a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d8e:	4770      	bxgt	lr
 8000d90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d94:	f04f 0300 	mov.w	r3, #0
 8000d98:	3a01      	subs	r2, #1
 8000d9a:	dc5d      	bgt.n	8000e58 <__aeabi_fmul+0x150>
 8000d9c:	f112 0f19 	cmn.w	r2, #25
 8000da0:	bfdc      	itt	le
 8000da2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000da6:	4770      	bxle	lr
 8000da8:	f1c2 0200 	rsb	r2, r2, #0
 8000dac:	0041      	lsls	r1, r0, #1
 8000dae:	fa21 f102 	lsr.w	r1, r1, r2
 8000db2:	f1c2 0220 	rsb	r2, r2, #32
 8000db6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dba:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dbe:	f140 0000 	adc.w	r0, r0, #0
 8000dc2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dc6:	bf08      	it	eq
 8000dc8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dcc:	4770      	bx	lr
 8000dce:	f092 0f00 	teq	r2, #0
 8000dd2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dd6:	bf02      	ittt	eq
 8000dd8:	0040      	lsleq	r0, r0, #1
 8000dda:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dde:	3a01      	subeq	r2, #1
 8000de0:	d0f9      	beq.n	8000dd6 <__aeabi_fmul+0xce>
 8000de2:	ea40 000c 	orr.w	r0, r0, ip
 8000de6:	f093 0f00 	teq	r3, #0
 8000dea:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dee:	bf02      	ittt	eq
 8000df0:	0049      	lsleq	r1, r1, #1
 8000df2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000df6:	3b01      	subeq	r3, #1
 8000df8:	d0f9      	beq.n	8000dee <__aeabi_fmul+0xe6>
 8000dfa:	ea41 010c 	orr.w	r1, r1, ip
 8000dfe:	e78f      	b.n	8000d20 <__aeabi_fmul+0x18>
 8000e00:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e04:	ea92 0f0c 	teq	r2, ip
 8000e08:	bf18      	it	ne
 8000e0a:	ea93 0f0c 	teqne	r3, ip
 8000e0e:	d00a      	beq.n	8000e26 <__aeabi_fmul+0x11e>
 8000e10:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e14:	bf18      	it	ne
 8000e16:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e1a:	d1d8      	bne.n	8000dce <__aeabi_fmul+0xc6>
 8000e1c:	ea80 0001 	eor.w	r0, r0, r1
 8000e20:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e24:	4770      	bx	lr
 8000e26:	f090 0f00 	teq	r0, #0
 8000e2a:	bf17      	itett	ne
 8000e2c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e30:	4608      	moveq	r0, r1
 8000e32:	f091 0f00 	teqne	r1, #0
 8000e36:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e3a:	d014      	beq.n	8000e66 <__aeabi_fmul+0x15e>
 8000e3c:	ea92 0f0c 	teq	r2, ip
 8000e40:	d101      	bne.n	8000e46 <__aeabi_fmul+0x13e>
 8000e42:	0242      	lsls	r2, r0, #9
 8000e44:	d10f      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e46:	ea93 0f0c 	teq	r3, ip
 8000e4a:	d103      	bne.n	8000e54 <__aeabi_fmul+0x14c>
 8000e4c:	024b      	lsls	r3, r1, #9
 8000e4e:	bf18      	it	ne
 8000e50:	4608      	movne	r0, r1
 8000e52:	d108      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e54:	ea80 0001 	eor.w	r0, r0, r1
 8000e58:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e64:	4770      	bx	lr
 8000e66:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e6a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e6e:	4770      	bx	lr

08000e70 <__aeabi_fdiv>:
 8000e70:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e74:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e78:	bf1e      	ittt	ne
 8000e7a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e7e:	ea92 0f0c 	teqne	r2, ip
 8000e82:	ea93 0f0c 	teqne	r3, ip
 8000e86:	d069      	beq.n	8000f5c <__aeabi_fdiv+0xec>
 8000e88:	eba2 0203 	sub.w	r2, r2, r3
 8000e8c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e90:	0249      	lsls	r1, r1, #9
 8000e92:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e96:	d037      	beq.n	8000f08 <__aeabi_fdiv+0x98>
 8000e98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e9c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ea0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ea4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ea8:	428b      	cmp	r3, r1
 8000eaa:	bf38      	it	cc
 8000eac:	005b      	lslcc	r3, r3, #1
 8000eae:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eb2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	bf24      	itt	cs
 8000eba:	1a5b      	subcs	r3, r3, r1
 8000ebc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ec0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ec4:	bf24      	itt	cs
 8000ec6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eca:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ece:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ed2:	bf24      	itt	cs
 8000ed4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ed8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000edc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ee0:	bf24      	itt	cs
 8000ee2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ee6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eea:	011b      	lsls	r3, r3, #4
 8000eec:	bf18      	it	ne
 8000eee:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ef2:	d1e0      	bne.n	8000eb6 <__aeabi_fdiv+0x46>
 8000ef4:	2afd      	cmp	r2, #253	; 0xfd
 8000ef6:	f63f af50 	bhi.w	8000d9a <__aeabi_fmul+0x92>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f00:	bf08      	it	eq
 8000f02:	f020 0001 	biceq.w	r0, r0, #1
 8000f06:	4770      	bx	lr
 8000f08:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f0c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f10:	327f      	adds	r2, #127	; 0x7f
 8000f12:	bfc2      	ittt	gt
 8000f14:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f18:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f1c:	4770      	bxgt	lr
 8000f1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f22:	f04f 0300 	mov.w	r3, #0
 8000f26:	3a01      	subs	r2, #1
 8000f28:	e737      	b.n	8000d9a <__aeabi_fmul+0x92>
 8000f2a:	f092 0f00 	teq	r2, #0
 8000f2e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f32:	bf02      	ittt	eq
 8000f34:	0040      	lsleq	r0, r0, #1
 8000f36:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f3a:	3a01      	subeq	r2, #1
 8000f3c:	d0f9      	beq.n	8000f32 <__aeabi_fdiv+0xc2>
 8000f3e:	ea40 000c 	orr.w	r0, r0, ip
 8000f42:	f093 0f00 	teq	r3, #0
 8000f46:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f4a:	bf02      	ittt	eq
 8000f4c:	0049      	lsleq	r1, r1, #1
 8000f4e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f52:	3b01      	subeq	r3, #1
 8000f54:	d0f9      	beq.n	8000f4a <__aeabi_fdiv+0xda>
 8000f56:	ea41 010c 	orr.w	r1, r1, ip
 8000f5a:	e795      	b.n	8000e88 <__aeabi_fdiv+0x18>
 8000f5c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f60:	ea92 0f0c 	teq	r2, ip
 8000f64:	d108      	bne.n	8000f78 <__aeabi_fdiv+0x108>
 8000f66:	0242      	lsls	r2, r0, #9
 8000f68:	f47f af7d 	bne.w	8000e66 <__aeabi_fmul+0x15e>
 8000f6c:	ea93 0f0c 	teq	r3, ip
 8000f70:	f47f af70 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f74:	4608      	mov	r0, r1
 8000f76:	e776      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f78:	ea93 0f0c 	teq	r3, ip
 8000f7c:	d104      	bne.n	8000f88 <__aeabi_fdiv+0x118>
 8000f7e:	024b      	lsls	r3, r1, #9
 8000f80:	f43f af4c 	beq.w	8000e1c <__aeabi_fmul+0x114>
 8000f84:	4608      	mov	r0, r1
 8000f86:	e76e      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f88:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f8c:	bf18      	it	ne
 8000f8e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f92:	d1ca      	bne.n	8000f2a <__aeabi_fdiv+0xba>
 8000f94:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f98:	f47f af5c 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f9c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fa0:	f47f af3c 	bne.w	8000e1c <__aeabi_fmul+0x114>
 8000fa4:	e75f      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000fa6:	bf00      	nop

08000fa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000fae:	4b0e      	ldr	r3, [pc, #56]	; (8000fe8 <HAL_MspInit+0x40>)
 8000fb0:	699b      	ldr	r3, [r3, #24]
 8000fb2:	4a0d      	ldr	r2, [pc, #52]	; (8000fe8 <HAL_MspInit+0x40>)
 8000fb4:	f043 0301 	orr.w	r3, r3, #1
 8000fb8:	6193      	str	r3, [r2, #24]
 8000fba:	4b0b      	ldr	r3, [pc, #44]	; (8000fe8 <HAL_MspInit+0x40>)
 8000fbc:	699b      	ldr	r3, [r3, #24]
 8000fbe:	f003 0301 	and.w	r3, r3, #1
 8000fc2:	607b      	str	r3, [r7, #4]
 8000fc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fc6:	4b08      	ldr	r3, [pc, #32]	; (8000fe8 <HAL_MspInit+0x40>)
 8000fc8:	69db      	ldr	r3, [r3, #28]
 8000fca:	4a07      	ldr	r2, [pc, #28]	; (8000fe8 <HAL_MspInit+0x40>)
 8000fcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fd0:	61d3      	str	r3, [r2, #28]
 8000fd2:	4b05      	ldr	r3, [pc, #20]	; (8000fe8 <HAL_MspInit+0x40>)
 8000fd4:	69db      	ldr	r3, [r3, #28]
 8000fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fda:	603b      	str	r3, [r7, #0]
 8000fdc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bc80      	pop	{r7}
 8000fe6:	4770      	bx	lr
 8000fe8:	40021000 	.word	0x40021000

08000fec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b088      	sub	sp, #32
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff4:	f107 0310 	add.w	r3, r7, #16
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a2c      	ldr	r2, [pc, #176]	; (80010b8 <HAL_ADC_MspInit+0xcc>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d151      	bne.n	80010b0 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800100c:	4b2b      	ldr	r3, [pc, #172]	; (80010bc <HAL_ADC_MspInit+0xd0>)
 800100e:	699b      	ldr	r3, [r3, #24]
 8001010:	4a2a      	ldr	r2, [pc, #168]	; (80010bc <HAL_ADC_MspInit+0xd0>)
 8001012:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001016:	6193      	str	r3, [r2, #24]
 8001018:	4b28      	ldr	r3, [pc, #160]	; (80010bc <HAL_ADC_MspInit+0xd0>)
 800101a:	699b      	ldr	r3, [r3, #24]
 800101c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001024:	4b25      	ldr	r3, [pc, #148]	; (80010bc <HAL_ADC_MspInit+0xd0>)
 8001026:	699b      	ldr	r3, [r3, #24]
 8001028:	4a24      	ldr	r2, [pc, #144]	; (80010bc <HAL_ADC_MspInit+0xd0>)
 800102a:	f043 0304 	orr.w	r3, r3, #4
 800102e:	6193      	str	r3, [r2, #24]
 8001030:	4b22      	ldr	r3, [pc, #136]	; (80010bc <HAL_ADC_MspInit+0xd0>)
 8001032:	699b      	ldr	r3, [r3, #24]
 8001034:	f003 0304 	and.w	r3, r3, #4
 8001038:	60bb      	str	r3, [r7, #8]
 800103a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800103c:	2307      	movs	r3, #7
 800103e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001040:	2303      	movs	r3, #3
 8001042:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001044:	f107 0310 	add.w	r3, r7, #16
 8001048:	4619      	mov	r1, r3
 800104a:	481d      	ldr	r0, [pc, #116]	; (80010c0 <HAL_ADC_MspInit+0xd4>)
 800104c:	f001 f89a 	bl	8002184 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001050:	4b1c      	ldr	r3, [pc, #112]	; (80010c4 <HAL_ADC_MspInit+0xd8>)
 8001052:	4a1d      	ldr	r2, [pc, #116]	; (80010c8 <HAL_ADC_MspInit+0xdc>)
 8001054:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001056:	4b1b      	ldr	r3, [pc, #108]	; (80010c4 <HAL_ADC_MspInit+0xd8>)
 8001058:	2200      	movs	r2, #0
 800105a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800105c:	4b19      	ldr	r3, [pc, #100]	; (80010c4 <HAL_ADC_MspInit+0xd8>)
 800105e:	2200      	movs	r2, #0
 8001060:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001062:	4b18      	ldr	r3, [pc, #96]	; (80010c4 <HAL_ADC_MspInit+0xd8>)
 8001064:	2280      	movs	r2, #128	; 0x80
 8001066:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001068:	4b16      	ldr	r3, [pc, #88]	; (80010c4 <HAL_ADC_MspInit+0xd8>)
 800106a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800106e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001070:	4b14      	ldr	r3, [pc, #80]	; (80010c4 <HAL_ADC_MspInit+0xd8>)
 8001072:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001076:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001078:	4b12      	ldr	r3, [pc, #72]	; (80010c4 <HAL_ADC_MspInit+0xd8>)
 800107a:	2220      	movs	r2, #32
 800107c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800107e:	4b11      	ldr	r3, [pc, #68]	; (80010c4 <HAL_ADC_MspInit+0xd8>)
 8001080:	2200      	movs	r2, #0
 8001082:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001084:	480f      	ldr	r0, [pc, #60]	; (80010c4 <HAL_ADC_MspInit+0xd8>)
 8001086:	f000 fe8f 	bl	8001da8 <HAL_DMA_Init>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001090:	f001 ffa0 	bl	8002fd4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	4a0b      	ldr	r2, [pc, #44]	; (80010c4 <HAL_ADC_MspInit+0xd8>)
 8001098:	621a      	str	r2, [r3, #32]
 800109a:	4a0a      	ldr	r2, [pc, #40]	; (80010c4 <HAL_ADC_MspInit+0xd8>)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 80010a0:	2200      	movs	r2, #0
 80010a2:	2102      	movs	r1, #2
 80010a4:	2012      	movs	r0, #18
 80010a6:	f000 fe48 	bl	8001d3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80010aa:	2012      	movs	r0, #18
 80010ac:	f000 fe61 	bl	8001d72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80010b0:	bf00      	nop
 80010b2:	3720      	adds	r7, #32
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	40012400 	.word	0x40012400
 80010bc:	40021000 	.word	0x40021000
 80010c0:	40010800 	.word	0x40010800
 80010c4:	20000098 	.word	0x20000098
 80010c8:	40020008 	.word	0x40020008

080010cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010d0:	e7fe      	b.n	80010d0 <NMI_Handler+0x4>

080010d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010d2:	b480      	push	{r7}
 80010d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010d6:	e7fe      	b.n	80010d6 <HardFault_Handler+0x4>

080010d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010dc:	e7fe      	b.n	80010dc <MemManage_Handler+0x4>

080010de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010de:	b480      	push	{r7}
 80010e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010e2:	e7fe      	b.n	80010e2 <BusFault_Handler+0x4>

080010e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010e8:	e7fe      	b.n	80010e8 <UsageFault_Handler+0x4>

080010ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010ea:	b480      	push	{r7}
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010ee:	bf00      	nop
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bc80      	pop	{r7}
 80010f4:	4770      	bx	lr

080010f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010f6:	b480      	push	{r7}
 80010f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010fa:	bf00      	nop
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bc80      	pop	{r7}
 8001100:	4770      	bx	lr

08001102 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001102:	b480      	push	{r7}
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	46bd      	mov	sp, r7
 800110a:	bc80      	pop	{r7}
 800110c:	4770      	bx	lr
	...

08001110 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001114:	4802      	ldr	r0, [pc, #8]	; (8001120 <DMA1_Channel1_IRQHandler+0x10>)
 8001116:	f000 ff01 	bl	8001f1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	20000098 	.word	0x20000098

08001124 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001128:	4802      	ldr	r0, [pc, #8]	; (8001134 <ADC1_2_IRQHandler+0x10>)
 800112a:	f000 fa49 	bl	80015c0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20000068 	.word	0x20000068

08001138 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800113c:	bf00      	nop
 800113e:	46bd      	mov	sp, r7
 8001140:	bc80      	pop	{r7}
 8001142:	4770      	bx	lr

08001144 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001144:	f7ff fff8 	bl	8001138 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001148:	480b      	ldr	r0, [pc, #44]	; (8001178 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800114a:	490c      	ldr	r1, [pc, #48]	; (800117c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800114c:	4a0c      	ldr	r2, [pc, #48]	; (8001180 <LoopFillZerobss+0x16>)
  movs r3, #0
 800114e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001150:	e002      	b.n	8001158 <LoopCopyDataInit>

08001152 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001152:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001154:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001156:	3304      	adds	r3, #4

08001158 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001158:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800115a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800115c:	d3f9      	bcc.n	8001152 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800115e:	4a09      	ldr	r2, [pc, #36]	; (8001184 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001160:	4c09      	ldr	r4, [pc, #36]	; (8001188 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001162:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001164:	e001      	b.n	800116a <LoopFillZerobss>

08001166 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001166:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001168:	3204      	adds	r2, #4

0800116a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800116a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800116c:	d3fb      	bcc.n	8001166 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800116e:	f002 f821 	bl	80031b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001172:	f001 ff34 	bl	8002fde <main>
  bx lr
 8001176:	4770      	bx	lr
  ldr r0, =_sdata
 8001178:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800117c:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8001180:	08004400 	.word	0x08004400
  ldr r2, =_sbss
 8001184:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8001188:	200000f4 	.word	0x200000f4

0800118c <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800118c:	e7fe      	b.n	800118c <CAN1_RX1_IRQHandler>
	...

08001190 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001194:	4b08      	ldr	r3, [pc, #32]	; (80011b8 <HAL_Init+0x28>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a07      	ldr	r2, [pc, #28]	; (80011b8 <HAL_Init+0x28>)
 800119a:	f043 0310 	orr.w	r3, r3, #16
 800119e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011a0:	2003      	movs	r0, #3
 80011a2:	f000 fdbf 	bl	8001d24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011a6:	200f      	movs	r0, #15
 80011a8:	f000 f808 	bl	80011bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011ac:	f7ff fefc 	bl	8000fa8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011b0:	2300      	movs	r3, #0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40022000 	.word	0x40022000

080011bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011c4:	4b12      	ldr	r3, [pc, #72]	; (8001210 <HAL_InitTick+0x54>)
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	4b12      	ldr	r3, [pc, #72]	; (8001214 <HAL_InitTick+0x58>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	4619      	mov	r1, r3
 80011ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011da:	4618      	mov	r0, r3
 80011dc:	f000 fdd7 	bl	8001d8e <HAL_SYSTICK_Config>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e00e      	b.n	8001208 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2b0f      	cmp	r3, #15
 80011ee:	d80a      	bhi.n	8001206 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011f0:	2200      	movs	r2, #0
 80011f2:	6879      	ldr	r1, [r7, #4]
 80011f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011f8:	f000 fd9f 	bl	8001d3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011fc:	4a06      	ldr	r2, [pc, #24]	; (8001218 <HAL_InitTick+0x5c>)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001202:	2300      	movs	r3, #0
 8001204:	e000      	b.n	8001208 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
}
 8001208:	4618      	mov	r0, r3
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	20000000 	.word	0x20000000
 8001214:	20000008 	.word	0x20000008
 8001218:	20000004 	.word	0x20000004

0800121c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001220:	4b05      	ldr	r3, [pc, #20]	; (8001238 <HAL_IncTick+0x1c>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	461a      	mov	r2, r3
 8001226:	4b05      	ldr	r3, [pc, #20]	; (800123c <HAL_IncTick+0x20>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4413      	add	r3, r2
 800122c:	4a03      	ldr	r2, [pc, #12]	; (800123c <HAL_IncTick+0x20>)
 800122e:	6013      	str	r3, [r2, #0]
}
 8001230:	bf00      	nop
 8001232:	46bd      	mov	sp, r7
 8001234:	bc80      	pop	{r7}
 8001236:	4770      	bx	lr
 8001238:	20000008 	.word	0x20000008
 800123c:	20000040 	.word	0x20000040

08001240 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  return uwTick;
 8001244:	4b02      	ldr	r3, [pc, #8]	; (8001250 <HAL_GetTick+0x10>)
 8001246:	681b      	ldr	r3, [r3, #0]
}
 8001248:	4618      	mov	r0, r3
 800124a:	46bd      	mov	sp, r7
 800124c:	bc80      	pop	{r7}
 800124e:	4770      	bx	lr
 8001250:	20000040 	.word	0x20000040

08001254 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800125c:	2300      	movs	r3, #0
 800125e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001260:	2300      	movs	r3, #0
 8001262:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001264:	2300      	movs	r3, #0
 8001266:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001268:	2300      	movs	r3, #0
 800126a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d101      	bne.n	8001276 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e0be      	b.n	80013f4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001280:	2b00      	cmp	r3, #0
 8001282:	d109      	bne.n	8001298 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2200      	movs	r2, #0
 8001288:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2200      	movs	r2, #0
 800128e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f7ff feaa 	bl	8000fec <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f000 fbc7 	bl	8001a2c <ADC_ConversionStop_Disable>
 800129e:	4603      	mov	r3, r0
 80012a0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012a6:	f003 0310 	and.w	r3, r3, #16
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	f040 8099 	bne.w	80013e2 <HAL_ADC_Init+0x18e>
 80012b0:	7dfb      	ldrb	r3, [r7, #23]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	f040 8095 	bne.w	80013e2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012bc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80012c0:	f023 0302 	bic.w	r3, r3, #2
 80012c4:	f043 0202 	orr.w	r2, r3, #2
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80012d4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	7b1b      	ldrb	r3, [r3, #12]
 80012da:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80012dc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80012de:	68ba      	ldr	r2, [r7, #8]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012ec:	d003      	beq.n	80012f6 <HAL_ADC_Init+0xa2>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d102      	bne.n	80012fc <HAL_ADC_Init+0xa8>
 80012f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012fa:	e000      	b.n	80012fe <HAL_ADC_Init+0xaa>
 80012fc:	2300      	movs	r3, #0
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	4313      	orrs	r3, r2
 8001302:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	7d1b      	ldrb	r3, [r3, #20]
 8001308:	2b01      	cmp	r3, #1
 800130a:	d119      	bne.n	8001340 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	7b1b      	ldrb	r3, [r3, #12]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d109      	bne.n	8001328 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	699b      	ldr	r3, [r3, #24]
 8001318:	3b01      	subs	r3, #1
 800131a:	035a      	lsls	r2, r3, #13
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	4313      	orrs	r3, r2
 8001320:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001324:	613b      	str	r3, [r7, #16]
 8001326:	e00b      	b.n	8001340 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800132c:	f043 0220 	orr.w	r2, r3, #32
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001338:	f043 0201 	orr.w	r2, r3, #1
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	430a      	orrs	r2, r1
 8001352:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	689a      	ldr	r2, [r3, #8]
 800135a:	4b28      	ldr	r3, [pc, #160]	; (80013fc <HAL_ADC_Init+0x1a8>)
 800135c:	4013      	ands	r3, r2
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	6812      	ldr	r2, [r2, #0]
 8001362:	68b9      	ldr	r1, [r7, #8]
 8001364:	430b      	orrs	r3, r1
 8001366:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001370:	d003      	beq.n	800137a <HAL_ADC_Init+0x126>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	2b01      	cmp	r3, #1
 8001378:	d104      	bne.n	8001384 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	691b      	ldr	r3, [r3, #16]
 800137e:	3b01      	subs	r3, #1
 8001380:	051b      	lsls	r3, r3, #20
 8001382:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800138a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	68fa      	ldr	r2, [r7, #12]
 8001394:	430a      	orrs	r2, r1
 8001396:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	689a      	ldr	r2, [r3, #8]
 800139e:	4b18      	ldr	r3, [pc, #96]	; (8001400 <HAL_ADC_Init+0x1ac>)
 80013a0:	4013      	ands	r3, r2
 80013a2:	68ba      	ldr	r2, [r7, #8]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d10b      	bne.n	80013c0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2200      	movs	r2, #0
 80013ac:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013b2:	f023 0303 	bic.w	r3, r3, #3
 80013b6:	f043 0201 	orr.w	r2, r3, #1
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80013be:	e018      	b.n	80013f2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c4:	f023 0312 	bic.w	r3, r3, #18
 80013c8:	f043 0210 	orr.w	r2, r3, #16
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013d4:	f043 0201 	orr.w	r2, r3, #1
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80013e0:	e007      	b.n	80013f2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013e6:	f043 0210 	orr.w	r2, r3, #16
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80013f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3718      	adds	r7, #24
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	ffe1f7fd 	.word	0xffe1f7fd
 8001400:	ff1f0efe 	.word	0xff1f0efe

08001404 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af00      	add	r7, sp, #0
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	60b9      	str	r1, [r7, #8]
 800140e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001410:	2300      	movs	r3, #0
 8001412:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a64      	ldr	r2, [pc, #400]	; (80015ac <HAL_ADC_Start_DMA+0x1a8>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d004      	beq.n	8001428 <HAL_ADC_Start_DMA+0x24>
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a63      	ldr	r2, [pc, #396]	; (80015b0 <HAL_ADC_Start_DMA+0x1ac>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d106      	bne.n	8001436 <HAL_ADC_Start_DMA+0x32>
 8001428:	4b60      	ldr	r3, [pc, #384]	; (80015ac <HAL_ADC_Start_DMA+0x1a8>)
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001430:	2b00      	cmp	r3, #0
 8001432:	f040 80b3 	bne.w	800159c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800143c:	2b01      	cmp	r3, #1
 800143e:	d101      	bne.n	8001444 <HAL_ADC_Start_DMA+0x40>
 8001440:	2302      	movs	r3, #2
 8001442:	e0ae      	b.n	80015a2 <HAL_ADC_Start_DMA+0x19e>
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	2201      	movs	r2, #1
 8001448:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800144c:	68f8      	ldr	r0, [r7, #12]
 800144e:	f000 fa93 	bl	8001978 <ADC_Enable>
 8001452:	4603      	mov	r3, r0
 8001454:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001456:	7dfb      	ldrb	r3, [r7, #23]
 8001458:	2b00      	cmp	r3, #0
 800145a:	f040 809a 	bne.w	8001592 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001462:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001466:	f023 0301 	bic.w	r3, r3, #1
 800146a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a4e      	ldr	r2, [pc, #312]	; (80015b0 <HAL_ADC_Start_DMA+0x1ac>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d105      	bne.n	8001488 <HAL_ADC_Start_DMA+0x84>
 800147c:	4b4b      	ldr	r3, [pc, #300]	; (80015ac <HAL_ADC_Start_DMA+0x1a8>)
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d115      	bne.n	80014b4 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800148c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d026      	beq.n	80014f0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80014aa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80014b2:	e01d      	b.n	80014f0 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014b8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a39      	ldr	r2, [pc, #228]	; (80015ac <HAL_ADC_Start_DMA+0x1a8>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d004      	beq.n	80014d4 <HAL_ADC_Start_DMA+0xd0>
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a38      	ldr	r2, [pc, #224]	; (80015b0 <HAL_ADC_Start_DMA+0x1ac>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d10d      	bne.n	80014f0 <HAL_ADC_Start_DMA+0xec>
 80014d4:	4b35      	ldr	r3, [pc, #212]	; (80015ac <HAL_ADC_Start_DMA+0x1a8>)
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d007      	beq.n	80014f0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80014e8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d006      	beq.n	800150a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001500:	f023 0206 	bic.w	r2, r3, #6
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	62da      	str	r2, [r3, #44]	; 0x2c
 8001508:	e002      	b.n	8001510 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	2200      	movs	r2, #0
 800150e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	2200      	movs	r2, #0
 8001514:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	6a1b      	ldr	r3, [r3, #32]
 800151c:	4a25      	ldr	r2, [pc, #148]	; (80015b4 <HAL_ADC_Start_DMA+0x1b0>)
 800151e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	6a1b      	ldr	r3, [r3, #32]
 8001524:	4a24      	ldr	r2, [pc, #144]	; (80015b8 <HAL_ADC_Start_DMA+0x1b4>)
 8001526:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	6a1b      	ldr	r3, [r3, #32]
 800152c:	4a23      	ldr	r2, [pc, #140]	; (80015bc <HAL_ADC_Start_DMA+0x1b8>)
 800152e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f06f 0202 	mvn.w	r2, #2
 8001538:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	689a      	ldr	r2, [r3, #8]
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001548:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	6a18      	ldr	r0, [r3, #32]
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	334c      	adds	r3, #76	; 0x4c
 8001554:	4619      	mov	r1, r3
 8001556:	68ba      	ldr	r2, [r7, #8]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f000 fc7f 	bl	8001e5c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001568:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800156c:	d108      	bne.n	8001580 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	689a      	ldr	r2, [r3, #8]
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800157c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800157e:	e00f      	b.n	80015a0 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	689a      	ldr	r2, [r3, #8]
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800158e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001590:	e006      	b.n	80015a0 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	2200      	movs	r2, #0
 8001596:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800159a:	e001      	b.n	80015a0 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80015a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3718      	adds	r7, #24
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40012400 	.word	0x40012400
 80015b0:	40012800 	.word	0x40012800
 80015b4:	08001aaf 	.word	0x08001aaf
 80015b8:	08001b2b 	.word	0x08001b2b
 80015bc:	08001b47 	.word	0x08001b47

080015c0 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	f003 0320 	and.w	r3, r3, #32
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d03e      	beq.n	8001660 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	f003 0302 	and.w	r3, r3, #2
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d039      	beq.n	8001660 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f0:	f003 0310 	and.w	r3, r3, #16
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d105      	bne.n	8001604 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015fc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800160e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001612:	d11d      	bne.n	8001650 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001618:	2b00      	cmp	r3, #0
 800161a:	d119      	bne.n	8001650 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	685a      	ldr	r2, [r3, #4]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f022 0220 	bic.w	r2, r2, #32
 800162a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001630:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800163c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d105      	bne.n	8001650 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001648:	f043 0201 	orr.w	r2, r3, #1
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f000 f874 	bl	800173e <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f06f 0212 	mvn.w	r2, #18
 800165e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001666:	2b00      	cmp	r3, #0
 8001668:	d04d      	beq.n	8001706 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	f003 0304 	and.w	r3, r3, #4
 8001670:	2b00      	cmp	r3, #0
 8001672:	d048      	beq.n	8001706 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001678:	f003 0310 	and.w	r3, r3, #16
 800167c:	2b00      	cmp	r3, #0
 800167e:	d105      	bne.n	800168c <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001684:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8001696:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 800169a:	d012      	beq.n	80016c2 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d125      	bne.n	80016f6 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80016b4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80016b8:	d11d      	bne.n	80016f6 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d119      	bne.n	80016f6 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	685a      	ldr	r2, [r3, #4]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016d0:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d105      	bne.n	80016f6 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ee:	f043 0201 	orr.w	r2, r3, #1
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f000 fa3f 	bl	8001b7a <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f06f 020c 	mvn.w	r2, #12
 8001704:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800170c:	2b00      	cmp	r3, #0
 800170e:	d012      	beq.n	8001736 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	2b00      	cmp	r3, #0
 8001718:	d00d      	beq.n	8001736 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800171e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f000 f81b 	bl	8001762 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f06f 0201 	mvn.w	r2, #1
 8001734:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001736:	bf00      	nop
 8001738:	3710      	adds	r7, #16
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800173e:	b480      	push	{r7}
 8001740:	b083      	sub	sp, #12
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001746:	bf00      	nop
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	bc80      	pop	{r7}
 800174e:	4770      	bx	lr

08001750 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001758:	bf00      	nop
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	bc80      	pop	{r7}
 8001760:	4770      	bx	lr

08001762 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001762:	b480      	push	{r7}
 8001764:	b083      	sub	sp, #12
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800176a:	bf00      	nop
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	bc80      	pop	{r7}
 8001772:	4770      	bx	lr

08001774 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800177c:	bf00      	nop
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	bc80      	pop	{r7}
 8001784:	4770      	bx	lr
	...

08001788 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001792:	2300      	movs	r3, #0
 8001794:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001796:	2300      	movs	r3, #0
 8001798:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d101      	bne.n	80017a8 <HAL_ADC_ConfigChannel+0x20>
 80017a4:	2302      	movs	r3, #2
 80017a6:	e0dc      	b.n	8001962 <HAL_ADC_ConfigChannel+0x1da>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2201      	movs	r2, #1
 80017ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	2b06      	cmp	r3, #6
 80017b6:	d81c      	bhi.n	80017f2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685a      	ldr	r2, [r3, #4]
 80017c2:	4613      	mov	r3, r2
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	4413      	add	r3, r2
 80017c8:	3b05      	subs	r3, #5
 80017ca:	221f      	movs	r2, #31
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	43db      	mvns	r3, r3
 80017d2:	4019      	ands	r1, r3
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	6818      	ldr	r0, [r3, #0]
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685a      	ldr	r2, [r3, #4]
 80017dc:	4613      	mov	r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	4413      	add	r3, r2
 80017e2:	3b05      	subs	r3, #5
 80017e4:	fa00 f203 	lsl.w	r2, r0, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	430a      	orrs	r2, r1
 80017ee:	635a      	str	r2, [r3, #52]	; 0x34
 80017f0:	e03c      	b.n	800186c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	2b0c      	cmp	r3, #12
 80017f8:	d81c      	bhi.n	8001834 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685a      	ldr	r2, [r3, #4]
 8001804:	4613      	mov	r3, r2
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	4413      	add	r3, r2
 800180a:	3b23      	subs	r3, #35	; 0x23
 800180c:	221f      	movs	r2, #31
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	43db      	mvns	r3, r3
 8001814:	4019      	ands	r1, r3
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	6818      	ldr	r0, [r3, #0]
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685a      	ldr	r2, [r3, #4]
 800181e:	4613      	mov	r3, r2
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	4413      	add	r3, r2
 8001824:	3b23      	subs	r3, #35	; 0x23
 8001826:	fa00 f203 	lsl.w	r2, r0, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	430a      	orrs	r2, r1
 8001830:	631a      	str	r2, [r3, #48]	; 0x30
 8001832:	e01b      	b.n	800186c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685a      	ldr	r2, [r3, #4]
 800183e:	4613      	mov	r3, r2
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	4413      	add	r3, r2
 8001844:	3b41      	subs	r3, #65	; 0x41
 8001846:	221f      	movs	r2, #31
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	43db      	mvns	r3, r3
 800184e:	4019      	ands	r1, r3
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	6818      	ldr	r0, [r3, #0]
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685a      	ldr	r2, [r3, #4]
 8001858:	4613      	mov	r3, r2
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	4413      	add	r3, r2
 800185e:	3b41      	subs	r3, #65	; 0x41
 8001860:	fa00 f203 	lsl.w	r2, r0, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	430a      	orrs	r2, r1
 800186a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2b09      	cmp	r3, #9
 8001872:	d91c      	bls.n	80018ae <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	68d9      	ldr	r1, [r3, #12]
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	4613      	mov	r3, r2
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	4413      	add	r3, r2
 8001884:	3b1e      	subs	r3, #30
 8001886:	2207      	movs	r2, #7
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	43db      	mvns	r3, r3
 800188e:	4019      	ands	r1, r3
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	6898      	ldr	r0, [r3, #8]
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	4613      	mov	r3, r2
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	4413      	add	r3, r2
 800189e:	3b1e      	subs	r3, #30
 80018a0:	fa00 f203 	lsl.w	r2, r0, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	430a      	orrs	r2, r1
 80018aa:	60da      	str	r2, [r3, #12]
 80018ac:	e019      	b.n	80018e2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	6919      	ldr	r1, [r3, #16]
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	4613      	mov	r3, r2
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	4413      	add	r3, r2
 80018be:	2207      	movs	r2, #7
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	43db      	mvns	r3, r3
 80018c6:	4019      	ands	r1, r3
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	6898      	ldr	r0, [r3, #8]
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	4613      	mov	r3, r2
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	4413      	add	r3, r2
 80018d6:	fa00 f203 	lsl.w	r2, r0, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	430a      	orrs	r2, r1
 80018e0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	2b10      	cmp	r3, #16
 80018e8:	d003      	beq.n	80018f2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80018ee:	2b11      	cmp	r3, #17
 80018f0:	d132      	bne.n	8001958 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a1d      	ldr	r2, [pc, #116]	; (800196c <HAL_ADC_ConfigChannel+0x1e4>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d125      	bne.n	8001948 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d126      	bne.n	8001958 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	689a      	ldr	r2, [r3, #8]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001918:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2b10      	cmp	r3, #16
 8001920:	d11a      	bne.n	8001958 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001922:	4b13      	ldr	r3, [pc, #76]	; (8001970 <HAL_ADC_ConfigChannel+0x1e8>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a13      	ldr	r2, [pc, #76]	; (8001974 <HAL_ADC_ConfigChannel+0x1ec>)
 8001928:	fba2 2303 	umull	r2, r3, r2, r3
 800192c:	0c9a      	lsrs	r2, r3, #18
 800192e:	4613      	mov	r3, r2
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	4413      	add	r3, r2
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001938:	e002      	b.n	8001940 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	3b01      	subs	r3, #1
 800193e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d1f9      	bne.n	800193a <HAL_ADC_ConfigChannel+0x1b2>
 8001946:	e007      	b.n	8001958 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800194c:	f043 0220 	orr.w	r2, r3, #32
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2200      	movs	r2, #0
 800195c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001960:	7bfb      	ldrb	r3, [r7, #15]
}
 8001962:	4618      	mov	r0, r3
 8001964:	3714      	adds	r7, #20
 8001966:	46bd      	mov	sp, r7
 8001968:	bc80      	pop	{r7}
 800196a:	4770      	bx	lr
 800196c:	40012400 	.word	0x40012400
 8001970:	20000000 	.word	0x20000000
 8001974:	431bde83 	.word	0x431bde83

08001978 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001980:	2300      	movs	r3, #0
 8001982:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001984:	2300      	movs	r3, #0
 8001986:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	2b01      	cmp	r3, #1
 8001994:	d040      	beq.n	8001a18 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	689a      	ldr	r2, [r3, #8]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f042 0201 	orr.w	r2, r2, #1
 80019a4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80019a6:	4b1f      	ldr	r3, [pc, #124]	; (8001a24 <ADC_Enable+0xac>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a1f      	ldr	r2, [pc, #124]	; (8001a28 <ADC_Enable+0xb0>)
 80019ac:	fba2 2303 	umull	r2, r3, r2, r3
 80019b0:	0c9b      	lsrs	r3, r3, #18
 80019b2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80019b4:	e002      	b.n	80019bc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	3b01      	subs	r3, #1
 80019ba:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d1f9      	bne.n	80019b6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80019c2:	f7ff fc3d 	bl	8001240 <HAL_GetTick>
 80019c6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80019c8:	e01f      	b.n	8001a0a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80019ca:	f7ff fc39 	bl	8001240 <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d918      	bls.n	8001a0a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d011      	beq.n	8001a0a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ea:	f043 0210 	orr.w	r2, r3, #16
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f6:	f043 0201 	orr.w	r2, r3, #1
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e007      	b.n	8001a1a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	f003 0301 	and.w	r3, r3, #1
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d1d8      	bne.n	80019ca <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3710      	adds	r7, #16
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	20000000 	.word	0x20000000
 8001a28:	431bde83 	.word	0x431bde83

08001a2c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a34:	2300      	movs	r3, #0
 8001a36:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d12e      	bne.n	8001aa4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	689a      	ldr	r2, [r3, #8]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f022 0201 	bic.w	r2, r2, #1
 8001a54:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001a56:	f7ff fbf3 	bl	8001240 <HAL_GetTick>
 8001a5a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001a5c:	e01b      	b.n	8001a96 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001a5e:	f7ff fbef 	bl	8001240 <HAL_GetTick>
 8001a62:	4602      	mov	r2, r0
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d914      	bls.n	8001a96 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d10d      	bne.n	8001a96 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a7e:	f043 0210 	orr.w	r2, r3, #16
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a8a:	f043 0201 	orr.w	r2, r3, #1
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e007      	b.n	8001aa6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	f003 0301 	and.w	r3, r3, #1
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d0dc      	beq.n	8001a5e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3710      	adds	r7, #16
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b084      	sub	sp, #16
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aba:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d127      	bne.n	8001b18 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001acc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001ade:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001ae2:	d115      	bne.n	8001b10 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d111      	bne.n	8001b10 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001afc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d105      	bne.n	8001b10 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b08:	f043 0201 	orr.w	r2, r3, #1
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001b10:	68f8      	ldr	r0, [r7, #12]
 8001b12:	f7ff fe14 	bl	800173e <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001b16:	e004      	b.n	8001b22 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	6a1b      	ldr	r3, [r3, #32]
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	4798      	blx	r3
}
 8001b22:	bf00      	nop
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b084      	sub	sp, #16
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b36:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001b38:	68f8      	ldr	r0, [r7, #12]
 8001b3a:	f7ff fe09 	bl	8001750 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001b3e:	bf00      	nop
 8001b40:	3710      	adds	r7, #16
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b084      	sub	sp, #16
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b52:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b58:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b64:	f043 0204 	orr.w	r2, r3, #4
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001b6c:	68f8      	ldr	r0, [r7, #12]
 8001b6e:	f7ff fe01 	bl	8001774 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001b72:	bf00      	nop
 8001b74:	3710      	adds	r7, #16
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	b083      	sub	sp, #12
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001b82:	bf00      	nop
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bc80      	pop	{r7}
 8001b8a:	4770      	bx	lr

08001b8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f003 0307 	and.w	r3, r3, #7
 8001b9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b9c:	4b0c      	ldr	r3, [pc, #48]	; (8001bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ba2:	68ba      	ldr	r2, [r7, #8]
 8001ba4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ba8:	4013      	ands	r3, r2
 8001baa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bbe:	4a04      	ldr	r2, [pc, #16]	; (8001bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	60d3      	str	r3, [r2, #12]
}
 8001bc4:	bf00      	nop
 8001bc6:	3714      	adds	r7, #20
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bc80      	pop	{r7}
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	e000ed00 	.word	0xe000ed00

08001bd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bd8:	4b04      	ldr	r3, [pc, #16]	; (8001bec <__NVIC_GetPriorityGrouping+0x18>)
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	0a1b      	lsrs	r3, r3, #8
 8001bde:	f003 0307 	and.w	r3, r3, #7
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bc80      	pop	{r7}
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	e000ed00 	.word	0xe000ed00

08001bf0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	db0b      	blt.n	8001c1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c02:	79fb      	ldrb	r3, [r7, #7]
 8001c04:	f003 021f 	and.w	r2, r3, #31
 8001c08:	4906      	ldr	r1, [pc, #24]	; (8001c24 <__NVIC_EnableIRQ+0x34>)
 8001c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0e:	095b      	lsrs	r3, r3, #5
 8001c10:	2001      	movs	r0, #1
 8001c12:	fa00 f202 	lsl.w	r2, r0, r2
 8001c16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c1a:	bf00      	nop
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bc80      	pop	{r7}
 8001c22:	4770      	bx	lr
 8001c24:	e000e100 	.word	0xe000e100

08001c28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	4603      	mov	r3, r0
 8001c30:	6039      	str	r1, [r7, #0]
 8001c32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	db0a      	blt.n	8001c52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	b2da      	uxtb	r2, r3
 8001c40:	490c      	ldr	r1, [pc, #48]	; (8001c74 <__NVIC_SetPriority+0x4c>)
 8001c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c46:	0112      	lsls	r2, r2, #4
 8001c48:	b2d2      	uxtb	r2, r2
 8001c4a:	440b      	add	r3, r1
 8001c4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c50:	e00a      	b.n	8001c68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	b2da      	uxtb	r2, r3
 8001c56:	4908      	ldr	r1, [pc, #32]	; (8001c78 <__NVIC_SetPriority+0x50>)
 8001c58:	79fb      	ldrb	r3, [r7, #7]
 8001c5a:	f003 030f 	and.w	r3, r3, #15
 8001c5e:	3b04      	subs	r3, #4
 8001c60:	0112      	lsls	r2, r2, #4
 8001c62:	b2d2      	uxtb	r2, r2
 8001c64:	440b      	add	r3, r1
 8001c66:	761a      	strb	r2, [r3, #24]
}
 8001c68:	bf00      	nop
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bc80      	pop	{r7}
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	e000e100 	.word	0xe000e100
 8001c78:	e000ed00 	.word	0xe000ed00

08001c7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b089      	sub	sp, #36	; 0x24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	60b9      	str	r1, [r7, #8]
 8001c86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	f003 0307 	and.w	r3, r3, #7
 8001c8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	f1c3 0307 	rsb	r3, r3, #7
 8001c96:	2b04      	cmp	r3, #4
 8001c98:	bf28      	it	cs
 8001c9a:	2304      	movcs	r3, #4
 8001c9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	3304      	adds	r3, #4
 8001ca2:	2b06      	cmp	r3, #6
 8001ca4:	d902      	bls.n	8001cac <NVIC_EncodePriority+0x30>
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	3b03      	subs	r3, #3
 8001caa:	e000      	b.n	8001cae <NVIC_EncodePriority+0x32>
 8001cac:	2300      	movs	r3, #0
 8001cae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cba:	43da      	mvns	r2, r3
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	401a      	ands	r2, r3
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cc4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	fa01 f303 	lsl.w	r3, r1, r3
 8001cce:	43d9      	mvns	r1, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd4:	4313      	orrs	r3, r2
         );
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3724      	adds	r7, #36	; 0x24
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bc80      	pop	{r7}
 8001cde:	4770      	bx	lr

08001ce0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	3b01      	subs	r3, #1
 8001cec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cf0:	d301      	bcc.n	8001cf6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e00f      	b.n	8001d16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cf6:	4a0a      	ldr	r2, [pc, #40]	; (8001d20 <SysTick_Config+0x40>)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cfe:	210f      	movs	r1, #15
 8001d00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d04:	f7ff ff90 	bl	8001c28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d08:	4b05      	ldr	r3, [pc, #20]	; (8001d20 <SysTick_Config+0x40>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d0e:	4b04      	ldr	r3, [pc, #16]	; (8001d20 <SysTick_Config+0x40>)
 8001d10:	2207      	movs	r2, #7
 8001d12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	e000e010 	.word	0xe000e010

08001d24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f7ff ff2d 	bl	8001b8c <__NVIC_SetPriorityGrouping>
}
 8001d32:	bf00      	nop
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b086      	sub	sp, #24
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	4603      	mov	r3, r0
 8001d42:	60b9      	str	r1, [r7, #8]
 8001d44:	607a      	str	r2, [r7, #4]
 8001d46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d4c:	f7ff ff42 	bl	8001bd4 <__NVIC_GetPriorityGrouping>
 8001d50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	68b9      	ldr	r1, [r7, #8]
 8001d56:	6978      	ldr	r0, [r7, #20]
 8001d58:	f7ff ff90 	bl	8001c7c <NVIC_EncodePriority>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d62:	4611      	mov	r1, r2
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7ff ff5f 	bl	8001c28 <__NVIC_SetPriority>
}
 8001d6a:	bf00      	nop
 8001d6c:	3718      	adds	r7, #24
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b082      	sub	sp, #8
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	4603      	mov	r3, r0
 8001d7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7ff ff35 	bl	8001bf0 <__NVIC_EnableIRQ>
}
 8001d86:	bf00      	nop
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b082      	sub	sp, #8
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f7ff ffa2 	bl	8001ce0 <SysTick_Config>
 8001d9c:	4603      	mov	r3, r0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
	...

08001da8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001db0:	2300      	movs	r3, #0
 8001db2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d101      	bne.n	8001dbe <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e043      	b.n	8001e46 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	4b22      	ldr	r3, [pc, #136]	; (8001e50 <HAL_DMA_Init+0xa8>)
 8001dc6:	4413      	add	r3, r2
 8001dc8:	4a22      	ldr	r2, [pc, #136]	; (8001e54 <HAL_DMA_Init+0xac>)
 8001dca:	fba2 2303 	umull	r2, r3, r2, r3
 8001dce:	091b      	lsrs	r3, r3, #4
 8001dd0:	009a      	lsls	r2, r3, #2
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a1f      	ldr	r2, [pc, #124]	; (8001e58 <HAL_DMA_Init+0xb0>)
 8001dda:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2202      	movs	r2, #2
 8001de0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001df2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001df6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001e00:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	695b      	ldr	r3, [r3, #20]
 8001e12:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e18:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	69db      	ldr	r3, [r3, #28]
 8001e1e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001e20:	68fa      	ldr	r2, [r7, #12]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	68fa      	ldr	r2, [r7, #12]
 8001e2c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2201      	movs	r2, #1
 8001e38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3714      	adds	r7, #20
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bc80      	pop	{r7}
 8001e4e:	4770      	bx	lr
 8001e50:	bffdfff8 	.word	0xbffdfff8
 8001e54:	cccccccd 	.word	0xcccccccd
 8001e58:	40020000 	.word	0x40020000

08001e5c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	607a      	str	r2, [r7, #4]
 8001e68:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d101      	bne.n	8001e7c <HAL_DMA_Start_IT+0x20>
 8001e78:	2302      	movs	r3, #2
 8001e7a:	e04b      	b.n	8001f14 <HAL_DMA_Start_IT+0xb8>
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d13a      	bne.n	8001f06 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2202      	movs	r2, #2
 8001e94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f022 0201 	bic.w	r2, r2, #1
 8001eac:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	68b9      	ldr	r1, [r7, #8]
 8001eb4:	68f8      	ldr	r0, [r7, #12]
 8001eb6:	f000 f937 	bl	8002128 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d008      	beq.n	8001ed4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f042 020e 	orr.w	r2, r2, #14
 8001ed0:	601a      	str	r2, [r3, #0]
 8001ed2:	e00f      	b.n	8001ef4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f022 0204 	bic.w	r2, r2, #4
 8001ee2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f042 020a 	orr.w	r2, r2, #10
 8001ef2:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f042 0201 	orr.w	r2, r2, #1
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	e005      	b.n	8001f12 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001f0e:	2302      	movs	r3, #2
 8001f10:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001f12:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3718      	adds	r7, #24
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f38:	2204      	movs	r2, #4
 8001f3a:	409a      	lsls	r2, r3
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	4013      	ands	r3, r2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d04f      	beq.n	8001fe4 <HAL_DMA_IRQHandler+0xc8>
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	f003 0304 	and.w	r3, r3, #4
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d04a      	beq.n	8001fe4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0320 	and.w	r3, r3, #32
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d107      	bne.n	8001f6c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f022 0204 	bic.w	r2, r2, #4
 8001f6a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a66      	ldr	r2, [pc, #408]	; (800210c <HAL_DMA_IRQHandler+0x1f0>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d029      	beq.n	8001fca <HAL_DMA_IRQHandler+0xae>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a65      	ldr	r2, [pc, #404]	; (8002110 <HAL_DMA_IRQHandler+0x1f4>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d022      	beq.n	8001fc6 <HAL_DMA_IRQHandler+0xaa>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a63      	ldr	r2, [pc, #396]	; (8002114 <HAL_DMA_IRQHandler+0x1f8>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d01a      	beq.n	8001fc0 <HAL_DMA_IRQHandler+0xa4>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a62      	ldr	r2, [pc, #392]	; (8002118 <HAL_DMA_IRQHandler+0x1fc>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d012      	beq.n	8001fba <HAL_DMA_IRQHandler+0x9e>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a60      	ldr	r2, [pc, #384]	; (800211c <HAL_DMA_IRQHandler+0x200>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d00a      	beq.n	8001fb4 <HAL_DMA_IRQHandler+0x98>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a5f      	ldr	r2, [pc, #380]	; (8002120 <HAL_DMA_IRQHandler+0x204>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d102      	bne.n	8001fae <HAL_DMA_IRQHandler+0x92>
 8001fa8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001fac:	e00e      	b.n	8001fcc <HAL_DMA_IRQHandler+0xb0>
 8001fae:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001fb2:	e00b      	b.n	8001fcc <HAL_DMA_IRQHandler+0xb0>
 8001fb4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001fb8:	e008      	b.n	8001fcc <HAL_DMA_IRQHandler+0xb0>
 8001fba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001fbe:	e005      	b.n	8001fcc <HAL_DMA_IRQHandler+0xb0>
 8001fc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fc4:	e002      	b.n	8001fcc <HAL_DMA_IRQHandler+0xb0>
 8001fc6:	2340      	movs	r3, #64	; 0x40
 8001fc8:	e000      	b.n	8001fcc <HAL_DMA_IRQHandler+0xb0>
 8001fca:	2304      	movs	r3, #4
 8001fcc:	4a55      	ldr	r2, [pc, #340]	; (8002124 <HAL_DMA_IRQHandler+0x208>)
 8001fce:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	f000 8094 	beq.w	8002102 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001fe2:	e08e      	b.n	8002102 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe8:	2202      	movs	r2, #2
 8001fea:	409a      	lsls	r2, r3
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	4013      	ands	r3, r2
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d056      	beq.n	80020a2 <HAL_DMA_IRQHandler+0x186>
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d051      	beq.n	80020a2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0320 	and.w	r3, r3, #32
 8002008:	2b00      	cmp	r3, #0
 800200a:	d10b      	bne.n	8002024 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f022 020a 	bic.w	r2, r2, #10
 800201a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a38      	ldr	r2, [pc, #224]	; (800210c <HAL_DMA_IRQHandler+0x1f0>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d029      	beq.n	8002082 <HAL_DMA_IRQHandler+0x166>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a37      	ldr	r2, [pc, #220]	; (8002110 <HAL_DMA_IRQHandler+0x1f4>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d022      	beq.n	800207e <HAL_DMA_IRQHandler+0x162>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a35      	ldr	r2, [pc, #212]	; (8002114 <HAL_DMA_IRQHandler+0x1f8>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d01a      	beq.n	8002078 <HAL_DMA_IRQHandler+0x15c>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a34      	ldr	r2, [pc, #208]	; (8002118 <HAL_DMA_IRQHandler+0x1fc>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d012      	beq.n	8002072 <HAL_DMA_IRQHandler+0x156>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a32      	ldr	r2, [pc, #200]	; (800211c <HAL_DMA_IRQHandler+0x200>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d00a      	beq.n	800206c <HAL_DMA_IRQHandler+0x150>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a31      	ldr	r2, [pc, #196]	; (8002120 <HAL_DMA_IRQHandler+0x204>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d102      	bne.n	8002066 <HAL_DMA_IRQHandler+0x14a>
 8002060:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002064:	e00e      	b.n	8002084 <HAL_DMA_IRQHandler+0x168>
 8002066:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800206a:	e00b      	b.n	8002084 <HAL_DMA_IRQHandler+0x168>
 800206c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002070:	e008      	b.n	8002084 <HAL_DMA_IRQHandler+0x168>
 8002072:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002076:	e005      	b.n	8002084 <HAL_DMA_IRQHandler+0x168>
 8002078:	f44f 7300 	mov.w	r3, #512	; 0x200
 800207c:	e002      	b.n	8002084 <HAL_DMA_IRQHandler+0x168>
 800207e:	2320      	movs	r3, #32
 8002080:	e000      	b.n	8002084 <HAL_DMA_IRQHandler+0x168>
 8002082:	2302      	movs	r3, #2
 8002084:	4a27      	ldr	r2, [pc, #156]	; (8002124 <HAL_DMA_IRQHandler+0x208>)
 8002086:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002094:	2b00      	cmp	r3, #0
 8002096:	d034      	beq.n	8002102 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80020a0:	e02f      	b.n	8002102 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a6:	2208      	movs	r2, #8
 80020a8:	409a      	lsls	r2, r3
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	4013      	ands	r3, r2
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d028      	beq.n	8002104 <HAL_DMA_IRQHandler+0x1e8>
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	f003 0308 	and.w	r3, r3, #8
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d023      	beq.n	8002104 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f022 020e 	bic.w	r2, r2, #14
 80020ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020d4:	2101      	movs	r1, #1
 80020d6:	fa01 f202 	lsl.w	r2, r1, r2
 80020da:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2201      	movs	r2, #1
 80020e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d004      	beq.n	8002104 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	4798      	blx	r3
    }
  }
  return;
 8002102:	bf00      	nop
 8002104:	bf00      	nop
}
 8002106:	3710      	adds	r7, #16
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	40020008 	.word	0x40020008
 8002110:	4002001c 	.word	0x4002001c
 8002114:	40020030 	.word	0x40020030
 8002118:	40020044 	.word	0x40020044
 800211c:	40020058 	.word	0x40020058
 8002120:	4002006c 	.word	0x4002006c
 8002124:	40020000 	.word	0x40020000

08002128 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002128:	b480      	push	{r7}
 800212a:	b085      	sub	sp, #20
 800212c:	af00      	add	r7, sp, #0
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	60b9      	str	r1, [r7, #8]
 8002132:	607a      	str	r2, [r7, #4]
 8002134:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800213e:	2101      	movs	r1, #1
 8002140:	fa01 f202 	lsl.w	r2, r1, r2
 8002144:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	683a      	ldr	r2, [r7, #0]
 800214c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	2b10      	cmp	r3, #16
 8002154:	d108      	bne.n	8002168 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	68ba      	ldr	r2, [r7, #8]
 8002164:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002166:	e007      	b.n	8002178 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	68ba      	ldr	r2, [r7, #8]
 800216e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	60da      	str	r2, [r3, #12]
}
 8002178:	bf00      	nop
 800217a:	3714      	adds	r7, #20
 800217c:	46bd      	mov	sp, r7
 800217e:	bc80      	pop	{r7}
 8002180:	4770      	bx	lr
	...

08002184 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002184:	b480      	push	{r7}
 8002186:	b08b      	sub	sp, #44	; 0x2c
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800218e:	2300      	movs	r3, #0
 8002190:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002192:	2300      	movs	r3, #0
 8002194:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002196:	e169      	b.n	800246c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002198:	2201      	movs	r2, #1
 800219a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	69fa      	ldr	r2, [r7, #28]
 80021a8:	4013      	ands	r3, r2
 80021aa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	f040 8158 	bne.w	8002466 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	4a9a      	ldr	r2, [pc, #616]	; (8002424 <HAL_GPIO_Init+0x2a0>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d05e      	beq.n	800227e <HAL_GPIO_Init+0xfa>
 80021c0:	4a98      	ldr	r2, [pc, #608]	; (8002424 <HAL_GPIO_Init+0x2a0>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d875      	bhi.n	80022b2 <HAL_GPIO_Init+0x12e>
 80021c6:	4a98      	ldr	r2, [pc, #608]	; (8002428 <HAL_GPIO_Init+0x2a4>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d058      	beq.n	800227e <HAL_GPIO_Init+0xfa>
 80021cc:	4a96      	ldr	r2, [pc, #600]	; (8002428 <HAL_GPIO_Init+0x2a4>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d86f      	bhi.n	80022b2 <HAL_GPIO_Init+0x12e>
 80021d2:	4a96      	ldr	r2, [pc, #600]	; (800242c <HAL_GPIO_Init+0x2a8>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d052      	beq.n	800227e <HAL_GPIO_Init+0xfa>
 80021d8:	4a94      	ldr	r2, [pc, #592]	; (800242c <HAL_GPIO_Init+0x2a8>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d869      	bhi.n	80022b2 <HAL_GPIO_Init+0x12e>
 80021de:	4a94      	ldr	r2, [pc, #592]	; (8002430 <HAL_GPIO_Init+0x2ac>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d04c      	beq.n	800227e <HAL_GPIO_Init+0xfa>
 80021e4:	4a92      	ldr	r2, [pc, #584]	; (8002430 <HAL_GPIO_Init+0x2ac>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d863      	bhi.n	80022b2 <HAL_GPIO_Init+0x12e>
 80021ea:	4a92      	ldr	r2, [pc, #584]	; (8002434 <HAL_GPIO_Init+0x2b0>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d046      	beq.n	800227e <HAL_GPIO_Init+0xfa>
 80021f0:	4a90      	ldr	r2, [pc, #576]	; (8002434 <HAL_GPIO_Init+0x2b0>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d85d      	bhi.n	80022b2 <HAL_GPIO_Init+0x12e>
 80021f6:	2b12      	cmp	r3, #18
 80021f8:	d82a      	bhi.n	8002250 <HAL_GPIO_Init+0xcc>
 80021fa:	2b12      	cmp	r3, #18
 80021fc:	d859      	bhi.n	80022b2 <HAL_GPIO_Init+0x12e>
 80021fe:	a201      	add	r2, pc, #4	; (adr r2, 8002204 <HAL_GPIO_Init+0x80>)
 8002200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002204:	0800227f 	.word	0x0800227f
 8002208:	08002259 	.word	0x08002259
 800220c:	0800226b 	.word	0x0800226b
 8002210:	080022ad 	.word	0x080022ad
 8002214:	080022b3 	.word	0x080022b3
 8002218:	080022b3 	.word	0x080022b3
 800221c:	080022b3 	.word	0x080022b3
 8002220:	080022b3 	.word	0x080022b3
 8002224:	080022b3 	.word	0x080022b3
 8002228:	080022b3 	.word	0x080022b3
 800222c:	080022b3 	.word	0x080022b3
 8002230:	080022b3 	.word	0x080022b3
 8002234:	080022b3 	.word	0x080022b3
 8002238:	080022b3 	.word	0x080022b3
 800223c:	080022b3 	.word	0x080022b3
 8002240:	080022b3 	.word	0x080022b3
 8002244:	080022b3 	.word	0x080022b3
 8002248:	08002261 	.word	0x08002261
 800224c:	08002275 	.word	0x08002275
 8002250:	4a79      	ldr	r2, [pc, #484]	; (8002438 <HAL_GPIO_Init+0x2b4>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d013      	beq.n	800227e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002256:	e02c      	b.n	80022b2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	623b      	str	r3, [r7, #32]
          break;
 800225e:	e029      	b.n	80022b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	3304      	adds	r3, #4
 8002266:	623b      	str	r3, [r7, #32]
          break;
 8002268:	e024      	b.n	80022b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	3308      	adds	r3, #8
 8002270:	623b      	str	r3, [r7, #32]
          break;
 8002272:	e01f      	b.n	80022b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	330c      	adds	r3, #12
 800227a:	623b      	str	r3, [r7, #32]
          break;
 800227c:	e01a      	b.n	80022b4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d102      	bne.n	800228c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002286:	2304      	movs	r3, #4
 8002288:	623b      	str	r3, [r7, #32]
          break;
 800228a:	e013      	b.n	80022b4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	2b01      	cmp	r3, #1
 8002292:	d105      	bne.n	80022a0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002294:	2308      	movs	r3, #8
 8002296:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	69fa      	ldr	r2, [r7, #28]
 800229c:	611a      	str	r2, [r3, #16]
          break;
 800229e:	e009      	b.n	80022b4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022a0:	2308      	movs	r3, #8
 80022a2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	69fa      	ldr	r2, [r7, #28]
 80022a8:	615a      	str	r2, [r3, #20]
          break;
 80022aa:	e003      	b.n	80022b4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80022ac:	2300      	movs	r3, #0
 80022ae:	623b      	str	r3, [r7, #32]
          break;
 80022b0:	e000      	b.n	80022b4 <HAL_GPIO_Init+0x130>
          break;
 80022b2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	2bff      	cmp	r3, #255	; 0xff
 80022b8:	d801      	bhi.n	80022be <HAL_GPIO_Init+0x13a>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	e001      	b.n	80022c2 <HAL_GPIO_Init+0x13e>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	3304      	adds	r3, #4
 80022c2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	2bff      	cmp	r3, #255	; 0xff
 80022c8:	d802      	bhi.n	80022d0 <HAL_GPIO_Init+0x14c>
 80022ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	e002      	b.n	80022d6 <HAL_GPIO_Init+0x152>
 80022d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d2:	3b08      	subs	r3, #8
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	210f      	movs	r1, #15
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	fa01 f303 	lsl.w	r3, r1, r3
 80022e4:	43db      	mvns	r3, r3
 80022e6:	401a      	ands	r2, r3
 80022e8:	6a39      	ldr	r1, [r7, #32]
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	fa01 f303 	lsl.w	r3, r1, r3
 80022f0:	431a      	orrs	r2, r3
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	f000 80b1 	beq.w	8002466 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002304:	4b4d      	ldr	r3, [pc, #308]	; (800243c <HAL_GPIO_Init+0x2b8>)
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	4a4c      	ldr	r2, [pc, #304]	; (800243c <HAL_GPIO_Init+0x2b8>)
 800230a:	f043 0301 	orr.w	r3, r3, #1
 800230e:	6193      	str	r3, [r2, #24]
 8002310:	4b4a      	ldr	r3, [pc, #296]	; (800243c <HAL_GPIO_Init+0x2b8>)
 8002312:	699b      	ldr	r3, [r3, #24]
 8002314:	f003 0301 	and.w	r3, r3, #1
 8002318:	60bb      	str	r3, [r7, #8]
 800231a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800231c:	4a48      	ldr	r2, [pc, #288]	; (8002440 <HAL_GPIO_Init+0x2bc>)
 800231e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002320:	089b      	lsrs	r3, r3, #2
 8002322:	3302      	adds	r3, #2
 8002324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002328:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800232a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232c:	f003 0303 	and.w	r3, r3, #3
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	220f      	movs	r2, #15
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	43db      	mvns	r3, r3
 800233a:	68fa      	ldr	r2, [r7, #12]
 800233c:	4013      	ands	r3, r2
 800233e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4a40      	ldr	r2, [pc, #256]	; (8002444 <HAL_GPIO_Init+0x2c0>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d013      	beq.n	8002370 <HAL_GPIO_Init+0x1ec>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4a3f      	ldr	r2, [pc, #252]	; (8002448 <HAL_GPIO_Init+0x2c4>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d00d      	beq.n	800236c <HAL_GPIO_Init+0x1e8>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4a3e      	ldr	r2, [pc, #248]	; (800244c <HAL_GPIO_Init+0x2c8>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d007      	beq.n	8002368 <HAL_GPIO_Init+0x1e4>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	4a3d      	ldr	r2, [pc, #244]	; (8002450 <HAL_GPIO_Init+0x2cc>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d101      	bne.n	8002364 <HAL_GPIO_Init+0x1e0>
 8002360:	2303      	movs	r3, #3
 8002362:	e006      	b.n	8002372 <HAL_GPIO_Init+0x1ee>
 8002364:	2304      	movs	r3, #4
 8002366:	e004      	b.n	8002372 <HAL_GPIO_Init+0x1ee>
 8002368:	2302      	movs	r3, #2
 800236a:	e002      	b.n	8002372 <HAL_GPIO_Init+0x1ee>
 800236c:	2301      	movs	r3, #1
 800236e:	e000      	b.n	8002372 <HAL_GPIO_Init+0x1ee>
 8002370:	2300      	movs	r3, #0
 8002372:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002374:	f002 0203 	and.w	r2, r2, #3
 8002378:	0092      	lsls	r2, r2, #2
 800237a:	4093      	lsls	r3, r2
 800237c:	68fa      	ldr	r2, [r7, #12]
 800237e:	4313      	orrs	r3, r2
 8002380:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002382:	492f      	ldr	r1, [pc, #188]	; (8002440 <HAL_GPIO_Init+0x2bc>)
 8002384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002386:	089b      	lsrs	r3, r3, #2
 8002388:	3302      	adds	r3, #2
 800238a:	68fa      	ldr	r2, [r7, #12]
 800238c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d006      	beq.n	80023aa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800239c:	4b2d      	ldr	r3, [pc, #180]	; (8002454 <HAL_GPIO_Init+0x2d0>)
 800239e:	689a      	ldr	r2, [r3, #8]
 80023a0:	492c      	ldr	r1, [pc, #176]	; (8002454 <HAL_GPIO_Init+0x2d0>)
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	608b      	str	r3, [r1, #8]
 80023a8:	e006      	b.n	80023b8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80023aa:	4b2a      	ldr	r3, [pc, #168]	; (8002454 <HAL_GPIO_Init+0x2d0>)
 80023ac:	689a      	ldr	r2, [r3, #8]
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	43db      	mvns	r3, r3
 80023b2:	4928      	ldr	r1, [pc, #160]	; (8002454 <HAL_GPIO_Init+0x2d0>)
 80023b4:	4013      	ands	r3, r2
 80023b6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d006      	beq.n	80023d2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80023c4:	4b23      	ldr	r3, [pc, #140]	; (8002454 <HAL_GPIO_Init+0x2d0>)
 80023c6:	68da      	ldr	r2, [r3, #12]
 80023c8:	4922      	ldr	r1, [pc, #136]	; (8002454 <HAL_GPIO_Init+0x2d0>)
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	60cb      	str	r3, [r1, #12]
 80023d0:	e006      	b.n	80023e0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80023d2:	4b20      	ldr	r3, [pc, #128]	; (8002454 <HAL_GPIO_Init+0x2d0>)
 80023d4:	68da      	ldr	r2, [r3, #12]
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	43db      	mvns	r3, r3
 80023da:	491e      	ldr	r1, [pc, #120]	; (8002454 <HAL_GPIO_Init+0x2d0>)
 80023dc:	4013      	ands	r3, r2
 80023de:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d006      	beq.n	80023fa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80023ec:	4b19      	ldr	r3, [pc, #100]	; (8002454 <HAL_GPIO_Init+0x2d0>)
 80023ee:	685a      	ldr	r2, [r3, #4]
 80023f0:	4918      	ldr	r1, [pc, #96]	; (8002454 <HAL_GPIO_Init+0x2d0>)
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	604b      	str	r3, [r1, #4]
 80023f8:	e006      	b.n	8002408 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80023fa:	4b16      	ldr	r3, [pc, #88]	; (8002454 <HAL_GPIO_Init+0x2d0>)
 80023fc:	685a      	ldr	r2, [r3, #4]
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	43db      	mvns	r3, r3
 8002402:	4914      	ldr	r1, [pc, #80]	; (8002454 <HAL_GPIO_Init+0x2d0>)
 8002404:	4013      	ands	r3, r2
 8002406:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d021      	beq.n	8002458 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002414:	4b0f      	ldr	r3, [pc, #60]	; (8002454 <HAL_GPIO_Init+0x2d0>)
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	490e      	ldr	r1, [pc, #56]	; (8002454 <HAL_GPIO_Init+0x2d0>)
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	4313      	orrs	r3, r2
 800241e:	600b      	str	r3, [r1, #0]
 8002420:	e021      	b.n	8002466 <HAL_GPIO_Init+0x2e2>
 8002422:	bf00      	nop
 8002424:	10320000 	.word	0x10320000
 8002428:	10310000 	.word	0x10310000
 800242c:	10220000 	.word	0x10220000
 8002430:	10210000 	.word	0x10210000
 8002434:	10120000 	.word	0x10120000
 8002438:	10110000 	.word	0x10110000
 800243c:	40021000 	.word	0x40021000
 8002440:	40010000 	.word	0x40010000
 8002444:	40010800 	.word	0x40010800
 8002448:	40010c00 	.word	0x40010c00
 800244c:	40011000 	.word	0x40011000
 8002450:	40011400 	.word	0x40011400
 8002454:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002458:	4b0b      	ldr	r3, [pc, #44]	; (8002488 <HAL_GPIO_Init+0x304>)
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	43db      	mvns	r3, r3
 8002460:	4909      	ldr	r1, [pc, #36]	; (8002488 <HAL_GPIO_Init+0x304>)
 8002462:	4013      	ands	r3, r2
 8002464:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002468:	3301      	adds	r3, #1
 800246a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002472:	fa22 f303 	lsr.w	r3, r2, r3
 8002476:	2b00      	cmp	r3, #0
 8002478:	f47f ae8e 	bne.w	8002198 <HAL_GPIO_Init+0x14>
  }
}
 800247c:	bf00      	nop
 800247e:	bf00      	nop
 8002480:	372c      	adds	r7, #44	; 0x2c
 8002482:	46bd      	mov	sp, r7
 8002484:	bc80      	pop	{r7}
 8002486:	4770      	bx	lr
 8002488:	40010400 	.word	0x40010400

0800248c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b086      	sub	sp, #24
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d101      	bne.n	800249e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e272      	b.n	8002984 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0301 	and.w	r3, r3, #1
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	f000 8087 	beq.w	80025ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024ac:	4b92      	ldr	r3, [pc, #584]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f003 030c 	and.w	r3, r3, #12
 80024b4:	2b04      	cmp	r3, #4
 80024b6:	d00c      	beq.n	80024d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80024b8:	4b8f      	ldr	r3, [pc, #572]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f003 030c 	and.w	r3, r3, #12
 80024c0:	2b08      	cmp	r3, #8
 80024c2:	d112      	bne.n	80024ea <HAL_RCC_OscConfig+0x5e>
 80024c4:	4b8c      	ldr	r3, [pc, #560]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024d0:	d10b      	bne.n	80024ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024d2:	4b89      	ldr	r3, [pc, #548]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d06c      	beq.n	80025b8 <HAL_RCC_OscConfig+0x12c>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d168      	bne.n	80025b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e24c      	b.n	8002984 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024f2:	d106      	bne.n	8002502 <HAL_RCC_OscConfig+0x76>
 80024f4:	4b80      	ldr	r3, [pc, #512]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a7f      	ldr	r2, [pc, #508]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 80024fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024fe:	6013      	str	r3, [r2, #0]
 8002500:	e02e      	b.n	8002560 <HAL_RCC_OscConfig+0xd4>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d10c      	bne.n	8002524 <HAL_RCC_OscConfig+0x98>
 800250a:	4b7b      	ldr	r3, [pc, #492]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a7a      	ldr	r2, [pc, #488]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 8002510:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002514:	6013      	str	r3, [r2, #0]
 8002516:	4b78      	ldr	r3, [pc, #480]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a77      	ldr	r2, [pc, #476]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 800251c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002520:	6013      	str	r3, [r2, #0]
 8002522:	e01d      	b.n	8002560 <HAL_RCC_OscConfig+0xd4>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800252c:	d10c      	bne.n	8002548 <HAL_RCC_OscConfig+0xbc>
 800252e:	4b72      	ldr	r3, [pc, #456]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a71      	ldr	r2, [pc, #452]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 8002534:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002538:	6013      	str	r3, [r2, #0]
 800253a:	4b6f      	ldr	r3, [pc, #444]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a6e      	ldr	r2, [pc, #440]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 8002540:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002544:	6013      	str	r3, [r2, #0]
 8002546:	e00b      	b.n	8002560 <HAL_RCC_OscConfig+0xd4>
 8002548:	4b6b      	ldr	r3, [pc, #428]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a6a      	ldr	r2, [pc, #424]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 800254e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002552:	6013      	str	r3, [r2, #0]
 8002554:	4b68      	ldr	r3, [pc, #416]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a67      	ldr	r2, [pc, #412]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 800255a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800255e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d013      	beq.n	8002590 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002568:	f7fe fe6a 	bl	8001240 <HAL_GetTick>
 800256c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800256e:	e008      	b.n	8002582 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002570:	f7fe fe66 	bl	8001240 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	2b64      	cmp	r3, #100	; 0x64
 800257c:	d901      	bls.n	8002582 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e200      	b.n	8002984 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002582:	4b5d      	ldr	r3, [pc, #372]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d0f0      	beq.n	8002570 <HAL_RCC_OscConfig+0xe4>
 800258e:	e014      	b.n	80025ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002590:	f7fe fe56 	bl	8001240 <HAL_GetTick>
 8002594:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002596:	e008      	b.n	80025aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002598:	f7fe fe52 	bl	8001240 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b64      	cmp	r3, #100	; 0x64
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e1ec      	b.n	8002984 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025aa:	4b53      	ldr	r3, [pc, #332]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d1f0      	bne.n	8002598 <HAL_RCC_OscConfig+0x10c>
 80025b6:	e000      	b.n	80025ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d063      	beq.n	800268e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025c6:	4b4c      	ldr	r3, [pc, #304]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f003 030c 	and.w	r3, r3, #12
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d00b      	beq.n	80025ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80025d2:	4b49      	ldr	r3, [pc, #292]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f003 030c 	and.w	r3, r3, #12
 80025da:	2b08      	cmp	r3, #8
 80025dc:	d11c      	bne.n	8002618 <HAL_RCC_OscConfig+0x18c>
 80025de:	4b46      	ldr	r3, [pc, #280]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d116      	bne.n	8002618 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ea:	4b43      	ldr	r3, [pc, #268]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d005      	beq.n	8002602 <HAL_RCC_OscConfig+0x176>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d001      	beq.n	8002602 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e1c0      	b.n	8002984 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002602:	4b3d      	ldr	r3, [pc, #244]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	695b      	ldr	r3, [r3, #20]
 800260e:	00db      	lsls	r3, r3, #3
 8002610:	4939      	ldr	r1, [pc, #228]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 8002612:	4313      	orrs	r3, r2
 8002614:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002616:	e03a      	b.n	800268e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	691b      	ldr	r3, [r3, #16]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d020      	beq.n	8002662 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002620:	4b36      	ldr	r3, [pc, #216]	; (80026fc <HAL_RCC_OscConfig+0x270>)
 8002622:	2201      	movs	r2, #1
 8002624:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002626:	f7fe fe0b 	bl	8001240 <HAL_GetTick>
 800262a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800262c:	e008      	b.n	8002640 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800262e:	f7fe fe07 	bl	8001240 <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	2b02      	cmp	r3, #2
 800263a:	d901      	bls.n	8002640 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e1a1      	b.n	8002984 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002640:	4b2d      	ldr	r3, [pc, #180]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0302 	and.w	r3, r3, #2
 8002648:	2b00      	cmp	r3, #0
 800264a:	d0f0      	beq.n	800262e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800264c:	4b2a      	ldr	r3, [pc, #168]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	695b      	ldr	r3, [r3, #20]
 8002658:	00db      	lsls	r3, r3, #3
 800265a:	4927      	ldr	r1, [pc, #156]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 800265c:	4313      	orrs	r3, r2
 800265e:	600b      	str	r3, [r1, #0]
 8002660:	e015      	b.n	800268e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002662:	4b26      	ldr	r3, [pc, #152]	; (80026fc <HAL_RCC_OscConfig+0x270>)
 8002664:	2200      	movs	r2, #0
 8002666:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002668:	f7fe fdea 	bl	8001240 <HAL_GetTick>
 800266c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800266e:	e008      	b.n	8002682 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002670:	f7fe fde6 	bl	8001240 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b02      	cmp	r3, #2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e180      	b.n	8002984 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002682:	4b1d      	ldr	r3, [pc, #116]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1f0      	bne.n	8002670 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0308 	and.w	r3, r3, #8
 8002696:	2b00      	cmp	r3, #0
 8002698:	d03a      	beq.n	8002710 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	699b      	ldr	r3, [r3, #24]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d019      	beq.n	80026d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026a2:	4b17      	ldr	r3, [pc, #92]	; (8002700 <HAL_RCC_OscConfig+0x274>)
 80026a4:	2201      	movs	r2, #1
 80026a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026a8:	f7fe fdca 	bl	8001240 <HAL_GetTick>
 80026ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026ae:	e008      	b.n	80026c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026b0:	f7fe fdc6 	bl	8001240 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e160      	b.n	8002984 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026c2:	4b0d      	ldr	r3, [pc, #52]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 80026c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d0f0      	beq.n	80026b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80026ce:	2001      	movs	r0, #1
 80026d0:	f000 fa9c 	bl	8002c0c <RCC_Delay>
 80026d4:	e01c      	b.n	8002710 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026d6:	4b0a      	ldr	r3, [pc, #40]	; (8002700 <HAL_RCC_OscConfig+0x274>)
 80026d8:	2200      	movs	r2, #0
 80026da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026dc:	f7fe fdb0 	bl	8001240 <HAL_GetTick>
 80026e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026e2:	e00f      	b.n	8002704 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026e4:	f7fe fdac 	bl	8001240 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d908      	bls.n	8002704 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e146      	b.n	8002984 <HAL_RCC_OscConfig+0x4f8>
 80026f6:	bf00      	nop
 80026f8:	40021000 	.word	0x40021000
 80026fc:	42420000 	.word	0x42420000
 8002700:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002704:	4b92      	ldr	r3, [pc, #584]	; (8002950 <HAL_RCC_OscConfig+0x4c4>)
 8002706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002708:	f003 0302 	and.w	r3, r3, #2
 800270c:	2b00      	cmp	r3, #0
 800270e:	d1e9      	bne.n	80026e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0304 	and.w	r3, r3, #4
 8002718:	2b00      	cmp	r3, #0
 800271a:	f000 80a6 	beq.w	800286a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800271e:	2300      	movs	r3, #0
 8002720:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002722:	4b8b      	ldr	r3, [pc, #556]	; (8002950 <HAL_RCC_OscConfig+0x4c4>)
 8002724:	69db      	ldr	r3, [r3, #28]
 8002726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d10d      	bne.n	800274a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800272e:	4b88      	ldr	r3, [pc, #544]	; (8002950 <HAL_RCC_OscConfig+0x4c4>)
 8002730:	69db      	ldr	r3, [r3, #28]
 8002732:	4a87      	ldr	r2, [pc, #540]	; (8002950 <HAL_RCC_OscConfig+0x4c4>)
 8002734:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002738:	61d3      	str	r3, [r2, #28]
 800273a:	4b85      	ldr	r3, [pc, #532]	; (8002950 <HAL_RCC_OscConfig+0x4c4>)
 800273c:	69db      	ldr	r3, [r3, #28]
 800273e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002742:	60bb      	str	r3, [r7, #8]
 8002744:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002746:	2301      	movs	r3, #1
 8002748:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800274a:	4b82      	ldr	r3, [pc, #520]	; (8002954 <HAL_RCC_OscConfig+0x4c8>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002752:	2b00      	cmp	r3, #0
 8002754:	d118      	bne.n	8002788 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002756:	4b7f      	ldr	r3, [pc, #508]	; (8002954 <HAL_RCC_OscConfig+0x4c8>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a7e      	ldr	r2, [pc, #504]	; (8002954 <HAL_RCC_OscConfig+0x4c8>)
 800275c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002760:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002762:	f7fe fd6d 	bl	8001240 <HAL_GetTick>
 8002766:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002768:	e008      	b.n	800277c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800276a:	f7fe fd69 	bl	8001240 <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	2b64      	cmp	r3, #100	; 0x64
 8002776:	d901      	bls.n	800277c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e103      	b.n	8002984 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800277c:	4b75      	ldr	r3, [pc, #468]	; (8002954 <HAL_RCC_OscConfig+0x4c8>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002784:	2b00      	cmp	r3, #0
 8002786:	d0f0      	beq.n	800276a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	2b01      	cmp	r3, #1
 800278e:	d106      	bne.n	800279e <HAL_RCC_OscConfig+0x312>
 8002790:	4b6f      	ldr	r3, [pc, #444]	; (8002950 <HAL_RCC_OscConfig+0x4c4>)
 8002792:	6a1b      	ldr	r3, [r3, #32]
 8002794:	4a6e      	ldr	r2, [pc, #440]	; (8002950 <HAL_RCC_OscConfig+0x4c4>)
 8002796:	f043 0301 	orr.w	r3, r3, #1
 800279a:	6213      	str	r3, [r2, #32]
 800279c:	e02d      	b.n	80027fa <HAL_RCC_OscConfig+0x36e>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d10c      	bne.n	80027c0 <HAL_RCC_OscConfig+0x334>
 80027a6:	4b6a      	ldr	r3, [pc, #424]	; (8002950 <HAL_RCC_OscConfig+0x4c4>)
 80027a8:	6a1b      	ldr	r3, [r3, #32]
 80027aa:	4a69      	ldr	r2, [pc, #420]	; (8002950 <HAL_RCC_OscConfig+0x4c4>)
 80027ac:	f023 0301 	bic.w	r3, r3, #1
 80027b0:	6213      	str	r3, [r2, #32]
 80027b2:	4b67      	ldr	r3, [pc, #412]	; (8002950 <HAL_RCC_OscConfig+0x4c4>)
 80027b4:	6a1b      	ldr	r3, [r3, #32]
 80027b6:	4a66      	ldr	r2, [pc, #408]	; (8002950 <HAL_RCC_OscConfig+0x4c4>)
 80027b8:	f023 0304 	bic.w	r3, r3, #4
 80027bc:	6213      	str	r3, [r2, #32]
 80027be:	e01c      	b.n	80027fa <HAL_RCC_OscConfig+0x36e>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	2b05      	cmp	r3, #5
 80027c6:	d10c      	bne.n	80027e2 <HAL_RCC_OscConfig+0x356>
 80027c8:	4b61      	ldr	r3, [pc, #388]	; (8002950 <HAL_RCC_OscConfig+0x4c4>)
 80027ca:	6a1b      	ldr	r3, [r3, #32]
 80027cc:	4a60      	ldr	r2, [pc, #384]	; (8002950 <HAL_RCC_OscConfig+0x4c4>)
 80027ce:	f043 0304 	orr.w	r3, r3, #4
 80027d2:	6213      	str	r3, [r2, #32]
 80027d4:	4b5e      	ldr	r3, [pc, #376]	; (8002950 <HAL_RCC_OscConfig+0x4c4>)
 80027d6:	6a1b      	ldr	r3, [r3, #32]
 80027d8:	4a5d      	ldr	r2, [pc, #372]	; (8002950 <HAL_RCC_OscConfig+0x4c4>)
 80027da:	f043 0301 	orr.w	r3, r3, #1
 80027de:	6213      	str	r3, [r2, #32]
 80027e0:	e00b      	b.n	80027fa <HAL_RCC_OscConfig+0x36e>
 80027e2:	4b5b      	ldr	r3, [pc, #364]	; (8002950 <HAL_RCC_OscConfig+0x4c4>)
 80027e4:	6a1b      	ldr	r3, [r3, #32]
 80027e6:	4a5a      	ldr	r2, [pc, #360]	; (8002950 <HAL_RCC_OscConfig+0x4c4>)
 80027e8:	f023 0301 	bic.w	r3, r3, #1
 80027ec:	6213      	str	r3, [r2, #32]
 80027ee:	4b58      	ldr	r3, [pc, #352]	; (8002950 <HAL_RCC_OscConfig+0x4c4>)
 80027f0:	6a1b      	ldr	r3, [r3, #32]
 80027f2:	4a57      	ldr	r2, [pc, #348]	; (8002950 <HAL_RCC_OscConfig+0x4c4>)
 80027f4:	f023 0304 	bic.w	r3, r3, #4
 80027f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d015      	beq.n	800282e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002802:	f7fe fd1d 	bl	8001240 <HAL_GetTick>
 8002806:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002808:	e00a      	b.n	8002820 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800280a:	f7fe fd19 	bl	8001240 <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	f241 3288 	movw	r2, #5000	; 0x1388
 8002818:	4293      	cmp	r3, r2
 800281a:	d901      	bls.n	8002820 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e0b1      	b.n	8002984 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002820:	4b4b      	ldr	r3, [pc, #300]	; (8002950 <HAL_RCC_OscConfig+0x4c4>)
 8002822:	6a1b      	ldr	r3, [r3, #32]
 8002824:	f003 0302 	and.w	r3, r3, #2
 8002828:	2b00      	cmp	r3, #0
 800282a:	d0ee      	beq.n	800280a <HAL_RCC_OscConfig+0x37e>
 800282c:	e014      	b.n	8002858 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800282e:	f7fe fd07 	bl	8001240 <HAL_GetTick>
 8002832:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002834:	e00a      	b.n	800284c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002836:	f7fe fd03 	bl	8001240 <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	f241 3288 	movw	r2, #5000	; 0x1388
 8002844:	4293      	cmp	r3, r2
 8002846:	d901      	bls.n	800284c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e09b      	b.n	8002984 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800284c:	4b40      	ldr	r3, [pc, #256]	; (8002950 <HAL_RCC_OscConfig+0x4c4>)
 800284e:	6a1b      	ldr	r3, [r3, #32]
 8002850:	f003 0302 	and.w	r3, r3, #2
 8002854:	2b00      	cmp	r3, #0
 8002856:	d1ee      	bne.n	8002836 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002858:	7dfb      	ldrb	r3, [r7, #23]
 800285a:	2b01      	cmp	r3, #1
 800285c:	d105      	bne.n	800286a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800285e:	4b3c      	ldr	r3, [pc, #240]	; (8002950 <HAL_RCC_OscConfig+0x4c4>)
 8002860:	69db      	ldr	r3, [r3, #28]
 8002862:	4a3b      	ldr	r2, [pc, #236]	; (8002950 <HAL_RCC_OscConfig+0x4c4>)
 8002864:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002868:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	69db      	ldr	r3, [r3, #28]
 800286e:	2b00      	cmp	r3, #0
 8002870:	f000 8087 	beq.w	8002982 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002874:	4b36      	ldr	r3, [pc, #216]	; (8002950 <HAL_RCC_OscConfig+0x4c4>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f003 030c 	and.w	r3, r3, #12
 800287c:	2b08      	cmp	r3, #8
 800287e:	d061      	beq.n	8002944 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	69db      	ldr	r3, [r3, #28]
 8002884:	2b02      	cmp	r3, #2
 8002886:	d146      	bne.n	8002916 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002888:	4b33      	ldr	r3, [pc, #204]	; (8002958 <HAL_RCC_OscConfig+0x4cc>)
 800288a:	2200      	movs	r2, #0
 800288c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800288e:	f7fe fcd7 	bl	8001240 <HAL_GetTick>
 8002892:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002894:	e008      	b.n	80028a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002896:	f7fe fcd3 	bl	8001240 <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d901      	bls.n	80028a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80028a4:	2303      	movs	r3, #3
 80028a6:	e06d      	b.n	8002984 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028a8:	4b29      	ldr	r3, [pc, #164]	; (8002950 <HAL_RCC_OscConfig+0x4c4>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d1f0      	bne.n	8002896 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a1b      	ldr	r3, [r3, #32]
 80028b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028bc:	d108      	bne.n	80028d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80028be:	4b24      	ldr	r3, [pc, #144]	; (8002950 <HAL_RCC_OscConfig+0x4c4>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	4921      	ldr	r1, [pc, #132]	; (8002950 <HAL_RCC_OscConfig+0x4c4>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028d0:	4b1f      	ldr	r3, [pc, #124]	; (8002950 <HAL_RCC_OscConfig+0x4c4>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6a19      	ldr	r1, [r3, #32]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e0:	430b      	orrs	r3, r1
 80028e2:	491b      	ldr	r1, [pc, #108]	; (8002950 <HAL_RCC_OscConfig+0x4c4>)
 80028e4:	4313      	orrs	r3, r2
 80028e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028e8:	4b1b      	ldr	r3, [pc, #108]	; (8002958 <HAL_RCC_OscConfig+0x4cc>)
 80028ea:	2201      	movs	r2, #1
 80028ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ee:	f7fe fca7 	bl	8001240 <HAL_GetTick>
 80028f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028f4:	e008      	b.n	8002908 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028f6:	f7fe fca3 	bl	8001240 <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	2b02      	cmp	r3, #2
 8002902:	d901      	bls.n	8002908 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e03d      	b.n	8002984 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002908:	4b11      	ldr	r3, [pc, #68]	; (8002950 <HAL_RCC_OscConfig+0x4c4>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d0f0      	beq.n	80028f6 <HAL_RCC_OscConfig+0x46a>
 8002914:	e035      	b.n	8002982 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002916:	4b10      	ldr	r3, [pc, #64]	; (8002958 <HAL_RCC_OscConfig+0x4cc>)
 8002918:	2200      	movs	r2, #0
 800291a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800291c:	f7fe fc90 	bl	8001240 <HAL_GetTick>
 8002920:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002922:	e008      	b.n	8002936 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002924:	f7fe fc8c 	bl	8001240 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	2b02      	cmp	r3, #2
 8002930:	d901      	bls.n	8002936 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e026      	b.n	8002984 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002936:	4b06      	ldr	r3, [pc, #24]	; (8002950 <HAL_RCC_OscConfig+0x4c4>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d1f0      	bne.n	8002924 <HAL_RCC_OscConfig+0x498>
 8002942:	e01e      	b.n	8002982 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	69db      	ldr	r3, [r3, #28]
 8002948:	2b01      	cmp	r3, #1
 800294a:	d107      	bne.n	800295c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e019      	b.n	8002984 <HAL_RCC_OscConfig+0x4f8>
 8002950:	40021000 	.word	0x40021000
 8002954:	40007000 	.word	0x40007000
 8002958:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800295c:	4b0b      	ldr	r3, [pc, #44]	; (800298c <HAL_RCC_OscConfig+0x500>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a1b      	ldr	r3, [r3, #32]
 800296c:	429a      	cmp	r2, r3
 800296e:	d106      	bne.n	800297e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800297a:	429a      	cmp	r2, r3
 800297c:	d001      	beq.n	8002982 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e000      	b.n	8002984 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002982:	2300      	movs	r3, #0
}
 8002984:	4618      	mov	r0, r3
 8002986:	3718      	adds	r7, #24
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	40021000 	.word	0x40021000

08002990 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d101      	bne.n	80029a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e0d0      	b.n	8002b46 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029a4:	4b6a      	ldr	r3, [pc, #424]	; (8002b50 <HAL_RCC_ClockConfig+0x1c0>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0307 	and.w	r3, r3, #7
 80029ac:	683a      	ldr	r2, [r7, #0]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d910      	bls.n	80029d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029b2:	4b67      	ldr	r3, [pc, #412]	; (8002b50 <HAL_RCC_ClockConfig+0x1c0>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f023 0207 	bic.w	r2, r3, #7
 80029ba:	4965      	ldr	r1, [pc, #404]	; (8002b50 <HAL_RCC_ClockConfig+0x1c0>)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	4313      	orrs	r3, r2
 80029c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029c2:	4b63      	ldr	r3, [pc, #396]	; (8002b50 <HAL_RCC_ClockConfig+0x1c0>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0307 	and.w	r3, r3, #7
 80029ca:	683a      	ldr	r2, [r7, #0]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d001      	beq.n	80029d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e0b8      	b.n	8002b46 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0302 	and.w	r3, r3, #2
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d020      	beq.n	8002a22 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0304 	and.w	r3, r3, #4
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d005      	beq.n	80029f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029ec:	4b59      	ldr	r3, [pc, #356]	; (8002b54 <HAL_RCC_ClockConfig+0x1c4>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	4a58      	ldr	r2, [pc, #352]	; (8002b54 <HAL_RCC_ClockConfig+0x1c4>)
 80029f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80029f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0308 	and.w	r3, r3, #8
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d005      	beq.n	8002a10 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a04:	4b53      	ldr	r3, [pc, #332]	; (8002b54 <HAL_RCC_ClockConfig+0x1c4>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	4a52      	ldr	r2, [pc, #328]	; (8002b54 <HAL_RCC_ClockConfig+0x1c4>)
 8002a0a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002a0e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a10:	4b50      	ldr	r3, [pc, #320]	; (8002b54 <HAL_RCC_ClockConfig+0x1c4>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	494d      	ldr	r1, [pc, #308]	; (8002b54 <HAL_RCC_ClockConfig+0x1c4>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d040      	beq.n	8002ab0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d107      	bne.n	8002a46 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a36:	4b47      	ldr	r3, [pc, #284]	; (8002b54 <HAL_RCC_ClockConfig+0x1c4>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d115      	bne.n	8002a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e07f      	b.n	8002b46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d107      	bne.n	8002a5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a4e:	4b41      	ldr	r3, [pc, #260]	; (8002b54 <HAL_RCC_ClockConfig+0x1c4>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d109      	bne.n	8002a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e073      	b.n	8002b46 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a5e:	4b3d      	ldr	r3, [pc, #244]	; (8002b54 <HAL_RCC_ClockConfig+0x1c4>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d101      	bne.n	8002a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e06b      	b.n	8002b46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a6e:	4b39      	ldr	r3, [pc, #228]	; (8002b54 <HAL_RCC_ClockConfig+0x1c4>)
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f023 0203 	bic.w	r2, r3, #3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	4936      	ldr	r1, [pc, #216]	; (8002b54 <HAL_RCC_ClockConfig+0x1c4>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a80:	f7fe fbde 	bl	8001240 <HAL_GetTick>
 8002a84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a86:	e00a      	b.n	8002a9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a88:	f7fe fbda 	bl	8001240 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e053      	b.n	8002b46 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a9e:	4b2d      	ldr	r3, [pc, #180]	; (8002b54 <HAL_RCC_ClockConfig+0x1c4>)
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f003 020c 	and.w	r2, r3, #12
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d1eb      	bne.n	8002a88 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ab0:	4b27      	ldr	r3, [pc, #156]	; (8002b50 <HAL_RCC_ClockConfig+0x1c0>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0307 	and.w	r3, r3, #7
 8002ab8:	683a      	ldr	r2, [r7, #0]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d210      	bcs.n	8002ae0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002abe:	4b24      	ldr	r3, [pc, #144]	; (8002b50 <HAL_RCC_ClockConfig+0x1c0>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f023 0207 	bic.w	r2, r3, #7
 8002ac6:	4922      	ldr	r1, [pc, #136]	; (8002b50 <HAL_RCC_ClockConfig+0x1c0>)
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ace:	4b20      	ldr	r3, [pc, #128]	; (8002b50 <HAL_RCC_ClockConfig+0x1c0>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0307 	and.w	r3, r3, #7
 8002ad6:	683a      	ldr	r2, [r7, #0]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d001      	beq.n	8002ae0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e032      	b.n	8002b46 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0304 	and.w	r3, r3, #4
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d008      	beq.n	8002afe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002aec:	4b19      	ldr	r3, [pc, #100]	; (8002b54 <HAL_RCC_ClockConfig+0x1c4>)
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	4916      	ldr	r1, [pc, #88]	; (8002b54 <HAL_RCC_ClockConfig+0x1c4>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0308 	and.w	r3, r3, #8
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d009      	beq.n	8002b1e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b0a:	4b12      	ldr	r3, [pc, #72]	; (8002b54 <HAL_RCC_ClockConfig+0x1c4>)
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	490e      	ldr	r1, [pc, #56]	; (8002b54 <HAL_RCC_ClockConfig+0x1c4>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b1e:	f000 f821 	bl	8002b64 <HAL_RCC_GetSysClockFreq>
 8002b22:	4602      	mov	r2, r0
 8002b24:	4b0b      	ldr	r3, [pc, #44]	; (8002b54 <HAL_RCC_ClockConfig+0x1c4>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	091b      	lsrs	r3, r3, #4
 8002b2a:	f003 030f 	and.w	r3, r3, #15
 8002b2e:	490a      	ldr	r1, [pc, #40]	; (8002b58 <HAL_RCC_ClockConfig+0x1c8>)
 8002b30:	5ccb      	ldrb	r3, [r1, r3]
 8002b32:	fa22 f303 	lsr.w	r3, r2, r3
 8002b36:	4a09      	ldr	r2, [pc, #36]	; (8002b5c <HAL_RCC_ClockConfig+0x1cc>)
 8002b38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b3a:	4b09      	ldr	r3, [pc, #36]	; (8002b60 <HAL_RCC_ClockConfig+0x1d0>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7fe fb3c 	bl	80011bc <HAL_InitTick>

  return HAL_OK;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3710      	adds	r7, #16
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	40022000 	.word	0x40022000
 8002b54:	40021000 	.word	0x40021000
 8002b58:	080041f8 	.word	0x080041f8
 8002b5c:	20000000 	.word	0x20000000
 8002b60:	20000004 	.word	0x20000004

08002b64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b087      	sub	sp, #28
 8002b68:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	60fb      	str	r3, [r7, #12]
 8002b6e:	2300      	movs	r3, #0
 8002b70:	60bb      	str	r3, [r7, #8]
 8002b72:	2300      	movs	r3, #0
 8002b74:	617b      	str	r3, [r7, #20]
 8002b76:	2300      	movs	r3, #0
 8002b78:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b7e:	4b1e      	ldr	r3, [pc, #120]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f003 030c 	and.w	r3, r3, #12
 8002b8a:	2b04      	cmp	r3, #4
 8002b8c:	d002      	beq.n	8002b94 <HAL_RCC_GetSysClockFreq+0x30>
 8002b8e:	2b08      	cmp	r3, #8
 8002b90:	d003      	beq.n	8002b9a <HAL_RCC_GetSysClockFreq+0x36>
 8002b92:	e027      	b.n	8002be4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b94:	4b19      	ldr	r3, [pc, #100]	; (8002bfc <HAL_RCC_GetSysClockFreq+0x98>)
 8002b96:	613b      	str	r3, [r7, #16]
      break;
 8002b98:	e027      	b.n	8002bea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	0c9b      	lsrs	r3, r3, #18
 8002b9e:	f003 030f 	and.w	r3, r3, #15
 8002ba2:	4a17      	ldr	r2, [pc, #92]	; (8002c00 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002ba4:	5cd3      	ldrb	r3, [r2, r3]
 8002ba6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d010      	beq.n	8002bd4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002bb2:	4b11      	ldr	r3, [pc, #68]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	0c5b      	lsrs	r3, r3, #17
 8002bb8:	f003 0301 	and.w	r3, r3, #1
 8002bbc:	4a11      	ldr	r2, [pc, #68]	; (8002c04 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002bbe:	5cd3      	ldrb	r3, [r2, r3]
 8002bc0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a0d      	ldr	r2, [pc, #52]	; (8002bfc <HAL_RCC_GetSysClockFreq+0x98>)
 8002bc6:	fb03 f202 	mul.w	r2, r3, r2
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bd0:	617b      	str	r3, [r7, #20]
 8002bd2:	e004      	b.n	8002bde <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	4a0c      	ldr	r2, [pc, #48]	; (8002c08 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002bd8:	fb02 f303 	mul.w	r3, r2, r3
 8002bdc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	613b      	str	r3, [r7, #16]
      break;
 8002be2:	e002      	b.n	8002bea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002be4:	4b05      	ldr	r3, [pc, #20]	; (8002bfc <HAL_RCC_GetSysClockFreq+0x98>)
 8002be6:	613b      	str	r3, [r7, #16]
      break;
 8002be8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bea:	693b      	ldr	r3, [r7, #16]
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	371c      	adds	r7, #28
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bc80      	pop	{r7}
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	40021000 	.word	0x40021000
 8002bfc:	007a1200 	.word	0x007a1200
 8002c00:	08004208 	.word	0x08004208
 8002c04:	08004218 	.word	0x08004218
 8002c08:	003d0900 	.word	0x003d0900

08002c0c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b085      	sub	sp, #20
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c14:	4b0a      	ldr	r3, [pc, #40]	; (8002c40 <RCC_Delay+0x34>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a0a      	ldr	r2, [pc, #40]	; (8002c44 <RCC_Delay+0x38>)
 8002c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c1e:	0a5b      	lsrs	r3, r3, #9
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	fb02 f303 	mul.w	r3, r2, r3
 8002c26:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c28:	bf00      	nop
  }
  while (Delay --);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	1e5a      	subs	r2, r3, #1
 8002c2e:	60fa      	str	r2, [r7, #12]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d1f9      	bne.n	8002c28 <RCC_Delay+0x1c>
}
 8002c34:	bf00      	nop
 8002c36:	bf00      	nop
 8002c38:	3714      	adds	r7, #20
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bc80      	pop	{r7}
 8002c3e:	4770      	bx	lr
 8002c40:	20000000 	.word	0x20000000
 8002c44:	10624dd3 	.word	0x10624dd3

08002c48 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b086      	sub	sp, #24
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002c50:	2300      	movs	r3, #0
 8002c52:	613b      	str	r3, [r7, #16]
 8002c54:	2300      	movs	r3, #0
 8002c56:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0301 	and.w	r3, r3, #1
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d07d      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002c64:	2300      	movs	r3, #0
 8002c66:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c68:	4b4f      	ldr	r3, [pc, #316]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c6a:	69db      	ldr	r3, [r3, #28]
 8002c6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d10d      	bne.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c74:	4b4c      	ldr	r3, [pc, #304]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c76:	69db      	ldr	r3, [r3, #28]
 8002c78:	4a4b      	ldr	r2, [pc, #300]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c7e:	61d3      	str	r3, [r2, #28]
 8002c80:	4b49      	ldr	r3, [pc, #292]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c82:	69db      	ldr	r3, [r3, #28]
 8002c84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c88:	60bb      	str	r3, [r7, #8]
 8002c8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c90:	4b46      	ldr	r3, [pc, #280]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d118      	bne.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c9c:	4b43      	ldr	r3, [pc, #268]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a42      	ldr	r2, [pc, #264]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ca2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ca6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ca8:	f7fe faca 	bl	8001240 <HAL_GetTick>
 8002cac:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cae:	e008      	b.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cb0:	f7fe fac6 	bl	8001240 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b64      	cmp	r3, #100	; 0x64
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e06d      	b.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cc2:	4b3a      	ldr	r3, [pc, #232]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d0f0      	beq.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002cce:	4b36      	ldr	r3, [pc, #216]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cd0:	6a1b      	ldr	r3, [r3, #32]
 8002cd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cd6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d02e      	beq.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ce6:	68fa      	ldr	r2, [r7, #12]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d027      	beq.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002cec:	4b2e      	ldr	r3, [pc, #184]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cee:	6a1b      	ldr	r3, [r3, #32]
 8002cf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cf4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002cf6:	4b2e      	ldr	r3, [pc, #184]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002cfc:	4b2c      	ldr	r3, [pc, #176]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002d02:	4a29      	ldr	r2, [pc, #164]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d014      	beq.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d12:	f7fe fa95 	bl	8001240 <HAL_GetTick>
 8002d16:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d18:	e00a      	b.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d1a:	f7fe fa91 	bl	8001240 <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d901      	bls.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e036      	b.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d30:	4b1d      	ldr	r3, [pc, #116]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d32:	6a1b      	ldr	r3, [r3, #32]
 8002d34:	f003 0302 	and.w	r3, r3, #2
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d0ee      	beq.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d3c:	4b1a      	ldr	r3, [pc, #104]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d3e:	6a1b      	ldr	r3, [r3, #32]
 8002d40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	4917      	ldr	r1, [pc, #92]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d4e:	7dfb      	ldrb	r3, [r7, #23]
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d105      	bne.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d54:	4b14      	ldr	r3, [pc, #80]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d56:	69db      	ldr	r3, [r3, #28]
 8002d58:	4a13      	ldr	r2, [pc, #76]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d5e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0302 	and.w	r3, r3, #2
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d008      	beq.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d6c:	4b0e      	ldr	r3, [pc, #56]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	490b      	ldr	r1, [pc, #44]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0310 	and.w	r3, r3, #16
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d008      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d8a:	4b07      	ldr	r3, [pc, #28]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	4904      	ldr	r1, [pc, #16]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3718      	adds	r7, #24
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	40021000 	.word	0x40021000
 8002dac:	40007000 	.word	0x40007000
 8002db0:	42420440 	.word	0x42420440

08002db4 <board_init>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_ADC1_Init(void);

void board_init(void){
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0
	  HAL_Init();
 8002db8:	f7fe f9ea 	bl	8001190 <HAL_Init>
	  SystemClock_Config();
 8002dbc:	f000 f812 	bl	8002de4 <SystemClock_Config>
	  MX_GPIO_Init();
 8002dc0:	f000 f8e6 	bl	8002f90 <MX_GPIO_Init>
	  MX_DMA_Init();
 8002dc4:	f000 f8c6 	bl	8002f54 <MX_DMA_Init>
	  MX_ADC1_Init();
 8002dc8:	f000 f868 	bl	8002e9c <MX_ADC1_Init>
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)sensor_value, 3);
 8002dcc:	2203      	movs	r2, #3
 8002dce:	4903      	ldr	r1, [pc, #12]	; (8002ddc <board_init+0x28>)
 8002dd0:	4803      	ldr	r0, [pc, #12]	; (8002de0 <board_init+0x2c>)
 8002dd2:	f7fe fb17 	bl	8001404 <HAL_ADC_Start_DMA>

}
 8002dd6:	bf00      	nop
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	200000dc 	.word	0x200000dc
 8002de0:	20000068 	.word	0x20000068

08002de4 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b094      	sub	sp, #80	; 0x50
 8002de8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002dea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002dee:	2228      	movs	r2, #40	; 0x28
 8002df0:	2100      	movs	r1, #0
 8002df2:	4618      	mov	r0, r3
 8002df4:	f000 f9d6 	bl	80031a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002df8:	f107 0314 	add.w	r3, r7, #20
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	601a      	str	r2, [r3, #0]
 8002e00:	605a      	str	r2, [r3, #4]
 8002e02:	609a      	str	r2, [r3, #8]
 8002e04:	60da      	str	r2, [r3, #12]
 8002e06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e08:	1d3b      	adds	r3, r7, #4
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	601a      	str	r2, [r3, #0]
 8002e0e:	605a      	str	r2, [r3, #4]
 8002e10:	609a      	str	r2, [r3, #8]
 8002e12:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002e14:	2301      	movs	r3, #1
 8002e16:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002e18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002e22:	2301      	movs	r3, #1
 8002e24:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e26:	2302      	movs	r3, #2
 8002e28:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002e2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e2e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002e30:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002e34:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7ff fb26 	bl	800248c <HAL_RCC_OscConfig>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d001      	beq.n	8002e4a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002e46:	f000 f8c5 	bl	8002fd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e4a:	230f      	movs	r3, #15
 8002e4c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e4e:	2302      	movs	r3, #2
 8002e50:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e52:	2300      	movs	r3, #0
 8002e54:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002e56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e5a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002e60:	f107 0314 	add.w	r3, r7, #20
 8002e64:	2102      	movs	r1, #2
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7ff fd92 	bl	8002990 <HAL_RCC_ClockConfig>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002e72:	f000 f8af 	bl	8002fd4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002e76:	2302      	movs	r3, #2
 8002e78:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002e7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e7e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e80:	1d3b      	adds	r3, r7, #4
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7ff fee0 	bl	8002c48 <HAL_RCCEx_PeriphCLKConfig>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d001      	beq.n	8002e92 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8002e8e:	f000 f8a1 	bl	8002fd4 <Error_Handler>
  }
}
 8002e92:	bf00      	nop
 8002e94:	3750      	adds	r7, #80	; 0x50
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
	...

08002e9c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002ea2:	1d3b      	adds	r3, r7, #4
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	601a      	str	r2, [r3, #0]
 8002ea8:	605a      	str	r2, [r3, #4]
 8002eaa:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002eac:	4b27      	ldr	r3, [pc, #156]	; (8002f4c <MX_ADC1_Init+0xb0>)
 8002eae:	4a28      	ldr	r2, [pc, #160]	; (8002f50 <MX_ADC1_Init+0xb4>)
 8002eb0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002eb2:	4b26      	ldr	r3, [pc, #152]	; (8002f4c <MX_ADC1_Init+0xb0>)
 8002eb4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002eb8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002eba:	4b24      	ldr	r3, [pc, #144]	; (8002f4c <MX_ADC1_Init+0xb0>)
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002ec0:	4b22      	ldr	r3, [pc, #136]	; (8002f4c <MX_ADC1_Init+0xb0>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002ec6:	4b21      	ldr	r3, [pc, #132]	; (8002f4c <MX_ADC1_Init+0xb0>)
 8002ec8:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002ecc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002ece:	4b1f      	ldr	r3, [pc, #124]	; (8002f4c <MX_ADC1_Init+0xb0>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8002ed4:	4b1d      	ldr	r3, [pc, #116]	; (8002f4c <MX_ADC1_Init+0xb0>)
 8002ed6:	2203      	movs	r2, #3
 8002ed8:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002eda:	481c      	ldr	r0, [pc, #112]	; (8002f4c <MX_ADC1_Init+0xb0>)
 8002edc:	f7fe f9ba 	bl	8001254 <HAL_ADC_Init>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d001      	beq.n	8002eea <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8002ee6:	f000 f875 	bl	8002fd4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002eea:	2300      	movs	r3, #0
 8002eec:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8002ef2:	2307      	movs	r3, #7
 8002ef4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ef6:	1d3b      	adds	r3, r7, #4
 8002ef8:	4619      	mov	r1, r3
 8002efa:	4814      	ldr	r0, [pc, #80]	; (8002f4c <MX_ADC1_Init+0xb0>)
 8002efc:	f7fe fc44 	bl	8001788 <HAL_ADC_ConfigChannel>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d001      	beq.n	8002f0a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8002f06:	f000 f865 	bl	8002fd4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002f0e:	2302      	movs	r3, #2
 8002f10:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f12:	1d3b      	adds	r3, r7, #4
 8002f14:	4619      	mov	r1, r3
 8002f16:	480d      	ldr	r0, [pc, #52]	; (8002f4c <MX_ADC1_Init+0xb0>)
 8002f18:	f7fe fc36 	bl	8001788 <HAL_ADC_ConfigChannel>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8002f22:	f000 f857 	bl	8002fd4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002f26:	2302      	movs	r3, #2
 8002f28:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f2e:	1d3b      	adds	r3, r7, #4
 8002f30:	4619      	mov	r1, r3
 8002f32:	4806      	ldr	r0, [pc, #24]	; (8002f4c <MX_ADC1_Init+0xb0>)
 8002f34:	f7fe fc28 	bl	8001788 <HAL_ADC_ConfigChannel>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8002f3e:	f000 f849 	bl	8002fd4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002f42:	bf00      	nop
 8002f44:	3710      	adds	r7, #16
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	20000068 	.word	0x20000068
 8002f50:	40012400 	.word	0x40012400

08002f54 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002f5a:	4b0c      	ldr	r3, [pc, #48]	; (8002f8c <MX_DMA_Init+0x38>)
 8002f5c:	695b      	ldr	r3, [r3, #20]
 8002f5e:	4a0b      	ldr	r2, [pc, #44]	; (8002f8c <MX_DMA_Init+0x38>)
 8002f60:	f043 0301 	orr.w	r3, r3, #1
 8002f64:	6153      	str	r3, [r2, #20]
 8002f66:	4b09      	ldr	r3, [pc, #36]	; (8002f8c <MX_DMA_Init+0x38>)
 8002f68:	695b      	ldr	r3, [r3, #20]
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	607b      	str	r3, [r7, #4]
 8002f70:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002f72:	2200      	movs	r2, #0
 8002f74:	2100      	movs	r1, #0
 8002f76:	200b      	movs	r0, #11
 8002f78:	f7fe fedf 	bl	8001d3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002f7c:	200b      	movs	r0, #11
 8002f7e:	f7fe fef8 	bl	8001d72 <HAL_NVIC_EnableIRQ>

}
 8002f82:	bf00      	nop
 8002f84:	3708      	adds	r7, #8
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	40021000 	.word	0x40021000

08002f90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f96:	4b0e      	ldr	r3, [pc, #56]	; (8002fd0 <MX_GPIO_Init+0x40>)
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	4a0d      	ldr	r2, [pc, #52]	; (8002fd0 <MX_GPIO_Init+0x40>)
 8002f9c:	f043 0320 	orr.w	r3, r3, #32
 8002fa0:	6193      	str	r3, [r2, #24]
 8002fa2:	4b0b      	ldr	r3, [pc, #44]	; (8002fd0 <MX_GPIO_Init+0x40>)
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	f003 0320 	and.w	r3, r3, #32
 8002faa:	607b      	str	r3, [r7, #4]
 8002fac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fae:	4b08      	ldr	r3, [pc, #32]	; (8002fd0 <MX_GPIO_Init+0x40>)
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	4a07      	ldr	r2, [pc, #28]	; (8002fd0 <MX_GPIO_Init+0x40>)
 8002fb4:	f043 0304 	orr.w	r3, r3, #4
 8002fb8:	6193      	str	r3, [r2, #24]
 8002fba:	4b05      	ldr	r3, [pc, #20]	; (8002fd0 <MX_GPIO_Init+0x40>)
 8002fbc:	699b      	ldr	r3, [r3, #24]
 8002fbe:	f003 0304 	and.w	r3, r3, #4
 8002fc2:	603b      	str	r3, [r7, #0]
 8002fc4:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002fc6:	bf00      	nop
 8002fc8:	370c      	adds	r7, #12
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bc80      	pop	{r7}
 8002fce:	4770      	bx	lr
 8002fd0:	40021000 	.word	0x40021000

08002fd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002fd8:	b672      	cpsid	i
}
 8002fda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002fdc:	e7fe      	b.n	8002fdc <Error_Handler+0x8>

08002fde <main>:

void adc_value_to_3_axist(uint16_t* _adcValue, float* _axistValue, uint8_t _numberValue);
void caculate_shaking_value(float* _old_axist_value, float* _new_axist_value, float* _shaking_value);

int main(void)
{
 8002fde:	b580      	push	{r7, lr}
 8002fe0:	af00      	add	r7, sp, #0
	board_init();
 8002fe2:	f7ff fee7 	bl	8002db4 <board_init>
  while (1)
 8002fe6:	e7fe      	b.n	8002fe6 <main+0x8>

08002fe8 <SysTick_Handler>:
  }
}


void SysTick_Handler(void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8002fec:	f7fe f916 	bl	800121c <HAL_IncTick>
  g_sys_time++;
 8002ff0:	4b0e      	ldr	r3, [pc, #56]	; (800302c <SysTick_Handler+0x44>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	4a0d      	ldr	r2, [pc, #52]	; (800302c <SysTick_Handler+0x44>)
 8002ff8:	6013      	str	r3, [r2, #0]
  if(g_sys_time % SCAN_ADC_RATE == 0){
 8002ffa:	4b0c      	ldr	r3, [pc, #48]	; (800302c <SysTick_Handler+0x44>)
 8002ffc:	6819      	ldr	r1, [r3, #0]
 8002ffe:	4b0c      	ldr	r3, [pc, #48]	; (8003030 <SysTick_Handler+0x48>)
 8003000:	fba3 2301 	umull	r2, r3, r3, r1
 8003004:	08da      	lsrs	r2, r3, #3
 8003006:	4613      	mov	r3, r2
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	4413      	add	r3, r2
 800300c:	005b      	lsls	r3, r3, #1
 800300e:	1aca      	subs	r2, r1, r3
 8003010:	2a00      	cmp	r2, #0
 8003012:	d109      	bne.n	8003028 <SysTick_Handler+0x40>
	  adc_value_to_3_axist(sensor_value, axit_value,3);
 8003014:	2203      	movs	r2, #3
 8003016:	4907      	ldr	r1, [pc, #28]	; (8003034 <SysTick_Handler+0x4c>)
 8003018:	4807      	ldr	r0, [pc, #28]	; (8003038 <SysTick_Handler+0x50>)
 800301a:	f000 f815 	bl	8003048 <adc_value_to_3_axist>
	  caculate_shaking_value(old_axist_value, new_axist_value, shaking_value);
 800301e:	4a07      	ldr	r2, [pc, #28]	; (800303c <SysTick_Handler+0x54>)
 8003020:	4907      	ldr	r1, [pc, #28]	; (8003040 <SysTick_Handler+0x58>)
 8003022:	4808      	ldr	r0, [pc, #32]	; (8003044 <SysTick_Handler+0x5c>)
 8003024:	f000 f860 	bl	80030e8 <caculate_shaking_value>
  }
}
 8003028:	bf00      	nop
 800302a:	bd80      	pop	{r7, pc}
 800302c:	200000f0 	.word	0x200000f0
 8003030:	cccccccd 	.word	0xcccccccd
 8003034:	200000e4 	.word	0x200000e4
 8003038:	200000dc 	.word	0x200000dc
 800303c:	2000005c 	.word	0x2000005c
 8003040:	20000044 	.word	0x20000044
 8003044:	20000050 	.word	0x20000050

08003048 <adc_value_to_3_axist>:



void adc_value_to_3_axist(uint16_t* _adcValue, float* _axistValue, uint8_t _numberValue){
 8003048:	b590      	push	{r4, r7, lr}
 800304a:	b087      	sub	sp, #28
 800304c:	af00      	add	r7, sp, #0
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	4613      	mov	r3, r2
 8003054:	71fb      	strb	r3, [r7, #7]
	for(int i = 0; i < _numberValue; i ++){
 8003056:	2300      	movs	r3, #0
 8003058:	617b      	str	r3, [r7, #20]
 800305a:	e031      	b.n	80030c0 <adc_value_to_3_axist+0x78>
		_axistValue[i] = (float)((int)_adcValue[i] - axist_balance_value[i])/400*90;
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	005b      	lsls	r3, r3, #1
 8003060:	68fa      	ldr	r2, [r7, #12]
 8003062:	4413      	add	r3, r2
 8003064:	881b      	ldrh	r3, [r3, #0]
 8003066:	4619      	mov	r1, r3
 8003068:	4a1a      	ldr	r2, [pc, #104]	; (80030d4 <adc_value_to_3_axist+0x8c>)
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003070:	1acb      	subs	r3, r1, r3
 8003072:	4618      	mov	r0, r3
 8003074:	f7fd fdf4 	bl	8000c60 <__aeabi_i2f>
 8003078:	4603      	mov	r3, r0
 800307a:	4917      	ldr	r1, [pc, #92]	; (80030d8 <adc_value_to_3_axist+0x90>)
 800307c:	4618      	mov	r0, r3
 800307e:	f7fd fef7 	bl	8000e70 <__aeabi_fdiv>
 8003082:	4603      	mov	r3, r0
 8003084:	4618      	mov	r0, r3
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	68ba      	ldr	r2, [r7, #8]
 800308c:	18d4      	adds	r4, r2, r3
 800308e:	4913      	ldr	r1, [pc, #76]	; (80030dc <adc_value_to_3_axist+0x94>)
 8003090:	f7fd fe3a 	bl	8000d08 <__aeabi_fmul>
 8003094:	4603      	mov	r3, r0
 8003096:	6023      	str	r3, [r4, #0]
		old_axist_value[i] = new_axist_value[i];
 8003098:	4a11      	ldr	r2, [pc, #68]	; (80030e0 <adc_value_to_3_axist+0x98>)
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80030a0:	4910      	ldr	r1, [pc, #64]	; (80030e4 <adc_value_to_3_axist+0x9c>)
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		new_axist_value[i] = _axistValue[i];
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	68ba      	ldr	r2, [r7, #8]
 80030ae:	4413      	add	r3, r2
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	490b      	ldr	r1, [pc, #44]	; (80030e0 <adc_value_to_3_axist+0x98>)
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < _numberValue; i ++){
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	3301      	adds	r3, #1
 80030be:	617b      	str	r3, [r7, #20]
 80030c0:	79fb      	ldrb	r3, [r7, #7]
 80030c2:	697a      	ldr	r2, [r7, #20]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	dbc9      	blt.n	800305c <adc_value_to_3_axist+0x14>
	}
}
 80030c8:	bf00      	nop
 80030ca:	bf00      	nop
 80030cc:	371c      	adds	r7, #28
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd90      	pop	{r4, r7, pc}
 80030d2:	bf00      	nop
 80030d4:	20000018 	.word	0x20000018
 80030d8:	43c80000 	.word	0x43c80000
 80030dc:	42b40000 	.word	0x42b40000
 80030e0:	20000044 	.word	0x20000044
 80030e4:	20000050 	.word	0x20000050

080030e8 <caculate_shaking_value>:

void caculate_shaking_value(float* _old_axist_value, float* _new_axist_value, float* _shaking_value){
 80030e8:	b5b0      	push	{r4, r5, r7, lr}
 80030ea:	b086      	sub	sp, #24
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	607a      	str	r2, [r7, #4]
	for(int i = 0; i < 3; i++){
 80030f4:	2300      	movs	r3, #0
 80030f6:	617b      	str	r3, [r7, #20]
 80030f8:	e044      	b.n	8003184 <caculate_shaking_value+0x9c>
		_shaking_value[i] = three_axist_motor_lengh[i]*(1 - cos(_new_axist_value[i]-old_axist_value[i])) / SCAN_ADC_RATE ;
 80030fa:	4a26      	ldr	r2, [pc, #152]	; (8003194 <caculate_shaking_value+0xac>)
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003102:	4618      	mov	r0, r3
 8003104:	f7fd f966 	bl	80003d4 <__aeabi_ui2d>
 8003108:	4604      	mov	r4, r0
 800310a:	460d      	mov	r5, r1
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	68ba      	ldr	r2, [r7, #8]
 8003112:	4413      	add	r3, r2
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	4920      	ldr	r1, [pc, #128]	; (8003198 <caculate_shaking_value+0xb0>)
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800311e:	4619      	mov	r1, r3
 8003120:	4610      	mov	r0, r2
 8003122:	f7fd fce7 	bl	8000af4 <__aeabi_fsub>
 8003126:	4603      	mov	r3, r0
 8003128:	4618      	mov	r0, r3
 800312a:	f7fd f975 	bl	8000418 <__aeabi_f2d>
 800312e:	4602      	mov	r2, r0
 8003130:	460b      	mov	r3, r1
 8003132:	4610      	mov	r0, r2
 8003134:	4619      	mov	r1, r3
 8003136:	f000 f861 	bl	80031fc <cos>
 800313a:	4602      	mov	r2, r0
 800313c:	460b      	mov	r3, r1
 800313e:	f04f 0000 	mov.w	r0, #0
 8003142:	4916      	ldr	r1, [pc, #88]	; (800319c <caculate_shaking_value+0xb4>)
 8003144:	f7fd f808 	bl	8000158 <__aeabi_dsub>
 8003148:	4602      	mov	r2, r0
 800314a:	460b      	mov	r3, r1
 800314c:	4620      	mov	r0, r4
 800314e:	4629      	mov	r1, r5
 8003150:	f7fd f9ba 	bl	80004c8 <__aeabi_dmul>
 8003154:	4602      	mov	r2, r0
 8003156:	460b      	mov	r3, r1
 8003158:	4610      	mov	r0, r2
 800315a:	4619      	mov	r1, r3
 800315c:	f04f 0200 	mov.w	r2, #0
 8003160:	4b0f      	ldr	r3, [pc, #60]	; (80031a0 <caculate_shaking_value+0xb8>)
 8003162:	f7fd fadb 	bl	800071c <__aeabi_ddiv>
 8003166:	4602      	mov	r2, r0
 8003168:	460b      	mov	r3, r1
 800316a:	4610      	mov	r0, r2
 800316c:	4619      	mov	r1, r3
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	18d4      	adds	r4, r2, r3
 8003176:	f7fd fc69 	bl	8000a4c <__aeabi_d2f>
 800317a:	4603      	mov	r3, r0
 800317c:	6023      	str	r3, [r4, #0]
	for(int i = 0; i < 3; i++){
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	3301      	adds	r3, #1
 8003182:	617b      	str	r3, [r7, #20]
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	2b02      	cmp	r3, #2
 8003188:	ddb7      	ble.n	80030fa <caculate_shaking_value+0x12>
	}
}
 800318a:	bf00      	nop
 800318c:	bf00      	nop
 800318e:	3718      	adds	r7, #24
 8003190:	46bd      	mov	sp, r7
 8003192:	bdb0      	pop	{r4, r5, r7, pc}
 8003194:	2000000c 	.word	0x2000000c
 8003198:	20000050 	.word	0x20000050
 800319c:	3ff00000 	.word	0x3ff00000
 80031a0:	40240000 	.word	0x40240000

080031a4 <memset>:
 80031a4:	4603      	mov	r3, r0
 80031a6:	4402      	add	r2, r0
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d100      	bne.n	80031ae <memset+0xa>
 80031ac:	4770      	bx	lr
 80031ae:	f803 1b01 	strb.w	r1, [r3], #1
 80031b2:	e7f9      	b.n	80031a8 <memset+0x4>

080031b4 <__libc_init_array>:
 80031b4:	b570      	push	{r4, r5, r6, lr}
 80031b6:	2600      	movs	r6, #0
 80031b8:	4d0c      	ldr	r5, [pc, #48]	; (80031ec <__libc_init_array+0x38>)
 80031ba:	4c0d      	ldr	r4, [pc, #52]	; (80031f0 <__libc_init_array+0x3c>)
 80031bc:	1b64      	subs	r4, r4, r5
 80031be:	10a4      	asrs	r4, r4, #2
 80031c0:	42a6      	cmp	r6, r4
 80031c2:	d109      	bne.n	80031d8 <__libc_init_array+0x24>
 80031c4:	f001 f80c 	bl	80041e0 <_init>
 80031c8:	2600      	movs	r6, #0
 80031ca:	4d0a      	ldr	r5, [pc, #40]	; (80031f4 <__libc_init_array+0x40>)
 80031cc:	4c0a      	ldr	r4, [pc, #40]	; (80031f8 <__libc_init_array+0x44>)
 80031ce:	1b64      	subs	r4, r4, r5
 80031d0:	10a4      	asrs	r4, r4, #2
 80031d2:	42a6      	cmp	r6, r4
 80031d4:	d105      	bne.n	80031e2 <__libc_init_array+0x2e>
 80031d6:	bd70      	pop	{r4, r5, r6, pc}
 80031d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80031dc:	4798      	blx	r3
 80031de:	3601      	adds	r6, #1
 80031e0:	e7ee      	b.n	80031c0 <__libc_init_array+0xc>
 80031e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80031e6:	4798      	blx	r3
 80031e8:	3601      	adds	r6, #1
 80031ea:	e7f2      	b.n	80031d2 <__libc_init_array+0x1e>
 80031ec:	080043f8 	.word	0x080043f8
 80031f0:	080043f8 	.word	0x080043f8
 80031f4:	080043f8 	.word	0x080043f8
 80031f8:	080043fc 	.word	0x080043fc

080031fc <cos>:
 80031fc:	b530      	push	{r4, r5, lr}
 80031fe:	4a20      	ldr	r2, [pc, #128]	; (8003280 <cos+0x84>)
 8003200:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003204:	4293      	cmp	r3, r2
 8003206:	b087      	sub	sp, #28
 8003208:	dc06      	bgt.n	8003218 <cos+0x1c>
 800320a:	2200      	movs	r2, #0
 800320c:	2300      	movs	r3, #0
 800320e:	b007      	add	sp, #28
 8003210:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003214:	f000 b838 	b.w	8003288 <__kernel_cos>
 8003218:	4a1a      	ldr	r2, [pc, #104]	; (8003284 <cos+0x88>)
 800321a:	4293      	cmp	r3, r2
 800321c:	dd05      	ble.n	800322a <cos+0x2e>
 800321e:	4602      	mov	r2, r0
 8003220:	460b      	mov	r3, r1
 8003222:	f7fc ff99 	bl	8000158 <__aeabi_dsub>
 8003226:	b007      	add	sp, #28
 8003228:	bd30      	pop	{r4, r5, pc}
 800322a:	aa02      	add	r2, sp, #8
 800322c:	f000 f9a4 	bl	8003578 <__ieee754_rem_pio2>
 8003230:	f000 0003 	and.w	r0, r0, #3
 8003234:	2801      	cmp	r0, #1
 8003236:	d009      	beq.n	800324c <cos+0x50>
 8003238:	2802      	cmp	r0, #2
 800323a:	d011      	beq.n	8003260 <cos+0x64>
 800323c:	b9b8      	cbnz	r0, 800326e <cos+0x72>
 800323e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003242:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003246:	f000 f81f 	bl	8003288 <__kernel_cos>
 800324a:	e7ec      	b.n	8003226 <cos+0x2a>
 800324c:	9000      	str	r0, [sp, #0]
 800324e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003252:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003256:	f000 f8d7 	bl	8003408 <__kernel_sin>
 800325a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800325e:	e7e2      	b.n	8003226 <cos+0x2a>
 8003260:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003264:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003268:	f000 f80e 	bl	8003288 <__kernel_cos>
 800326c:	e7f5      	b.n	800325a <cos+0x5e>
 800326e:	2301      	movs	r3, #1
 8003270:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003274:	9300      	str	r3, [sp, #0]
 8003276:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800327a:	f000 f8c5 	bl	8003408 <__kernel_sin>
 800327e:	e7d2      	b.n	8003226 <cos+0x2a>
 8003280:	3fe921fb 	.word	0x3fe921fb
 8003284:	7fefffff 	.word	0x7fefffff

08003288 <__kernel_cos>:
 8003288:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800328c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8003290:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8003294:	4680      	mov	r8, r0
 8003296:	460f      	mov	r7, r1
 8003298:	e9cd 2300 	strd	r2, r3, [sp]
 800329c:	da04      	bge.n	80032a8 <__kernel_cos+0x20>
 800329e:	f7fd fbad 	bl	80009fc <__aeabi_d2iz>
 80032a2:	2800      	cmp	r0, #0
 80032a4:	f000 8086 	beq.w	80033b4 <__kernel_cos+0x12c>
 80032a8:	4642      	mov	r2, r8
 80032aa:	463b      	mov	r3, r7
 80032ac:	4640      	mov	r0, r8
 80032ae:	4639      	mov	r1, r7
 80032b0:	f7fd f90a 	bl	80004c8 <__aeabi_dmul>
 80032b4:	2200      	movs	r2, #0
 80032b6:	4b4e      	ldr	r3, [pc, #312]	; (80033f0 <__kernel_cos+0x168>)
 80032b8:	4604      	mov	r4, r0
 80032ba:	460d      	mov	r5, r1
 80032bc:	f7fd f904 	bl	80004c8 <__aeabi_dmul>
 80032c0:	a33f      	add	r3, pc, #252	; (adr r3, 80033c0 <__kernel_cos+0x138>)
 80032c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032c6:	4682      	mov	sl, r0
 80032c8:	468b      	mov	fp, r1
 80032ca:	4620      	mov	r0, r4
 80032cc:	4629      	mov	r1, r5
 80032ce:	f7fd f8fb 	bl	80004c8 <__aeabi_dmul>
 80032d2:	a33d      	add	r3, pc, #244	; (adr r3, 80033c8 <__kernel_cos+0x140>)
 80032d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032d8:	f7fc ff40 	bl	800015c <__adddf3>
 80032dc:	4622      	mov	r2, r4
 80032de:	462b      	mov	r3, r5
 80032e0:	f7fd f8f2 	bl	80004c8 <__aeabi_dmul>
 80032e4:	a33a      	add	r3, pc, #232	; (adr r3, 80033d0 <__kernel_cos+0x148>)
 80032e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ea:	f7fc ff35 	bl	8000158 <__aeabi_dsub>
 80032ee:	4622      	mov	r2, r4
 80032f0:	462b      	mov	r3, r5
 80032f2:	f7fd f8e9 	bl	80004c8 <__aeabi_dmul>
 80032f6:	a338      	add	r3, pc, #224	; (adr r3, 80033d8 <__kernel_cos+0x150>)
 80032f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032fc:	f7fc ff2e 	bl	800015c <__adddf3>
 8003300:	4622      	mov	r2, r4
 8003302:	462b      	mov	r3, r5
 8003304:	f7fd f8e0 	bl	80004c8 <__aeabi_dmul>
 8003308:	a335      	add	r3, pc, #212	; (adr r3, 80033e0 <__kernel_cos+0x158>)
 800330a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800330e:	f7fc ff23 	bl	8000158 <__aeabi_dsub>
 8003312:	4622      	mov	r2, r4
 8003314:	462b      	mov	r3, r5
 8003316:	f7fd f8d7 	bl	80004c8 <__aeabi_dmul>
 800331a:	a333      	add	r3, pc, #204	; (adr r3, 80033e8 <__kernel_cos+0x160>)
 800331c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003320:	f7fc ff1c 	bl	800015c <__adddf3>
 8003324:	4622      	mov	r2, r4
 8003326:	462b      	mov	r3, r5
 8003328:	f7fd f8ce 	bl	80004c8 <__aeabi_dmul>
 800332c:	4622      	mov	r2, r4
 800332e:	462b      	mov	r3, r5
 8003330:	f7fd f8ca 	bl	80004c8 <__aeabi_dmul>
 8003334:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003338:	4604      	mov	r4, r0
 800333a:	460d      	mov	r5, r1
 800333c:	4640      	mov	r0, r8
 800333e:	4639      	mov	r1, r7
 8003340:	f7fd f8c2 	bl	80004c8 <__aeabi_dmul>
 8003344:	460b      	mov	r3, r1
 8003346:	4602      	mov	r2, r0
 8003348:	4629      	mov	r1, r5
 800334a:	4620      	mov	r0, r4
 800334c:	f7fc ff04 	bl	8000158 <__aeabi_dsub>
 8003350:	4b28      	ldr	r3, [pc, #160]	; (80033f4 <__kernel_cos+0x16c>)
 8003352:	4680      	mov	r8, r0
 8003354:	429e      	cmp	r6, r3
 8003356:	4689      	mov	r9, r1
 8003358:	dc0e      	bgt.n	8003378 <__kernel_cos+0xf0>
 800335a:	4602      	mov	r2, r0
 800335c:	460b      	mov	r3, r1
 800335e:	4650      	mov	r0, sl
 8003360:	4659      	mov	r1, fp
 8003362:	f7fc fef9 	bl	8000158 <__aeabi_dsub>
 8003366:	4602      	mov	r2, r0
 8003368:	2000      	movs	r0, #0
 800336a:	460b      	mov	r3, r1
 800336c:	4922      	ldr	r1, [pc, #136]	; (80033f8 <__kernel_cos+0x170>)
 800336e:	f7fc fef3 	bl	8000158 <__aeabi_dsub>
 8003372:	b003      	add	sp, #12
 8003374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003378:	2400      	movs	r4, #0
 800337a:	4b20      	ldr	r3, [pc, #128]	; (80033fc <__kernel_cos+0x174>)
 800337c:	4622      	mov	r2, r4
 800337e:	429e      	cmp	r6, r3
 8003380:	bfcc      	ite	gt
 8003382:	4d1f      	ldrgt	r5, [pc, #124]	; (8003400 <__kernel_cos+0x178>)
 8003384:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8003388:	462b      	mov	r3, r5
 800338a:	2000      	movs	r0, #0
 800338c:	491a      	ldr	r1, [pc, #104]	; (80033f8 <__kernel_cos+0x170>)
 800338e:	f7fc fee3 	bl	8000158 <__aeabi_dsub>
 8003392:	4622      	mov	r2, r4
 8003394:	4606      	mov	r6, r0
 8003396:	460f      	mov	r7, r1
 8003398:	462b      	mov	r3, r5
 800339a:	4650      	mov	r0, sl
 800339c:	4659      	mov	r1, fp
 800339e:	f7fc fedb 	bl	8000158 <__aeabi_dsub>
 80033a2:	4642      	mov	r2, r8
 80033a4:	464b      	mov	r3, r9
 80033a6:	f7fc fed7 	bl	8000158 <__aeabi_dsub>
 80033aa:	4602      	mov	r2, r0
 80033ac:	460b      	mov	r3, r1
 80033ae:	4630      	mov	r0, r6
 80033b0:	4639      	mov	r1, r7
 80033b2:	e7dc      	b.n	800336e <__kernel_cos+0xe6>
 80033b4:	2000      	movs	r0, #0
 80033b6:	4910      	ldr	r1, [pc, #64]	; (80033f8 <__kernel_cos+0x170>)
 80033b8:	e7db      	b.n	8003372 <__kernel_cos+0xea>
 80033ba:	bf00      	nop
 80033bc:	f3af 8000 	nop.w
 80033c0:	be8838d4 	.word	0xbe8838d4
 80033c4:	bda8fae9 	.word	0xbda8fae9
 80033c8:	bdb4b1c4 	.word	0xbdb4b1c4
 80033cc:	3e21ee9e 	.word	0x3e21ee9e
 80033d0:	809c52ad 	.word	0x809c52ad
 80033d4:	3e927e4f 	.word	0x3e927e4f
 80033d8:	19cb1590 	.word	0x19cb1590
 80033dc:	3efa01a0 	.word	0x3efa01a0
 80033e0:	16c15177 	.word	0x16c15177
 80033e4:	3f56c16c 	.word	0x3f56c16c
 80033e8:	5555554c 	.word	0x5555554c
 80033ec:	3fa55555 	.word	0x3fa55555
 80033f0:	3fe00000 	.word	0x3fe00000
 80033f4:	3fd33332 	.word	0x3fd33332
 80033f8:	3ff00000 	.word	0x3ff00000
 80033fc:	3fe90000 	.word	0x3fe90000
 8003400:	3fd20000 	.word	0x3fd20000
 8003404:	00000000 	.word	0x00000000

08003408 <__kernel_sin>:
 8003408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800340c:	b086      	sub	sp, #24
 800340e:	e9cd 2300 	strd	r2, r3, [sp]
 8003412:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003416:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800341a:	4682      	mov	sl, r0
 800341c:	460c      	mov	r4, r1
 800341e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8003420:	da03      	bge.n	800342a <__kernel_sin+0x22>
 8003422:	f7fd faeb 	bl	80009fc <__aeabi_d2iz>
 8003426:	2800      	cmp	r0, #0
 8003428:	d050      	beq.n	80034cc <__kernel_sin+0xc4>
 800342a:	4652      	mov	r2, sl
 800342c:	4623      	mov	r3, r4
 800342e:	4650      	mov	r0, sl
 8003430:	4621      	mov	r1, r4
 8003432:	f7fd f849 	bl	80004c8 <__aeabi_dmul>
 8003436:	4606      	mov	r6, r0
 8003438:	460f      	mov	r7, r1
 800343a:	4602      	mov	r2, r0
 800343c:	460b      	mov	r3, r1
 800343e:	4650      	mov	r0, sl
 8003440:	4621      	mov	r1, r4
 8003442:	f7fd f841 	bl	80004c8 <__aeabi_dmul>
 8003446:	a33e      	add	r3, pc, #248	; (adr r3, 8003540 <__kernel_sin+0x138>)
 8003448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800344c:	4680      	mov	r8, r0
 800344e:	4689      	mov	r9, r1
 8003450:	4630      	mov	r0, r6
 8003452:	4639      	mov	r1, r7
 8003454:	f7fd f838 	bl	80004c8 <__aeabi_dmul>
 8003458:	a33b      	add	r3, pc, #236	; (adr r3, 8003548 <__kernel_sin+0x140>)
 800345a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800345e:	f7fc fe7b 	bl	8000158 <__aeabi_dsub>
 8003462:	4632      	mov	r2, r6
 8003464:	463b      	mov	r3, r7
 8003466:	f7fd f82f 	bl	80004c8 <__aeabi_dmul>
 800346a:	a339      	add	r3, pc, #228	; (adr r3, 8003550 <__kernel_sin+0x148>)
 800346c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003470:	f7fc fe74 	bl	800015c <__adddf3>
 8003474:	4632      	mov	r2, r6
 8003476:	463b      	mov	r3, r7
 8003478:	f7fd f826 	bl	80004c8 <__aeabi_dmul>
 800347c:	a336      	add	r3, pc, #216	; (adr r3, 8003558 <__kernel_sin+0x150>)
 800347e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003482:	f7fc fe69 	bl	8000158 <__aeabi_dsub>
 8003486:	4632      	mov	r2, r6
 8003488:	463b      	mov	r3, r7
 800348a:	f7fd f81d 	bl	80004c8 <__aeabi_dmul>
 800348e:	a334      	add	r3, pc, #208	; (adr r3, 8003560 <__kernel_sin+0x158>)
 8003490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003494:	f7fc fe62 	bl	800015c <__adddf3>
 8003498:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800349c:	b9dd      	cbnz	r5, 80034d6 <__kernel_sin+0xce>
 800349e:	4602      	mov	r2, r0
 80034a0:	460b      	mov	r3, r1
 80034a2:	4630      	mov	r0, r6
 80034a4:	4639      	mov	r1, r7
 80034a6:	f7fd f80f 	bl	80004c8 <__aeabi_dmul>
 80034aa:	a32f      	add	r3, pc, #188	; (adr r3, 8003568 <__kernel_sin+0x160>)
 80034ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b0:	f7fc fe52 	bl	8000158 <__aeabi_dsub>
 80034b4:	4642      	mov	r2, r8
 80034b6:	464b      	mov	r3, r9
 80034b8:	f7fd f806 	bl	80004c8 <__aeabi_dmul>
 80034bc:	4602      	mov	r2, r0
 80034be:	460b      	mov	r3, r1
 80034c0:	4650      	mov	r0, sl
 80034c2:	4621      	mov	r1, r4
 80034c4:	f7fc fe4a 	bl	800015c <__adddf3>
 80034c8:	4682      	mov	sl, r0
 80034ca:	460c      	mov	r4, r1
 80034cc:	4650      	mov	r0, sl
 80034ce:	4621      	mov	r1, r4
 80034d0:	b006      	add	sp, #24
 80034d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034d6:	2200      	movs	r2, #0
 80034d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80034dc:	4b24      	ldr	r3, [pc, #144]	; (8003570 <__kernel_sin+0x168>)
 80034de:	f7fc fff3 	bl	80004c8 <__aeabi_dmul>
 80034e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80034e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80034ea:	4640      	mov	r0, r8
 80034ec:	4649      	mov	r1, r9
 80034ee:	f7fc ffeb 	bl	80004c8 <__aeabi_dmul>
 80034f2:	4602      	mov	r2, r0
 80034f4:	460b      	mov	r3, r1
 80034f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80034fa:	f7fc fe2d 	bl	8000158 <__aeabi_dsub>
 80034fe:	4632      	mov	r2, r6
 8003500:	463b      	mov	r3, r7
 8003502:	f7fc ffe1 	bl	80004c8 <__aeabi_dmul>
 8003506:	e9dd 2300 	ldrd	r2, r3, [sp]
 800350a:	f7fc fe25 	bl	8000158 <__aeabi_dsub>
 800350e:	a316      	add	r3, pc, #88	; (adr r3, 8003568 <__kernel_sin+0x160>)
 8003510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003514:	4606      	mov	r6, r0
 8003516:	460f      	mov	r7, r1
 8003518:	4640      	mov	r0, r8
 800351a:	4649      	mov	r1, r9
 800351c:	f7fc ffd4 	bl	80004c8 <__aeabi_dmul>
 8003520:	4602      	mov	r2, r0
 8003522:	460b      	mov	r3, r1
 8003524:	4630      	mov	r0, r6
 8003526:	4639      	mov	r1, r7
 8003528:	f7fc fe18 	bl	800015c <__adddf3>
 800352c:	4602      	mov	r2, r0
 800352e:	460b      	mov	r3, r1
 8003530:	4650      	mov	r0, sl
 8003532:	4621      	mov	r1, r4
 8003534:	f7fc fe10 	bl	8000158 <__aeabi_dsub>
 8003538:	e7c6      	b.n	80034c8 <__kernel_sin+0xc0>
 800353a:	bf00      	nop
 800353c:	f3af 8000 	nop.w
 8003540:	5acfd57c 	.word	0x5acfd57c
 8003544:	3de5d93a 	.word	0x3de5d93a
 8003548:	8a2b9ceb 	.word	0x8a2b9ceb
 800354c:	3e5ae5e6 	.word	0x3e5ae5e6
 8003550:	57b1fe7d 	.word	0x57b1fe7d
 8003554:	3ec71de3 	.word	0x3ec71de3
 8003558:	19c161d5 	.word	0x19c161d5
 800355c:	3f2a01a0 	.word	0x3f2a01a0
 8003560:	1110f8a6 	.word	0x1110f8a6
 8003564:	3f811111 	.word	0x3f811111
 8003568:	55555549 	.word	0x55555549
 800356c:	3fc55555 	.word	0x3fc55555
 8003570:	3fe00000 	.word	0x3fe00000
 8003574:	00000000 	.word	0x00000000

08003578 <__ieee754_rem_pio2>:
 8003578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800357c:	4614      	mov	r4, r2
 800357e:	4ac2      	ldr	r2, [pc, #776]	; (8003888 <__ieee754_rem_pio2+0x310>)
 8003580:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 8003584:	b08d      	sub	sp, #52	; 0x34
 8003586:	4592      	cmp	sl, r2
 8003588:	9104      	str	r1, [sp, #16]
 800358a:	dc07      	bgt.n	800359c <__ieee754_rem_pio2+0x24>
 800358c:	2200      	movs	r2, #0
 800358e:	2300      	movs	r3, #0
 8003590:	e9c4 0100 	strd	r0, r1, [r4]
 8003594:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8003598:	2500      	movs	r5, #0
 800359a:	e024      	b.n	80035e6 <__ieee754_rem_pio2+0x6e>
 800359c:	4abb      	ldr	r2, [pc, #748]	; (800388c <__ieee754_rem_pio2+0x314>)
 800359e:	4592      	cmp	sl, r2
 80035a0:	dc72      	bgt.n	8003688 <__ieee754_rem_pio2+0x110>
 80035a2:	9b04      	ldr	r3, [sp, #16]
 80035a4:	4dba      	ldr	r5, [pc, #744]	; (8003890 <__ieee754_rem_pio2+0x318>)
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	a3a9      	add	r3, pc, #676	; (adr r3, 8003850 <__ieee754_rem_pio2+0x2d8>)
 80035aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ae:	dd36      	ble.n	800361e <__ieee754_rem_pio2+0xa6>
 80035b0:	f7fc fdd2 	bl	8000158 <__aeabi_dsub>
 80035b4:	45aa      	cmp	sl, r5
 80035b6:	4606      	mov	r6, r0
 80035b8:	460f      	mov	r7, r1
 80035ba:	d018      	beq.n	80035ee <__ieee754_rem_pio2+0x76>
 80035bc:	a3a6      	add	r3, pc, #664	; (adr r3, 8003858 <__ieee754_rem_pio2+0x2e0>)
 80035be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c2:	f7fc fdc9 	bl	8000158 <__aeabi_dsub>
 80035c6:	4602      	mov	r2, r0
 80035c8:	460b      	mov	r3, r1
 80035ca:	4630      	mov	r0, r6
 80035cc:	e9c4 2300 	strd	r2, r3, [r4]
 80035d0:	4639      	mov	r1, r7
 80035d2:	f7fc fdc1 	bl	8000158 <__aeabi_dsub>
 80035d6:	a3a0      	add	r3, pc, #640	; (adr r3, 8003858 <__ieee754_rem_pio2+0x2e0>)
 80035d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035dc:	f7fc fdbc 	bl	8000158 <__aeabi_dsub>
 80035e0:	2501      	movs	r5, #1
 80035e2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80035e6:	4628      	mov	r0, r5
 80035e8:	b00d      	add	sp, #52	; 0x34
 80035ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035ee:	a39c      	add	r3, pc, #624	; (adr r3, 8003860 <__ieee754_rem_pio2+0x2e8>)
 80035f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035f4:	f7fc fdb0 	bl	8000158 <__aeabi_dsub>
 80035f8:	a39b      	add	r3, pc, #620	; (adr r3, 8003868 <__ieee754_rem_pio2+0x2f0>)
 80035fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035fe:	4606      	mov	r6, r0
 8003600:	460f      	mov	r7, r1
 8003602:	f7fc fda9 	bl	8000158 <__aeabi_dsub>
 8003606:	4602      	mov	r2, r0
 8003608:	460b      	mov	r3, r1
 800360a:	4630      	mov	r0, r6
 800360c:	e9c4 2300 	strd	r2, r3, [r4]
 8003610:	4639      	mov	r1, r7
 8003612:	f7fc fda1 	bl	8000158 <__aeabi_dsub>
 8003616:	a394      	add	r3, pc, #592	; (adr r3, 8003868 <__ieee754_rem_pio2+0x2f0>)
 8003618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800361c:	e7de      	b.n	80035dc <__ieee754_rem_pio2+0x64>
 800361e:	f7fc fd9d 	bl	800015c <__adddf3>
 8003622:	45aa      	cmp	sl, r5
 8003624:	4606      	mov	r6, r0
 8003626:	460f      	mov	r7, r1
 8003628:	d016      	beq.n	8003658 <__ieee754_rem_pio2+0xe0>
 800362a:	a38b      	add	r3, pc, #556	; (adr r3, 8003858 <__ieee754_rem_pio2+0x2e0>)
 800362c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003630:	f7fc fd94 	bl	800015c <__adddf3>
 8003634:	4602      	mov	r2, r0
 8003636:	460b      	mov	r3, r1
 8003638:	4630      	mov	r0, r6
 800363a:	e9c4 2300 	strd	r2, r3, [r4]
 800363e:	4639      	mov	r1, r7
 8003640:	f7fc fd8a 	bl	8000158 <__aeabi_dsub>
 8003644:	a384      	add	r3, pc, #528	; (adr r3, 8003858 <__ieee754_rem_pio2+0x2e0>)
 8003646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800364a:	f7fc fd87 	bl	800015c <__adddf3>
 800364e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003652:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003656:	e7c6      	b.n	80035e6 <__ieee754_rem_pio2+0x6e>
 8003658:	a381      	add	r3, pc, #516	; (adr r3, 8003860 <__ieee754_rem_pio2+0x2e8>)
 800365a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800365e:	f7fc fd7d 	bl	800015c <__adddf3>
 8003662:	a381      	add	r3, pc, #516	; (adr r3, 8003868 <__ieee754_rem_pio2+0x2f0>)
 8003664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003668:	4606      	mov	r6, r0
 800366a:	460f      	mov	r7, r1
 800366c:	f7fc fd76 	bl	800015c <__adddf3>
 8003670:	4602      	mov	r2, r0
 8003672:	460b      	mov	r3, r1
 8003674:	4630      	mov	r0, r6
 8003676:	e9c4 2300 	strd	r2, r3, [r4]
 800367a:	4639      	mov	r1, r7
 800367c:	f7fc fd6c 	bl	8000158 <__aeabi_dsub>
 8003680:	a379      	add	r3, pc, #484	; (adr r3, 8003868 <__ieee754_rem_pio2+0x2f0>)
 8003682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003686:	e7e0      	b.n	800364a <__ieee754_rem_pio2+0xd2>
 8003688:	4a82      	ldr	r2, [pc, #520]	; (8003894 <__ieee754_rem_pio2+0x31c>)
 800368a:	4592      	cmp	sl, r2
 800368c:	f300 80d4 	bgt.w	8003838 <__ieee754_rem_pio2+0x2c0>
 8003690:	f000 f966 	bl	8003960 <fabs>
 8003694:	a376      	add	r3, pc, #472	; (adr r3, 8003870 <__ieee754_rem_pio2+0x2f8>)
 8003696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800369a:	4606      	mov	r6, r0
 800369c:	460f      	mov	r7, r1
 800369e:	f7fc ff13 	bl	80004c8 <__aeabi_dmul>
 80036a2:	2200      	movs	r2, #0
 80036a4:	4b7c      	ldr	r3, [pc, #496]	; (8003898 <__ieee754_rem_pio2+0x320>)
 80036a6:	f7fc fd59 	bl	800015c <__adddf3>
 80036aa:	f7fd f9a7 	bl	80009fc <__aeabi_d2iz>
 80036ae:	4605      	mov	r5, r0
 80036b0:	f7fc fea0 	bl	80003f4 <__aeabi_i2d>
 80036b4:	4602      	mov	r2, r0
 80036b6:	460b      	mov	r3, r1
 80036b8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80036bc:	a364      	add	r3, pc, #400	; (adr r3, 8003850 <__ieee754_rem_pio2+0x2d8>)
 80036be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036c2:	f7fc ff01 	bl	80004c8 <__aeabi_dmul>
 80036c6:	4602      	mov	r2, r0
 80036c8:	460b      	mov	r3, r1
 80036ca:	4630      	mov	r0, r6
 80036cc:	4639      	mov	r1, r7
 80036ce:	f7fc fd43 	bl	8000158 <__aeabi_dsub>
 80036d2:	a361      	add	r3, pc, #388	; (adr r3, 8003858 <__ieee754_rem_pio2+0x2e0>)
 80036d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d8:	4680      	mov	r8, r0
 80036da:	4689      	mov	r9, r1
 80036dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80036e0:	f7fc fef2 	bl	80004c8 <__aeabi_dmul>
 80036e4:	2d1f      	cmp	r5, #31
 80036e6:	4606      	mov	r6, r0
 80036e8:	460f      	mov	r7, r1
 80036ea:	dc0e      	bgt.n	800370a <__ieee754_rem_pio2+0x192>
 80036ec:	4b6b      	ldr	r3, [pc, #428]	; (800389c <__ieee754_rem_pio2+0x324>)
 80036ee:	1e6a      	subs	r2, r5, #1
 80036f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036f4:	4553      	cmp	r3, sl
 80036f6:	d008      	beq.n	800370a <__ieee754_rem_pio2+0x192>
 80036f8:	4632      	mov	r2, r6
 80036fa:	463b      	mov	r3, r7
 80036fc:	4640      	mov	r0, r8
 80036fe:	4649      	mov	r1, r9
 8003700:	f7fc fd2a 	bl	8000158 <__aeabi_dsub>
 8003704:	e9c4 0100 	strd	r0, r1, [r4]
 8003708:	e012      	b.n	8003730 <__ieee754_rem_pio2+0x1b8>
 800370a:	463b      	mov	r3, r7
 800370c:	4632      	mov	r2, r6
 800370e:	4640      	mov	r0, r8
 8003710:	4649      	mov	r1, r9
 8003712:	f7fc fd21 	bl	8000158 <__aeabi_dsub>
 8003716:	ea4f 532a 	mov.w	r3, sl, asr #20
 800371a:	9305      	str	r3, [sp, #20]
 800371c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003720:	ebc3 531a 	rsb	r3, r3, sl, lsr #20
 8003724:	2b10      	cmp	r3, #16
 8003726:	dc1f      	bgt.n	8003768 <__ieee754_rem_pio2+0x1f0>
 8003728:	4602      	mov	r2, r0
 800372a:	460b      	mov	r3, r1
 800372c:	e9c4 2300 	strd	r2, r3, [r4]
 8003730:	e9d4 2a00 	ldrd	r2, sl, [r4]
 8003734:	4640      	mov	r0, r8
 8003736:	4653      	mov	r3, sl
 8003738:	4649      	mov	r1, r9
 800373a:	f7fc fd0d 	bl	8000158 <__aeabi_dsub>
 800373e:	4632      	mov	r2, r6
 8003740:	463b      	mov	r3, r7
 8003742:	f7fc fd09 	bl	8000158 <__aeabi_dsub>
 8003746:	460b      	mov	r3, r1
 8003748:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800374c:	9904      	ldr	r1, [sp, #16]
 800374e:	4602      	mov	r2, r0
 8003750:	2900      	cmp	r1, #0
 8003752:	f6bf af48 	bge.w	80035e6 <__ieee754_rem_pio2+0x6e>
 8003756:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 800375a:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800375e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003762:	60e3      	str	r3, [r4, #12]
 8003764:	426d      	negs	r5, r5
 8003766:	e73e      	b.n	80035e6 <__ieee754_rem_pio2+0x6e>
 8003768:	a33d      	add	r3, pc, #244	; (adr r3, 8003860 <__ieee754_rem_pio2+0x2e8>)
 800376a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800376e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003772:	f7fc fea9 	bl	80004c8 <__aeabi_dmul>
 8003776:	4606      	mov	r6, r0
 8003778:	460f      	mov	r7, r1
 800377a:	4602      	mov	r2, r0
 800377c:	460b      	mov	r3, r1
 800377e:	4640      	mov	r0, r8
 8003780:	4649      	mov	r1, r9
 8003782:	f7fc fce9 	bl	8000158 <__aeabi_dsub>
 8003786:	4602      	mov	r2, r0
 8003788:	460b      	mov	r3, r1
 800378a:	4682      	mov	sl, r0
 800378c:	468b      	mov	fp, r1
 800378e:	4640      	mov	r0, r8
 8003790:	4649      	mov	r1, r9
 8003792:	f7fc fce1 	bl	8000158 <__aeabi_dsub>
 8003796:	4632      	mov	r2, r6
 8003798:	463b      	mov	r3, r7
 800379a:	f7fc fcdd 	bl	8000158 <__aeabi_dsub>
 800379e:	a332      	add	r3, pc, #200	; (adr r3, 8003868 <__ieee754_rem_pio2+0x2f0>)
 80037a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037a4:	4606      	mov	r6, r0
 80037a6:	460f      	mov	r7, r1
 80037a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80037ac:	f7fc fe8c 	bl	80004c8 <__aeabi_dmul>
 80037b0:	4632      	mov	r2, r6
 80037b2:	463b      	mov	r3, r7
 80037b4:	f7fc fcd0 	bl	8000158 <__aeabi_dsub>
 80037b8:	4602      	mov	r2, r0
 80037ba:	460b      	mov	r3, r1
 80037bc:	4606      	mov	r6, r0
 80037be:	460f      	mov	r7, r1
 80037c0:	4650      	mov	r0, sl
 80037c2:	4659      	mov	r1, fp
 80037c4:	f7fc fcc8 	bl	8000158 <__aeabi_dsub>
 80037c8:	9a05      	ldr	r2, [sp, #20]
 80037ca:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	2b31      	cmp	r3, #49	; 0x31
 80037d2:	dc06      	bgt.n	80037e2 <__ieee754_rem_pio2+0x26a>
 80037d4:	4602      	mov	r2, r0
 80037d6:	460b      	mov	r3, r1
 80037d8:	46d0      	mov	r8, sl
 80037da:	46d9      	mov	r9, fp
 80037dc:	e9c4 2300 	strd	r2, r3, [r4]
 80037e0:	e7a6      	b.n	8003730 <__ieee754_rem_pio2+0x1b8>
 80037e2:	a325      	add	r3, pc, #148	; (adr r3, 8003878 <__ieee754_rem_pio2+0x300>)
 80037e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80037ec:	f7fc fe6c 	bl	80004c8 <__aeabi_dmul>
 80037f0:	4606      	mov	r6, r0
 80037f2:	460f      	mov	r7, r1
 80037f4:	4602      	mov	r2, r0
 80037f6:	460b      	mov	r3, r1
 80037f8:	4650      	mov	r0, sl
 80037fa:	4659      	mov	r1, fp
 80037fc:	f7fc fcac 	bl	8000158 <__aeabi_dsub>
 8003800:	4602      	mov	r2, r0
 8003802:	460b      	mov	r3, r1
 8003804:	4680      	mov	r8, r0
 8003806:	4689      	mov	r9, r1
 8003808:	4650      	mov	r0, sl
 800380a:	4659      	mov	r1, fp
 800380c:	f7fc fca4 	bl	8000158 <__aeabi_dsub>
 8003810:	4632      	mov	r2, r6
 8003812:	463b      	mov	r3, r7
 8003814:	f7fc fca0 	bl	8000158 <__aeabi_dsub>
 8003818:	a319      	add	r3, pc, #100	; (adr r3, 8003880 <__ieee754_rem_pio2+0x308>)
 800381a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800381e:	4606      	mov	r6, r0
 8003820:	460f      	mov	r7, r1
 8003822:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003826:	f7fc fe4f 	bl	80004c8 <__aeabi_dmul>
 800382a:	4632      	mov	r2, r6
 800382c:	463b      	mov	r3, r7
 800382e:	f7fc fc93 	bl	8000158 <__aeabi_dsub>
 8003832:	4606      	mov	r6, r0
 8003834:	460f      	mov	r7, r1
 8003836:	e75f      	b.n	80036f8 <__ieee754_rem_pio2+0x180>
 8003838:	4a19      	ldr	r2, [pc, #100]	; (80038a0 <__ieee754_rem_pio2+0x328>)
 800383a:	4592      	cmp	sl, r2
 800383c:	dd32      	ble.n	80038a4 <__ieee754_rem_pio2+0x32c>
 800383e:	4602      	mov	r2, r0
 8003840:	460b      	mov	r3, r1
 8003842:	f7fc fc89 	bl	8000158 <__aeabi_dsub>
 8003846:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800384a:	e9c4 0100 	strd	r0, r1, [r4]
 800384e:	e6a3      	b.n	8003598 <__ieee754_rem_pio2+0x20>
 8003850:	54400000 	.word	0x54400000
 8003854:	3ff921fb 	.word	0x3ff921fb
 8003858:	1a626331 	.word	0x1a626331
 800385c:	3dd0b461 	.word	0x3dd0b461
 8003860:	1a600000 	.word	0x1a600000
 8003864:	3dd0b461 	.word	0x3dd0b461
 8003868:	2e037073 	.word	0x2e037073
 800386c:	3ba3198a 	.word	0x3ba3198a
 8003870:	6dc9c883 	.word	0x6dc9c883
 8003874:	3fe45f30 	.word	0x3fe45f30
 8003878:	2e000000 	.word	0x2e000000
 800387c:	3ba3198a 	.word	0x3ba3198a
 8003880:	252049c1 	.word	0x252049c1
 8003884:	397b839a 	.word	0x397b839a
 8003888:	3fe921fb 	.word	0x3fe921fb
 800388c:	4002d97b 	.word	0x4002d97b
 8003890:	3ff921fb 	.word	0x3ff921fb
 8003894:	413921fb 	.word	0x413921fb
 8003898:	3fe00000 	.word	0x3fe00000
 800389c:	0800421c 	.word	0x0800421c
 80038a0:	7fefffff 	.word	0x7fefffff
 80038a4:	ea4f 552a 	mov.w	r5, sl, asr #20
 80038a8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80038ac:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 80038b0:	460f      	mov	r7, r1
 80038b2:	4606      	mov	r6, r0
 80038b4:	f7fd f8a2 	bl	80009fc <__aeabi_d2iz>
 80038b8:	f7fc fd9c 	bl	80003f4 <__aeabi_i2d>
 80038bc:	4602      	mov	r2, r0
 80038be:	460b      	mov	r3, r1
 80038c0:	4630      	mov	r0, r6
 80038c2:	4639      	mov	r1, r7
 80038c4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80038c8:	f7fc fc46 	bl	8000158 <__aeabi_dsub>
 80038cc:	2200      	movs	r2, #0
 80038ce:	4b22      	ldr	r3, [pc, #136]	; (8003958 <__ieee754_rem_pio2+0x3e0>)
 80038d0:	f7fc fdfa 	bl	80004c8 <__aeabi_dmul>
 80038d4:	460f      	mov	r7, r1
 80038d6:	4606      	mov	r6, r0
 80038d8:	f7fd f890 	bl	80009fc <__aeabi_d2iz>
 80038dc:	f7fc fd8a 	bl	80003f4 <__aeabi_i2d>
 80038e0:	4602      	mov	r2, r0
 80038e2:	460b      	mov	r3, r1
 80038e4:	4630      	mov	r0, r6
 80038e6:	4639      	mov	r1, r7
 80038e8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80038ec:	f7fc fc34 	bl	8000158 <__aeabi_dsub>
 80038f0:	2200      	movs	r2, #0
 80038f2:	4b19      	ldr	r3, [pc, #100]	; (8003958 <__ieee754_rem_pio2+0x3e0>)
 80038f4:	f7fc fde8 	bl	80004c8 <__aeabi_dmul>
 80038f8:	f04f 0803 	mov.w	r8, #3
 80038fc:	2600      	movs	r6, #0
 80038fe:	2700      	movs	r7, #0
 8003900:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003904:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8003908:	4632      	mov	r2, r6
 800390a:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800390e:	463b      	mov	r3, r7
 8003910:	46c2      	mov	sl, r8
 8003912:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8003916:	f7fd f83f 	bl	8000998 <__aeabi_dcmpeq>
 800391a:	2800      	cmp	r0, #0
 800391c:	d1f4      	bne.n	8003908 <__ieee754_rem_pio2+0x390>
 800391e:	4b0f      	ldr	r3, [pc, #60]	; (800395c <__ieee754_rem_pio2+0x3e4>)
 8003920:	462a      	mov	r2, r5
 8003922:	9301      	str	r3, [sp, #4]
 8003924:	2302      	movs	r3, #2
 8003926:	4621      	mov	r1, r4
 8003928:	9300      	str	r3, [sp, #0]
 800392a:	a806      	add	r0, sp, #24
 800392c:	4653      	mov	r3, sl
 800392e:	f000 f81b 	bl	8003968 <__kernel_rem_pio2>
 8003932:	9b04      	ldr	r3, [sp, #16]
 8003934:	4605      	mov	r5, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	f6bf ae55 	bge.w	80035e6 <__ieee754_rem_pio2+0x6e>
 800393c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8003940:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003944:	e9c4 2300 	strd	r2, r3, [r4]
 8003948:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800394c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003950:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8003954:	e706      	b.n	8003764 <__ieee754_rem_pio2+0x1ec>
 8003956:	bf00      	nop
 8003958:	41700000 	.word	0x41700000
 800395c:	0800429c 	.word	0x0800429c

08003960 <fabs>:
 8003960:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003964:	4619      	mov	r1, r3
 8003966:	4770      	bx	lr

08003968 <__kernel_rem_pio2>:
 8003968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800396c:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8003970:	9308      	str	r3, [sp, #32]
 8003972:	9106      	str	r1, [sp, #24]
 8003974:	4bb6      	ldr	r3, [pc, #728]	; (8003c50 <__kernel_rem_pio2+0x2e8>)
 8003976:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8003978:	f112 0f14 	cmn.w	r2, #20
 800397c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003980:	bfa8      	it	ge
 8003982:	1ed4      	subge	r4, r2, #3
 8003984:	9302      	str	r3, [sp, #8]
 8003986:	9b08      	ldr	r3, [sp, #32]
 8003988:	bfb8      	it	lt
 800398a:	2400      	movlt	r4, #0
 800398c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8003990:	9307      	str	r3, [sp, #28]
 8003992:	bfa4      	itt	ge
 8003994:	2318      	movge	r3, #24
 8003996:	fb94 f4f3 	sdivge	r4, r4, r3
 800399a:	f06f 0317 	mvn.w	r3, #23
 800399e:	fb04 3303 	mla	r3, r4, r3, r3
 80039a2:	eb03 0b02 	add.w	fp, r3, r2
 80039a6:	9a07      	ldr	r2, [sp, #28]
 80039a8:	9b02      	ldr	r3, [sp, #8]
 80039aa:	1aa7      	subs	r7, r4, r2
 80039ac:	eb03 0802 	add.w	r8, r3, r2
 80039b0:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80039b2:	2500      	movs	r5, #0
 80039b4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80039b8:	2200      	movs	r2, #0
 80039ba:	2300      	movs	r3, #0
 80039bc:	9009      	str	r0, [sp, #36]	; 0x24
 80039be:	ae20      	add	r6, sp, #128	; 0x80
 80039c0:	4545      	cmp	r5, r8
 80039c2:	dd14      	ble.n	80039ee <__kernel_rem_pio2+0x86>
 80039c4:	f04f 0800 	mov.w	r8, #0
 80039c8:	9a08      	ldr	r2, [sp, #32]
 80039ca:	ab20      	add	r3, sp, #128	; 0x80
 80039cc:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 80039d0:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 80039d4:	9b02      	ldr	r3, [sp, #8]
 80039d6:	4598      	cmp	r8, r3
 80039d8:	dc35      	bgt.n	8003a46 <__kernel_rem_pio2+0xde>
 80039da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80039dc:	2200      	movs	r2, #0
 80039de:	f1a3 0908 	sub.w	r9, r3, #8
 80039e2:	2300      	movs	r3, #0
 80039e4:	462f      	mov	r7, r5
 80039e6:	2600      	movs	r6, #0
 80039e8:	e9cd 2300 	strd	r2, r3, [sp]
 80039ec:	e01f      	b.n	8003a2e <__kernel_rem_pio2+0xc6>
 80039ee:	42ef      	cmn	r7, r5
 80039f0:	d40b      	bmi.n	8003a0a <__kernel_rem_pio2+0xa2>
 80039f2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80039f6:	e9cd 2300 	strd	r2, r3, [sp]
 80039fa:	f7fc fcfb 	bl	80003f4 <__aeabi_i2d>
 80039fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003a02:	e8e6 0102 	strd	r0, r1, [r6], #8
 8003a06:	3501      	adds	r5, #1
 8003a08:	e7da      	b.n	80039c0 <__kernel_rem_pio2+0x58>
 8003a0a:	4610      	mov	r0, r2
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	e7f8      	b.n	8003a02 <__kernel_rem_pio2+0x9a>
 8003a10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a14:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8003a18:	f7fc fd56 	bl	80004c8 <__aeabi_dmul>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	460b      	mov	r3, r1
 8003a20:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003a24:	f7fc fb9a 	bl	800015c <__adddf3>
 8003a28:	e9cd 0100 	strd	r0, r1, [sp]
 8003a2c:	3601      	adds	r6, #1
 8003a2e:	9b07      	ldr	r3, [sp, #28]
 8003a30:	3f08      	subs	r7, #8
 8003a32:	429e      	cmp	r6, r3
 8003a34:	ddec      	ble.n	8003a10 <__kernel_rem_pio2+0xa8>
 8003a36:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003a3a:	f108 0801 	add.w	r8, r8, #1
 8003a3e:	e8ea 2302 	strd	r2, r3, [sl], #8
 8003a42:	3508      	adds	r5, #8
 8003a44:	e7c6      	b.n	80039d4 <__kernel_rem_pio2+0x6c>
 8003a46:	9b02      	ldr	r3, [sp, #8]
 8003a48:	aa0c      	add	r2, sp, #48	; 0x30
 8003a4a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003a4e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003a50:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8003a52:	9e02      	ldr	r6, [sp, #8]
 8003a54:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8003a58:	930a      	str	r3, [sp, #40]	; 0x28
 8003a5a:	ab98      	add	r3, sp, #608	; 0x260
 8003a5c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003a60:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 8003a64:	ab70      	add	r3, sp, #448	; 0x1c0
 8003a66:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 8003a6a:	46d0      	mov	r8, sl
 8003a6c:	46b1      	mov	r9, r6
 8003a6e:	af0c      	add	r7, sp, #48	; 0x30
 8003a70:	9700      	str	r7, [sp, #0]
 8003a72:	f1b9 0f00 	cmp.w	r9, #0
 8003a76:	f1a8 0808 	sub.w	r8, r8, #8
 8003a7a:	dc70      	bgt.n	8003b5e <__kernel_rem_pio2+0x1f6>
 8003a7c:	465a      	mov	r2, fp
 8003a7e:	4620      	mov	r0, r4
 8003a80:	4629      	mov	r1, r5
 8003a82:	f000 fab1 	bl	8003fe8 <scalbn>
 8003a86:	2200      	movs	r2, #0
 8003a88:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8003a8c:	4604      	mov	r4, r0
 8003a8e:	460d      	mov	r5, r1
 8003a90:	f7fc fd1a 	bl	80004c8 <__aeabi_dmul>
 8003a94:	f000 fb24 	bl	80040e0 <floor>
 8003a98:	2200      	movs	r2, #0
 8003a9a:	4b6e      	ldr	r3, [pc, #440]	; (8003c54 <__kernel_rem_pio2+0x2ec>)
 8003a9c:	f7fc fd14 	bl	80004c8 <__aeabi_dmul>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	460b      	mov	r3, r1
 8003aa4:	4620      	mov	r0, r4
 8003aa6:	4629      	mov	r1, r5
 8003aa8:	f7fc fb56 	bl	8000158 <__aeabi_dsub>
 8003aac:	460d      	mov	r5, r1
 8003aae:	4604      	mov	r4, r0
 8003ab0:	f7fc ffa4 	bl	80009fc <__aeabi_d2iz>
 8003ab4:	9004      	str	r0, [sp, #16]
 8003ab6:	f7fc fc9d 	bl	80003f4 <__aeabi_i2d>
 8003aba:	4602      	mov	r2, r0
 8003abc:	460b      	mov	r3, r1
 8003abe:	4620      	mov	r0, r4
 8003ac0:	4629      	mov	r1, r5
 8003ac2:	f7fc fb49 	bl	8000158 <__aeabi_dsub>
 8003ac6:	f1bb 0f00 	cmp.w	fp, #0
 8003aca:	4680      	mov	r8, r0
 8003acc:	4689      	mov	r9, r1
 8003ace:	dd6f      	ble.n	8003bb0 <__kernel_rem_pio2+0x248>
 8003ad0:	1e71      	subs	r1, r6, #1
 8003ad2:	ab0c      	add	r3, sp, #48	; 0x30
 8003ad4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003ad8:	9c04      	ldr	r4, [sp, #16]
 8003ada:	f1cb 0018 	rsb	r0, fp, #24
 8003ade:	fa43 f200 	asr.w	r2, r3, r0
 8003ae2:	4414      	add	r4, r2
 8003ae4:	4082      	lsls	r2, r0
 8003ae6:	1a9b      	subs	r3, r3, r2
 8003ae8:	aa0c      	add	r2, sp, #48	; 0x30
 8003aea:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8003aee:	f1cb 0217 	rsb	r2, fp, #23
 8003af2:	9404      	str	r4, [sp, #16]
 8003af4:	4113      	asrs	r3, r2
 8003af6:	9300      	str	r3, [sp, #0]
 8003af8:	9b00      	ldr	r3, [sp, #0]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	dd66      	ble.n	8003bcc <__kernel_rem_pio2+0x264>
 8003afe:	2200      	movs	r2, #0
 8003b00:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8003b04:	4614      	mov	r4, r2
 8003b06:	9b04      	ldr	r3, [sp, #16]
 8003b08:	3301      	adds	r3, #1
 8003b0a:	9304      	str	r3, [sp, #16]
 8003b0c:	4296      	cmp	r6, r2
 8003b0e:	f300 80ad 	bgt.w	8003c6c <__kernel_rem_pio2+0x304>
 8003b12:	f1bb 0f00 	cmp.w	fp, #0
 8003b16:	dd07      	ble.n	8003b28 <__kernel_rem_pio2+0x1c0>
 8003b18:	f1bb 0f01 	cmp.w	fp, #1
 8003b1c:	f000 80b5 	beq.w	8003c8a <__kernel_rem_pio2+0x322>
 8003b20:	f1bb 0f02 	cmp.w	fp, #2
 8003b24:	f000 80bb 	beq.w	8003c9e <__kernel_rem_pio2+0x336>
 8003b28:	9b00      	ldr	r3, [sp, #0]
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d14e      	bne.n	8003bcc <__kernel_rem_pio2+0x264>
 8003b2e:	4642      	mov	r2, r8
 8003b30:	464b      	mov	r3, r9
 8003b32:	2000      	movs	r0, #0
 8003b34:	4948      	ldr	r1, [pc, #288]	; (8003c58 <__kernel_rem_pio2+0x2f0>)
 8003b36:	f7fc fb0f 	bl	8000158 <__aeabi_dsub>
 8003b3a:	4680      	mov	r8, r0
 8003b3c:	4689      	mov	r9, r1
 8003b3e:	2c00      	cmp	r4, #0
 8003b40:	d044      	beq.n	8003bcc <__kernel_rem_pio2+0x264>
 8003b42:	465a      	mov	r2, fp
 8003b44:	2000      	movs	r0, #0
 8003b46:	4944      	ldr	r1, [pc, #272]	; (8003c58 <__kernel_rem_pio2+0x2f0>)
 8003b48:	f000 fa4e 	bl	8003fe8 <scalbn>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	460b      	mov	r3, r1
 8003b50:	4640      	mov	r0, r8
 8003b52:	4649      	mov	r1, r9
 8003b54:	f7fc fb00 	bl	8000158 <__aeabi_dsub>
 8003b58:	4680      	mov	r8, r0
 8003b5a:	4689      	mov	r9, r1
 8003b5c:	e036      	b.n	8003bcc <__kernel_rem_pio2+0x264>
 8003b5e:	2200      	movs	r2, #0
 8003b60:	4b3e      	ldr	r3, [pc, #248]	; (8003c5c <__kernel_rem_pio2+0x2f4>)
 8003b62:	4620      	mov	r0, r4
 8003b64:	4629      	mov	r1, r5
 8003b66:	f7fc fcaf 	bl	80004c8 <__aeabi_dmul>
 8003b6a:	f7fc ff47 	bl	80009fc <__aeabi_d2iz>
 8003b6e:	f7fc fc41 	bl	80003f4 <__aeabi_i2d>
 8003b72:	4602      	mov	r2, r0
 8003b74:	460b      	mov	r3, r1
 8003b76:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	4b38      	ldr	r3, [pc, #224]	; (8003c60 <__kernel_rem_pio2+0x2f8>)
 8003b7e:	f7fc fca3 	bl	80004c8 <__aeabi_dmul>
 8003b82:	4602      	mov	r2, r0
 8003b84:	460b      	mov	r3, r1
 8003b86:	4620      	mov	r0, r4
 8003b88:	4629      	mov	r1, r5
 8003b8a:	f7fc fae5 	bl	8000158 <__aeabi_dsub>
 8003b8e:	f7fc ff35 	bl	80009fc <__aeabi_d2iz>
 8003b92:	9b00      	ldr	r3, [sp, #0]
 8003b94:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8003b98:	f843 0b04 	str.w	r0, [r3], #4
 8003b9c:	9300      	str	r3, [sp, #0]
 8003b9e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003ba2:	e9d8 2300 	ldrd	r2, r3, [r8]
 8003ba6:	f7fc fad9 	bl	800015c <__adddf3>
 8003baa:	4604      	mov	r4, r0
 8003bac:	460d      	mov	r5, r1
 8003bae:	e760      	b.n	8003a72 <__kernel_rem_pio2+0x10a>
 8003bb0:	d105      	bne.n	8003bbe <__kernel_rem_pio2+0x256>
 8003bb2:	1e73      	subs	r3, r6, #1
 8003bb4:	aa0c      	add	r2, sp, #48	; 0x30
 8003bb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bba:	15db      	asrs	r3, r3, #23
 8003bbc:	e79b      	b.n	8003af6 <__kernel_rem_pio2+0x18e>
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	4b28      	ldr	r3, [pc, #160]	; (8003c64 <__kernel_rem_pio2+0x2fc>)
 8003bc2:	f7fc ff07 	bl	80009d4 <__aeabi_dcmpge>
 8003bc6:	2800      	cmp	r0, #0
 8003bc8:	d13e      	bne.n	8003c48 <__kernel_rem_pio2+0x2e0>
 8003bca:	9000      	str	r0, [sp, #0]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	2300      	movs	r3, #0
 8003bd0:	4640      	mov	r0, r8
 8003bd2:	4649      	mov	r1, r9
 8003bd4:	f7fc fee0 	bl	8000998 <__aeabi_dcmpeq>
 8003bd8:	2800      	cmp	r0, #0
 8003bda:	f000 80b2 	beq.w	8003d42 <__kernel_rem_pio2+0x3da>
 8003bde:	1e74      	subs	r4, r6, #1
 8003be0:	4623      	mov	r3, r4
 8003be2:	2200      	movs	r2, #0
 8003be4:	9902      	ldr	r1, [sp, #8]
 8003be6:	428b      	cmp	r3, r1
 8003be8:	da60      	bge.n	8003cac <__kernel_rem_pio2+0x344>
 8003bea:	2a00      	cmp	r2, #0
 8003bec:	d075      	beq.n	8003cda <__kernel_rem_pio2+0x372>
 8003bee:	ab0c      	add	r3, sp, #48	; 0x30
 8003bf0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8003bf4:	f1ab 0b18 	sub.w	fp, fp, #24
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	f000 80a0 	beq.w	8003d3e <__kernel_rem_pio2+0x3d6>
 8003bfe:	465a      	mov	r2, fp
 8003c00:	2000      	movs	r0, #0
 8003c02:	4915      	ldr	r1, [pc, #84]	; (8003c58 <__kernel_rem_pio2+0x2f0>)
 8003c04:	f000 f9f0 	bl	8003fe8 <scalbn>
 8003c08:	46a2      	mov	sl, r4
 8003c0a:	4606      	mov	r6, r0
 8003c0c:	460f      	mov	r7, r1
 8003c0e:	f04f 0800 	mov.w	r8, #0
 8003c12:	ab70      	add	r3, sp, #448	; 0x1c0
 8003c14:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8003c5c <__kernel_rem_pio2+0x2f4>
 8003c18:	00e5      	lsls	r5, r4, #3
 8003c1a:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 8003c1e:	f1ba 0f00 	cmp.w	sl, #0
 8003c22:	f280 80c4 	bge.w	8003dae <__kernel_rem_pio2+0x446>
 8003c26:	4626      	mov	r6, r4
 8003c28:	2e00      	cmp	r6, #0
 8003c2a:	f2c0 80f6 	blt.w	8003e1a <__kernel_rem_pio2+0x4b2>
 8003c2e:	4b0e      	ldr	r3, [pc, #56]	; (8003c68 <__kernel_rem_pio2+0x300>)
 8003c30:	f04f 0a00 	mov.w	sl, #0
 8003c34:	9307      	str	r3, [sp, #28]
 8003c36:	ab70      	add	r3, sp, #448	; 0x1c0
 8003c38:	f04f 0b00 	mov.w	fp, #0
 8003c3c:	f04f 0800 	mov.w	r8, #0
 8003c40:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8003c44:	1ba7      	subs	r7, r4, r6
 8003c46:	e0dc      	b.n	8003e02 <__kernel_rem_pio2+0x49a>
 8003c48:	2302      	movs	r3, #2
 8003c4a:	9300      	str	r3, [sp, #0]
 8003c4c:	e757      	b.n	8003afe <__kernel_rem_pio2+0x196>
 8003c4e:	bf00      	nop
 8003c50:	080043e8 	.word	0x080043e8
 8003c54:	40200000 	.word	0x40200000
 8003c58:	3ff00000 	.word	0x3ff00000
 8003c5c:	3e700000 	.word	0x3e700000
 8003c60:	41700000 	.word	0x41700000
 8003c64:	3fe00000 	.word	0x3fe00000
 8003c68:	080043a8 	.word	0x080043a8
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	b944      	cbnz	r4, 8003c82 <__kernel_rem_pio2+0x31a>
 8003c70:	b11b      	cbz	r3, 8003c7a <__kernel_rem_pio2+0x312>
 8003c72:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8003c76:	603b      	str	r3, [r7, #0]
 8003c78:	2301      	movs	r3, #1
 8003c7a:	461c      	mov	r4, r3
 8003c7c:	3201      	adds	r2, #1
 8003c7e:	3704      	adds	r7, #4
 8003c80:	e744      	b.n	8003b0c <__kernel_rem_pio2+0x1a4>
 8003c82:	1acb      	subs	r3, r1, r3
 8003c84:	603b      	str	r3, [r7, #0]
 8003c86:	4623      	mov	r3, r4
 8003c88:	e7f7      	b.n	8003c7a <__kernel_rem_pio2+0x312>
 8003c8a:	1e72      	subs	r2, r6, #1
 8003c8c:	ab0c      	add	r3, sp, #48	; 0x30
 8003c8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c92:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8003c96:	a90c      	add	r1, sp, #48	; 0x30
 8003c98:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8003c9c:	e744      	b.n	8003b28 <__kernel_rem_pio2+0x1c0>
 8003c9e:	1e72      	subs	r2, r6, #1
 8003ca0:	ab0c      	add	r3, sp, #48	; 0x30
 8003ca2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ca6:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8003caa:	e7f4      	b.n	8003c96 <__kernel_rem_pio2+0x32e>
 8003cac:	a90c      	add	r1, sp, #48	; 0x30
 8003cae:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8003cb2:	3b01      	subs	r3, #1
 8003cb4:	430a      	orrs	r2, r1
 8003cb6:	e795      	b.n	8003be4 <__kernel_rem_pio2+0x27c>
 8003cb8:	3301      	adds	r3, #1
 8003cba:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8003cbe:	2900      	cmp	r1, #0
 8003cc0:	d0fa      	beq.n	8003cb8 <__kernel_rem_pio2+0x350>
 8003cc2:	9a08      	ldr	r2, [sp, #32]
 8003cc4:	a920      	add	r1, sp, #128	; 0x80
 8003cc6:	18b2      	adds	r2, r6, r2
 8003cc8:	f106 0801 	add.w	r8, r6, #1
 8003ccc:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8003cd0:	18f4      	adds	r4, r6, r3
 8003cd2:	4544      	cmp	r4, r8
 8003cd4:	da04      	bge.n	8003ce0 <__kernel_rem_pio2+0x378>
 8003cd6:	4626      	mov	r6, r4
 8003cd8:	e6bf      	b.n	8003a5a <__kernel_rem_pio2+0xf2>
 8003cda:	2301      	movs	r3, #1
 8003cdc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003cde:	e7ec      	b.n	8003cba <__kernel_rem_pio2+0x352>
 8003ce0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003ce2:	f04f 0900 	mov.w	r9, #0
 8003ce6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8003cea:	f7fc fb83 	bl	80003f4 <__aeabi_i2d>
 8003cee:	2600      	movs	r6, #0
 8003cf0:	2700      	movs	r7, #0
 8003cf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003cf4:	e9c5 0100 	strd	r0, r1, [r5]
 8003cf8:	3b08      	subs	r3, #8
 8003cfa:	9300      	str	r3, [sp, #0]
 8003cfc:	9504      	str	r5, [sp, #16]
 8003cfe:	9b07      	ldr	r3, [sp, #28]
 8003d00:	4599      	cmp	r9, r3
 8003d02:	dd05      	ble.n	8003d10 <__kernel_rem_pio2+0x3a8>
 8003d04:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 8003d08:	f108 0801 	add.w	r8, r8, #1
 8003d0c:	3508      	adds	r5, #8
 8003d0e:	e7e0      	b.n	8003cd2 <__kernel_rem_pio2+0x36a>
 8003d10:	f8dd c010 	ldr.w	ip, [sp, #16]
 8003d14:	9900      	ldr	r1, [sp, #0]
 8003d16:	f109 0901 	add.w	r9, r9, #1
 8003d1a:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 8003d1e:	9100      	str	r1, [sp, #0]
 8003d20:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 8003d24:	f8cd c010 	str.w	ip, [sp, #16]
 8003d28:	f7fc fbce 	bl	80004c8 <__aeabi_dmul>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	460b      	mov	r3, r1
 8003d30:	4630      	mov	r0, r6
 8003d32:	4639      	mov	r1, r7
 8003d34:	f7fc fa12 	bl	800015c <__adddf3>
 8003d38:	4606      	mov	r6, r0
 8003d3a:	460f      	mov	r7, r1
 8003d3c:	e7df      	b.n	8003cfe <__kernel_rem_pio2+0x396>
 8003d3e:	3c01      	subs	r4, #1
 8003d40:	e755      	b.n	8003bee <__kernel_rem_pio2+0x286>
 8003d42:	f1cb 0200 	rsb	r2, fp, #0
 8003d46:	4640      	mov	r0, r8
 8003d48:	4649      	mov	r1, r9
 8003d4a:	f000 f94d 	bl	8003fe8 <scalbn>
 8003d4e:	2200      	movs	r2, #0
 8003d50:	4ba3      	ldr	r3, [pc, #652]	; (8003fe0 <__kernel_rem_pio2+0x678>)
 8003d52:	4604      	mov	r4, r0
 8003d54:	460d      	mov	r5, r1
 8003d56:	f7fc fe3d 	bl	80009d4 <__aeabi_dcmpge>
 8003d5a:	b1f8      	cbz	r0, 8003d9c <__kernel_rem_pio2+0x434>
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	4ba1      	ldr	r3, [pc, #644]	; (8003fe4 <__kernel_rem_pio2+0x67c>)
 8003d60:	4620      	mov	r0, r4
 8003d62:	4629      	mov	r1, r5
 8003d64:	f7fc fbb0 	bl	80004c8 <__aeabi_dmul>
 8003d68:	f7fc fe48 	bl	80009fc <__aeabi_d2iz>
 8003d6c:	4607      	mov	r7, r0
 8003d6e:	f7fc fb41 	bl	80003f4 <__aeabi_i2d>
 8003d72:	2200      	movs	r2, #0
 8003d74:	4b9a      	ldr	r3, [pc, #616]	; (8003fe0 <__kernel_rem_pio2+0x678>)
 8003d76:	f7fc fba7 	bl	80004c8 <__aeabi_dmul>
 8003d7a:	460b      	mov	r3, r1
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	4629      	mov	r1, r5
 8003d80:	4620      	mov	r0, r4
 8003d82:	f7fc f9e9 	bl	8000158 <__aeabi_dsub>
 8003d86:	f7fc fe39 	bl	80009fc <__aeabi_d2iz>
 8003d8a:	1c74      	adds	r4, r6, #1
 8003d8c:	ab0c      	add	r3, sp, #48	; 0x30
 8003d8e:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8003d92:	f10b 0b18 	add.w	fp, fp, #24
 8003d96:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 8003d9a:	e730      	b.n	8003bfe <__kernel_rem_pio2+0x296>
 8003d9c:	4620      	mov	r0, r4
 8003d9e:	4629      	mov	r1, r5
 8003da0:	f7fc fe2c 	bl	80009fc <__aeabi_d2iz>
 8003da4:	ab0c      	add	r3, sp, #48	; 0x30
 8003da6:	4634      	mov	r4, r6
 8003da8:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8003dac:	e727      	b.n	8003bfe <__kernel_rem_pio2+0x296>
 8003dae:	ab0c      	add	r3, sp, #48	; 0x30
 8003db0:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8003db4:	f7fc fb1e 	bl	80003f4 <__aeabi_i2d>
 8003db8:	4632      	mov	r2, r6
 8003dba:	463b      	mov	r3, r7
 8003dbc:	f7fc fb84 	bl	80004c8 <__aeabi_dmul>
 8003dc0:	4642      	mov	r2, r8
 8003dc2:	e86b 0102 	strd	r0, r1, [fp], #-8
 8003dc6:	464b      	mov	r3, r9
 8003dc8:	4630      	mov	r0, r6
 8003dca:	4639      	mov	r1, r7
 8003dcc:	f7fc fb7c 	bl	80004c8 <__aeabi_dmul>
 8003dd0:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8003dd4:	4606      	mov	r6, r0
 8003dd6:	460f      	mov	r7, r1
 8003dd8:	e721      	b.n	8003c1e <__kernel_rem_pio2+0x2b6>
 8003dda:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8003dde:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8003de2:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 8003de6:	f8cd c01c 	str.w	ip, [sp, #28]
 8003dea:	f7fc fb6d 	bl	80004c8 <__aeabi_dmul>
 8003dee:	4602      	mov	r2, r0
 8003df0:	460b      	mov	r3, r1
 8003df2:	4650      	mov	r0, sl
 8003df4:	4659      	mov	r1, fp
 8003df6:	f7fc f9b1 	bl	800015c <__adddf3>
 8003dfa:	4682      	mov	sl, r0
 8003dfc:	468b      	mov	fp, r1
 8003dfe:	f108 0801 	add.w	r8, r8, #1
 8003e02:	9b02      	ldr	r3, [sp, #8]
 8003e04:	4598      	cmp	r8, r3
 8003e06:	dc01      	bgt.n	8003e0c <__kernel_rem_pio2+0x4a4>
 8003e08:	45b8      	cmp	r8, r7
 8003e0a:	dde6      	ble.n	8003dda <__kernel_rem_pio2+0x472>
 8003e0c:	ab48      	add	r3, sp, #288	; 0x120
 8003e0e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8003e12:	e9c7 ab00 	strd	sl, fp, [r7]
 8003e16:	3e01      	subs	r6, #1
 8003e18:	e706      	b.n	8003c28 <__kernel_rem_pio2+0x2c0>
 8003e1a:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	dc09      	bgt.n	8003e34 <__kernel_rem_pio2+0x4cc>
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	dc32      	bgt.n	8003e8a <__kernel_rem_pio2+0x522>
 8003e24:	d058      	beq.n	8003ed8 <__kernel_rem_pio2+0x570>
 8003e26:	9b04      	ldr	r3, [sp, #16]
 8003e28:	f003 0007 	and.w	r0, r3, #7
 8003e2c:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8003e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e34:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8003e36:	2b03      	cmp	r3, #3
 8003e38:	d1f5      	bne.n	8003e26 <__kernel_rem_pio2+0x4be>
 8003e3a:	ab48      	add	r3, sp, #288	; 0x120
 8003e3c:	441d      	add	r5, r3
 8003e3e:	46aa      	mov	sl, r5
 8003e40:	46a3      	mov	fp, r4
 8003e42:	f1bb 0f00 	cmp.w	fp, #0
 8003e46:	dc74      	bgt.n	8003f32 <__kernel_rem_pio2+0x5ca>
 8003e48:	46aa      	mov	sl, r5
 8003e4a:	46a3      	mov	fp, r4
 8003e4c:	f1bb 0f01 	cmp.w	fp, #1
 8003e50:	f300 808e 	bgt.w	8003f70 <__kernel_rem_pio2+0x608>
 8003e54:	2700      	movs	r7, #0
 8003e56:	463e      	mov	r6, r7
 8003e58:	2c01      	cmp	r4, #1
 8003e5a:	f300 80a8 	bgt.w	8003fae <__kernel_rem_pio2+0x646>
 8003e5e:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 8003e62:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 8003e66:	9b00      	ldr	r3, [sp, #0]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	f040 80aa 	bne.w	8003fc2 <__kernel_rem_pio2+0x65a>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	462a      	mov	r2, r5
 8003e72:	9806      	ldr	r0, [sp, #24]
 8003e74:	e9c0 2300 	strd	r2, r3, [r0]
 8003e78:	4622      	mov	r2, r4
 8003e7a:	460b      	mov	r3, r1
 8003e7c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8003e80:	463a      	mov	r2, r7
 8003e82:	4633      	mov	r3, r6
 8003e84:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8003e88:	e7cd      	b.n	8003e26 <__kernel_rem_pio2+0x4be>
 8003e8a:	2000      	movs	r0, #0
 8003e8c:	46a0      	mov	r8, r4
 8003e8e:	4601      	mov	r1, r0
 8003e90:	ab48      	add	r3, sp, #288	; 0x120
 8003e92:	441d      	add	r5, r3
 8003e94:	f1b8 0f00 	cmp.w	r8, #0
 8003e98:	da38      	bge.n	8003f0c <__kernel_rem_pio2+0x5a4>
 8003e9a:	9b00      	ldr	r3, [sp, #0]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d03c      	beq.n	8003f1a <__kernel_rem_pio2+0x5b2>
 8003ea0:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	462b      	mov	r3, r5
 8003ea8:	9d06      	ldr	r5, [sp, #24]
 8003eaa:	2601      	movs	r6, #1
 8003eac:	e9c5 2300 	strd	r2, r3, [r5]
 8003eb0:	460b      	mov	r3, r1
 8003eb2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8003eb6:	f7fc f94f 	bl	8000158 <__aeabi_dsub>
 8003eba:	4684      	mov	ip, r0
 8003ebc:	460f      	mov	r7, r1
 8003ebe:	ad48      	add	r5, sp, #288	; 0x120
 8003ec0:	42b4      	cmp	r4, r6
 8003ec2:	da2c      	bge.n	8003f1e <__kernel_rem_pio2+0x5b6>
 8003ec4:	9b00      	ldr	r3, [sp, #0]
 8003ec6:	b10b      	cbz	r3, 8003ecc <__kernel_rem_pio2+0x564>
 8003ec8:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8003ecc:	4662      	mov	r2, ip
 8003ece:	463b      	mov	r3, r7
 8003ed0:	9906      	ldr	r1, [sp, #24]
 8003ed2:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8003ed6:	e7a6      	b.n	8003e26 <__kernel_rem_pio2+0x4be>
 8003ed8:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 8003eda:	ab48      	add	r3, sp, #288	; 0x120
 8003edc:	4637      	mov	r7, r6
 8003ede:	441d      	add	r5, r3
 8003ee0:	2c00      	cmp	r4, #0
 8003ee2:	da09      	bge.n	8003ef8 <__kernel_rem_pio2+0x590>
 8003ee4:	9b00      	ldr	r3, [sp, #0]
 8003ee6:	b10b      	cbz	r3, 8003eec <__kernel_rem_pio2+0x584>
 8003ee8:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8003eec:	4632      	mov	r2, r6
 8003eee:	463b      	mov	r3, r7
 8003ef0:	9906      	ldr	r1, [sp, #24]
 8003ef2:	e9c1 2300 	strd	r2, r3, [r1]
 8003ef6:	e796      	b.n	8003e26 <__kernel_rem_pio2+0x4be>
 8003ef8:	4630      	mov	r0, r6
 8003efa:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8003efe:	4639      	mov	r1, r7
 8003f00:	f7fc f92c 	bl	800015c <__adddf3>
 8003f04:	3c01      	subs	r4, #1
 8003f06:	4606      	mov	r6, r0
 8003f08:	460f      	mov	r7, r1
 8003f0a:	e7e9      	b.n	8003ee0 <__kernel_rem_pio2+0x578>
 8003f0c:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8003f10:	f7fc f924 	bl	800015c <__adddf3>
 8003f14:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8003f18:	e7bc      	b.n	8003e94 <__kernel_rem_pio2+0x52c>
 8003f1a:	460d      	mov	r5, r1
 8003f1c:	e7c2      	b.n	8003ea4 <__kernel_rem_pio2+0x53c>
 8003f1e:	4660      	mov	r0, ip
 8003f20:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 8003f24:	4639      	mov	r1, r7
 8003f26:	f7fc f919 	bl	800015c <__adddf3>
 8003f2a:	3601      	adds	r6, #1
 8003f2c:	4684      	mov	ip, r0
 8003f2e:	460f      	mov	r7, r1
 8003f30:	e7c6      	b.n	8003ec0 <__kernel_rem_pio2+0x558>
 8003f32:	e9da 6700 	ldrd	r6, r7, [sl]
 8003f36:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 8003f3a:	4632      	mov	r2, r6
 8003f3c:	463b      	mov	r3, r7
 8003f3e:	4640      	mov	r0, r8
 8003f40:	4649      	mov	r1, r9
 8003f42:	f7fc f90b 	bl	800015c <__adddf3>
 8003f46:	4602      	mov	r2, r0
 8003f48:	460b      	mov	r3, r1
 8003f4a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003f4e:	4640      	mov	r0, r8
 8003f50:	4649      	mov	r1, r9
 8003f52:	f7fc f901 	bl	8000158 <__aeabi_dsub>
 8003f56:	4632      	mov	r2, r6
 8003f58:	463b      	mov	r3, r7
 8003f5a:	f7fc f8ff 	bl	800015c <__adddf3>
 8003f5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003f62:	e86a 0102 	strd	r0, r1, [sl], #-8
 8003f66:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8003f6a:	e9ca 2300 	strd	r2, r3, [sl]
 8003f6e:	e768      	b.n	8003e42 <__kernel_rem_pio2+0x4da>
 8003f70:	e9da 8900 	ldrd	r8, r9, [sl]
 8003f74:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 8003f78:	4642      	mov	r2, r8
 8003f7a:	464b      	mov	r3, r9
 8003f7c:	4630      	mov	r0, r6
 8003f7e:	4639      	mov	r1, r7
 8003f80:	f7fc f8ec 	bl	800015c <__adddf3>
 8003f84:	4602      	mov	r2, r0
 8003f86:	460b      	mov	r3, r1
 8003f88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003f8c:	4630      	mov	r0, r6
 8003f8e:	4639      	mov	r1, r7
 8003f90:	f7fc f8e2 	bl	8000158 <__aeabi_dsub>
 8003f94:	4642      	mov	r2, r8
 8003f96:	464b      	mov	r3, r9
 8003f98:	f7fc f8e0 	bl	800015c <__adddf3>
 8003f9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003fa0:	e86a 0102 	strd	r0, r1, [sl], #-8
 8003fa4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8003fa8:	e9ca 2300 	strd	r2, r3, [sl]
 8003fac:	e74e      	b.n	8003e4c <__kernel_rem_pio2+0x4e4>
 8003fae:	4638      	mov	r0, r7
 8003fb0:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8003fb4:	4631      	mov	r1, r6
 8003fb6:	f7fc f8d1 	bl	800015c <__adddf3>
 8003fba:	3c01      	subs	r4, #1
 8003fbc:	4607      	mov	r7, r0
 8003fbe:	460e      	mov	r6, r1
 8003fc0:	e74a      	b.n	8003e58 <__kernel_rem_pio2+0x4f0>
 8003fc2:	9b06      	ldr	r3, [sp, #24]
 8003fc4:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8003fc8:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8003fcc:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8003fd0:	e9c3 0401 	strd	r0, r4, [r3, #4]
 8003fd4:	e9c3 1703 	strd	r1, r7, [r3, #12]
 8003fd8:	601d      	str	r5, [r3, #0]
 8003fda:	615e      	str	r6, [r3, #20]
 8003fdc:	e723      	b.n	8003e26 <__kernel_rem_pio2+0x4be>
 8003fde:	bf00      	nop
 8003fe0:	41700000 	.word	0x41700000
 8003fe4:	3e700000 	.word	0x3e700000

08003fe8 <scalbn>:
 8003fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fea:	4616      	mov	r6, r2
 8003fec:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8003ff0:	4604      	mov	r4, r0
 8003ff2:	460d      	mov	r5, r1
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	b992      	cbnz	r2, 800401e <scalbn+0x36>
 8003ff8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003ffc:	4303      	orrs	r3, r0
 8003ffe:	d03c      	beq.n	800407a <scalbn+0x92>
 8004000:	4b31      	ldr	r3, [pc, #196]	; (80040c8 <scalbn+0xe0>)
 8004002:	2200      	movs	r2, #0
 8004004:	f7fc fa60 	bl	80004c8 <__aeabi_dmul>
 8004008:	4b30      	ldr	r3, [pc, #192]	; (80040cc <scalbn+0xe4>)
 800400a:	4604      	mov	r4, r0
 800400c:	429e      	cmp	r6, r3
 800400e:	460d      	mov	r5, r1
 8004010:	da0f      	bge.n	8004032 <scalbn+0x4a>
 8004012:	a329      	add	r3, pc, #164	; (adr r3, 80040b8 <scalbn+0xd0>)
 8004014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004018:	f7fc fa56 	bl	80004c8 <__aeabi_dmul>
 800401c:	e006      	b.n	800402c <scalbn+0x44>
 800401e:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8004022:	42ba      	cmp	r2, r7
 8004024:	d109      	bne.n	800403a <scalbn+0x52>
 8004026:	4602      	mov	r2, r0
 8004028:	f7fc f898 	bl	800015c <__adddf3>
 800402c:	4604      	mov	r4, r0
 800402e:	460d      	mov	r5, r1
 8004030:	e023      	b.n	800407a <scalbn+0x92>
 8004032:	460b      	mov	r3, r1
 8004034:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004038:	3a36      	subs	r2, #54	; 0x36
 800403a:	f24c 3150 	movw	r1, #50000	; 0xc350
 800403e:	428e      	cmp	r6, r1
 8004040:	dd0e      	ble.n	8004060 <scalbn+0x78>
 8004042:	a31f      	add	r3, pc, #124	; (adr r3, 80040c0 <scalbn+0xd8>)
 8004044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004048:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800404c:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8004050:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8004054:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8004058:	481d      	ldr	r0, [pc, #116]	; (80040d0 <scalbn+0xe8>)
 800405a:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800405e:	e7db      	b.n	8004018 <scalbn+0x30>
 8004060:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8004064:	4432      	add	r2, r6
 8004066:	428a      	cmp	r2, r1
 8004068:	dceb      	bgt.n	8004042 <scalbn+0x5a>
 800406a:	2a00      	cmp	r2, #0
 800406c:	dd08      	ble.n	8004080 <scalbn+0x98>
 800406e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004072:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004076:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800407a:	4620      	mov	r0, r4
 800407c:	4629      	mov	r1, r5
 800407e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004080:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8004084:	da0c      	bge.n	80040a0 <scalbn+0xb8>
 8004086:	a30c      	add	r3, pc, #48	; (adr r3, 80040b8 <scalbn+0xd0>)
 8004088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800408c:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8004090:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8004094:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8004098:	480e      	ldr	r0, [pc, #56]	; (80040d4 <scalbn+0xec>)
 800409a:	f041 011f 	orr.w	r1, r1, #31
 800409e:	e7bb      	b.n	8004018 <scalbn+0x30>
 80040a0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80040a4:	3236      	adds	r2, #54	; 0x36
 80040a6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80040aa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80040ae:	4620      	mov	r0, r4
 80040b0:	4629      	mov	r1, r5
 80040b2:	2200      	movs	r2, #0
 80040b4:	4b08      	ldr	r3, [pc, #32]	; (80040d8 <scalbn+0xf0>)
 80040b6:	e7af      	b.n	8004018 <scalbn+0x30>
 80040b8:	c2f8f359 	.word	0xc2f8f359
 80040bc:	01a56e1f 	.word	0x01a56e1f
 80040c0:	8800759c 	.word	0x8800759c
 80040c4:	7e37e43c 	.word	0x7e37e43c
 80040c8:	43500000 	.word	0x43500000
 80040cc:	ffff3cb0 	.word	0xffff3cb0
 80040d0:	8800759c 	.word	0x8800759c
 80040d4:	c2f8f359 	.word	0xc2f8f359
 80040d8:	3c900000 	.word	0x3c900000
 80040dc:	00000000 	.word	0x00000000

080040e0 <floor>:
 80040e0:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80040e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80040e8:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80040ec:	2e13      	cmp	r6, #19
 80040ee:	460b      	mov	r3, r1
 80040f0:	4607      	mov	r7, r0
 80040f2:	460c      	mov	r4, r1
 80040f4:	4605      	mov	r5, r0
 80040f6:	dc32      	bgt.n	800415e <floor+0x7e>
 80040f8:	2e00      	cmp	r6, #0
 80040fa:	da14      	bge.n	8004126 <floor+0x46>
 80040fc:	a334      	add	r3, pc, #208	; (adr r3, 80041d0 <floor+0xf0>)
 80040fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004102:	f7fc f82b 	bl	800015c <__adddf3>
 8004106:	2200      	movs	r2, #0
 8004108:	2300      	movs	r3, #0
 800410a:	f7fc fc6d 	bl	80009e8 <__aeabi_dcmpgt>
 800410e:	b138      	cbz	r0, 8004120 <floor+0x40>
 8004110:	2c00      	cmp	r4, #0
 8004112:	da56      	bge.n	80041c2 <floor+0xe2>
 8004114:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8004118:	4325      	orrs	r5, r4
 800411a:	d055      	beq.n	80041c8 <floor+0xe8>
 800411c:	2500      	movs	r5, #0
 800411e:	4c2e      	ldr	r4, [pc, #184]	; (80041d8 <floor+0xf8>)
 8004120:	4623      	mov	r3, r4
 8004122:	462f      	mov	r7, r5
 8004124:	e025      	b.n	8004172 <floor+0x92>
 8004126:	4a2d      	ldr	r2, [pc, #180]	; (80041dc <floor+0xfc>)
 8004128:	fa42 f806 	asr.w	r8, r2, r6
 800412c:	ea01 0208 	and.w	r2, r1, r8
 8004130:	4302      	orrs	r2, r0
 8004132:	d01e      	beq.n	8004172 <floor+0x92>
 8004134:	a326      	add	r3, pc, #152	; (adr r3, 80041d0 <floor+0xf0>)
 8004136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800413a:	f7fc f80f 	bl	800015c <__adddf3>
 800413e:	2200      	movs	r2, #0
 8004140:	2300      	movs	r3, #0
 8004142:	f7fc fc51 	bl	80009e8 <__aeabi_dcmpgt>
 8004146:	2800      	cmp	r0, #0
 8004148:	d0ea      	beq.n	8004120 <floor+0x40>
 800414a:	2c00      	cmp	r4, #0
 800414c:	bfbe      	ittt	lt
 800414e:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8004152:	4133      	asrlt	r3, r6
 8004154:	18e4      	addlt	r4, r4, r3
 8004156:	2500      	movs	r5, #0
 8004158:	ea24 0408 	bic.w	r4, r4, r8
 800415c:	e7e0      	b.n	8004120 <floor+0x40>
 800415e:	2e33      	cmp	r6, #51	; 0x33
 8004160:	dd0b      	ble.n	800417a <floor+0x9a>
 8004162:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8004166:	d104      	bne.n	8004172 <floor+0x92>
 8004168:	4602      	mov	r2, r0
 800416a:	f7fb fff7 	bl	800015c <__adddf3>
 800416e:	4607      	mov	r7, r0
 8004170:	460b      	mov	r3, r1
 8004172:	4638      	mov	r0, r7
 8004174:	4619      	mov	r1, r3
 8004176:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800417a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800417e:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8004182:	fa28 f802 	lsr.w	r8, r8, r2
 8004186:	ea10 0f08 	tst.w	r0, r8
 800418a:	d0f2      	beq.n	8004172 <floor+0x92>
 800418c:	a310      	add	r3, pc, #64	; (adr r3, 80041d0 <floor+0xf0>)
 800418e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004192:	f7fb ffe3 	bl	800015c <__adddf3>
 8004196:	2200      	movs	r2, #0
 8004198:	2300      	movs	r3, #0
 800419a:	f7fc fc25 	bl	80009e8 <__aeabi_dcmpgt>
 800419e:	2800      	cmp	r0, #0
 80041a0:	d0be      	beq.n	8004120 <floor+0x40>
 80041a2:	2c00      	cmp	r4, #0
 80041a4:	da0a      	bge.n	80041bc <floor+0xdc>
 80041a6:	2e14      	cmp	r6, #20
 80041a8:	d101      	bne.n	80041ae <floor+0xce>
 80041aa:	3401      	adds	r4, #1
 80041ac:	e006      	b.n	80041bc <floor+0xdc>
 80041ae:	2301      	movs	r3, #1
 80041b0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80041b4:	40b3      	lsls	r3, r6
 80041b6:	441d      	add	r5, r3
 80041b8:	42af      	cmp	r7, r5
 80041ba:	d8f6      	bhi.n	80041aa <floor+0xca>
 80041bc:	ea25 0508 	bic.w	r5, r5, r8
 80041c0:	e7ae      	b.n	8004120 <floor+0x40>
 80041c2:	2500      	movs	r5, #0
 80041c4:	462c      	mov	r4, r5
 80041c6:	e7ab      	b.n	8004120 <floor+0x40>
 80041c8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80041cc:	e7a8      	b.n	8004120 <floor+0x40>
 80041ce:	bf00      	nop
 80041d0:	8800759c 	.word	0x8800759c
 80041d4:	7e37e43c 	.word	0x7e37e43c
 80041d8:	bff00000 	.word	0xbff00000
 80041dc:	000fffff 	.word	0x000fffff

080041e0 <_init>:
 80041e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041e2:	bf00      	nop
 80041e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041e6:	bc08      	pop	{r3}
 80041e8:	469e      	mov	lr, r3
 80041ea:	4770      	bx	lr

080041ec <_fini>:
 80041ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041ee:	bf00      	nop
 80041f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041f2:	bc08      	pop	{r3}
 80041f4:	469e      	mov	lr, r3
 80041f6:	4770      	bx	lr
